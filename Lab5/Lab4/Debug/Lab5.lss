
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000210a  0000219e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000210a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  0080011c  0080011c  000021ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f4a  00000000  00000000  000024a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000110b  00000000  00000000  000053ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000171e  00000000  00000000  000064f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bdc  00000000  00000000  00007c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000959  00000000  00000000  000087f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000288d  00000000  00000000  0000914d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000b9da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 83 04 	jmp	0x906	; 0x906 <__vector_1>
       8:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__vector_2>
       c:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__vector_3>
      10:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__vector_4>
      14:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 b8 0c 	jmp	0x1970	; 0x1970 <__vector_9>
      28:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__vector_10>
      2c:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <__vector_11>
      30:	0c 94 77 07 	jmp	0xeee	; 0xeee <__vector_12>
      34:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__vector_13>
      38:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__vector_14>
      3c:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__vector_15>
      40:	0c 94 27 09 	jmp	0x124e	; 0x124e <__vector_16>
      44:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__vector_17>
      48:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__vector_18>
      4c:	0c 94 6b 0a 	jmp	0x14d6	; 0x14d6 <__vector_19>
      50:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <__vector_20>
      54:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__vector_21>
      58:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ea e0       	ldi	r30, 0x0A	; 10
      70:	f1 e2       	ldi	r31, 0x21	; 33
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ac 31       	cpi	r26, 0x1C	; 28
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ac e1       	ldi	r26, 0x1C	; 28
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	af 36       	cpi	r26, 0x6F	; 111
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 67 03 	call	0x6ce	; 0x6ce <main>
      92:	0c 94 83 10 	jmp	0x2106	; 0x2106 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <flagCheck>:
		ASYNC(this->g, updateGUI4, this->southQ);
	}
}


void flagCheck(Controller* this){
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	ec 01       	movw	r28, r24
	
	if(this->nFlag == 0 && this->sFlag == 0){ // both queue empty
      ac:	8b 85       	ldd	r24, Y+11	; 0x0b
      ae:	81 11       	cpse	r24, r1
      b0:	16 c0       	rjmp	.+44     	; 0xde <flagCheck+0x44>
      b2:	8c 85       	ldd	r24, Y+12	; 0x0c
      b4:	81 11       	cpse	r24, r1
      b6:	29 c0       	rjmp	.+82     	; 0x10a <flagCheck+0x70>
		ASYNC(this->s, totalStop, 0);
      b8:	0e 81       	ldd	r16, Y+6	; 0x06
      ba:	1f 81       	ldd	r17, Y+7	; 0x07
      bc:	c1 2c       	mov	r12, r1
      be:	d1 2c       	mov	r13, r1
      c0:	0f 2e       	mov	r0, r31
      c2:	f9 eb       	ldi	r31, 0xB9	; 185
      c4:	ef 2e       	mov	r14, r31
      c6:	f3 e0       	ldi	r31, 0x03	; 3
      c8:	ff 2e       	mov	r15, r31
      ca:	f0 2d       	mov	r31, r0
      cc:	20 e0       	ldi	r18, 0x00	; 0
      ce:	30 e0       	ldi	r19, 0x00	; 0
      d0:	a9 01       	movw	r20, r18
      d2:	60 e0       	ldi	r22, 0x00	; 0
      d4:	70 e0       	ldi	r23, 0x00	; 0
      d6:	cb 01       	movw	r24, r22
      d8:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
      dc:	77 c0       	rjmp	.+238    	; 0x1cc <flagCheck+0x132>
	}
	else if(this->nFlag == 1 && this->sFlag == 0){ // both queue empty
      de:	8c 85       	ldd	r24, Y+12	; 0x0c
      e0:	81 11       	cpse	r24, r1
      e2:	26 c0       	rjmp	.+76     	; 0x130 <flagCheck+0x96>
		ASYNC(this->s, greenNorth, 0);
      e4:	0e 81       	ldd	r16, Y+6	; 0x06
      e6:	1f 81       	ldd	r17, Y+7	; 0x07
      e8:	c1 2c       	mov	r12, r1
      ea:	d1 2c       	mov	r13, r1
      ec:	0f 2e       	mov	r0, r31
      ee:	f5 eb       	ldi	r31, 0xB5	; 181
      f0:	ef 2e       	mov	r14, r31
      f2:	f3 e0       	ldi	r31, 0x03	; 3
      f4:	ff 2e       	mov	r15, r31
      f6:	f0 2d       	mov	r31, r0
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	a9 01       	movw	r20, r18
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	70 e0       	ldi	r23, 0x00	; 0
     102:	cb 01       	movw	r24, r22
     104:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
     108:	61 c0       	rjmp	.+194    	; 0x1cc <flagCheck+0x132>
	}
	else if(this->nFlag == 0 && this->sFlag == 1){ // both queue empty
		ASYNC(this->s, greenSouth, 0);
     10a:	0e 81       	ldd	r16, Y+6	; 0x06
     10c:	1f 81       	ldd	r17, Y+7	; 0x07
     10e:	c1 2c       	mov	r12, r1
     110:	d1 2c       	mov	r13, r1
     112:	0f 2e       	mov	r0, r31
     114:	f1 eb       	ldi	r31, 0xB1	; 177
     116:	ef 2e       	mov	r14, r31
     118:	f3 e0       	ldi	r31, 0x03	; 3
     11a:	ff 2e       	mov	r15, r31
     11c:	f0 2d       	mov	r31, r0
     11e:	20 e0       	ldi	r18, 0x00	; 0
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	a9 01       	movw	r20, r18
     124:	60 e0       	ldi	r22, 0x00	; 0
     126:	70 e0       	ldi	r23, 0x00	; 0
     128:	cb 01       	movw	r24, r22
     12a:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
     12e:	4e c0       	rjmp	.+156    	; 0x1cc <flagCheck+0x132>
	}
	else if(this->nFlag == 1 && this->sFlag == 1){
		
		if (this->pointer){
     130:	8d 85       	ldd	r24, Y+13	; 0x0d
     132:	88 23       	and	r24, r24
     134:	21 f1       	breq	.+72     	; 0x17e <flagCheck+0xe4>
			ASYNC(this->s, totalStop, 0);
     136:	0e 81       	ldd	r16, Y+6	; 0x06
     138:	1f 81       	ldd	r17, Y+7	; 0x07
     13a:	c1 2c       	mov	r12, r1
     13c:	d1 2c       	mov	r13, r1
     13e:	0f 2e       	mov	r0, r31
     140:	f9 eb       	ldi	r31, 0xB9	; 185
     142:	ef 2e       	mov	r14, r31
     144:	f3 e0       	ldi	r31, 0x03	; 3
     146:	ff 2e       	mov	r15, r31
     148:	f0 2d       	mov	r31, r0
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	a9 01       	movw	r20, r18
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	70 e0       	ldi	r23, 0x00	; 0
     154:	cb 01       	movw	r24, r22
     156:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
			AFTER(WAIT, this->s, greenNorth, 0);
     15a:	0e 81       	ldd	r16, Y+6	; 0x06
     15c:	1f 81       	ldd	r17, Y+7	; 0x07
     15e:	0f 2e       	mov	r0, r31
     160:	f5 eb       	ldi	r31, 0xB5	; 181
     162:	ef 2e       	mov	r14, r31
     164:	f3 e0       	ldi	r31, 0x03	; 3
     166:	ff 2e       	mov	r15, r31
     168:	f0 2d       	mov	r31, r0
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	a9 01       	movw	r20, r18
     170:	6a e5       	ldi	r22, 0x5A	; 90
     172:	72 e6       	ldi	r23, 0x62	; 98
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
     17c:	23 c0       	rjmp	.+70     	; 0x1c4 <flagCheck+0x12a>
		}
		else{
			ASYNC(this->s, totalStop, 0);
     17e:	0e 81       	ldd	r16, Y+6	; 0x06
     180:	1f 81       	ldd	r17, Y+7	; 0x07
     182:	c1 2c       	mov	r12, r1
     184:	d1 2c       	mov	r13, r1
     186:	0f 2e       	mov	r0, r31
     188:	f9 eb       	ldi	r31, 0xB9	; 185
     18a:	ef 2e       	mov	r14, r31
     18c:	f3 e0       	ldi	r31, 0x03	; 3
     18e:	ff 2e       	mov	r15, r31
     190:	f0 2d       	mov	r31, r0
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	a9 01       	movw	r20, r18
     198:	60 e0       	ldi	r22, 0x00	; 0
     19a:	70 e0       	ldi	r23, 0x00	; 0
     19c:	cb 01       	movw	r24, r22
     19e:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
			AFTER(WAIT, this->s, greenSouth, 0);
     1a2:	0e 81       	ldd	r16, Y+6	; 0x06
     1a4:	1f 81       	ldd	r17, Y+7	; 0x07
     1a6:	0f 2e       	mov	r0, r31
     1a8:	f1 eb       	ldi	r31, 0xB1	; 177
     1aa:	ef 2e       	mov	r14, r31
     1ac:	f3 e0       	ldi	r31, 0x03	; 3
     1ae:	ff 2e       	mov	r15, r31
     1b0:	f0 2d       	mov	r31, r0
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	a9 01       	movw	r20, r18
     1b8:	6a e5       	ldi	r22, 0x5A	; 90
     1ba:	72 e6       	ldi	r23, 0x62	; 98
     1bc:	82 e0       	ldi	r24, 0x02	; 2
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
		}
		this->pointer = !this->pointer;
     1c4:	9d 85       	ldd	r25, Y+13	; 0x0d
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	89 27       	eor	r24, r25
     1ca:	8d 87       	std	Y+13, r24	; 0x0d
	}
}
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	ff 90       	pop	r15
     1d6:	ef 90       	pop	r14
     1d8:	df 90       	pop	r13
     1da:	cf 90       	pop	r12
     1dc:	08 95       	ret

000001de <addToBridge>:



void addToBridge(Controller* this, uint8_t add){
     1de:	cf 92       	push	r12
     1e0:	df 92       	push	r13
     1e2:	ef 92       	push	r14
     1e4:	ff 92       	push	r15
     1e6:	0f 93       	push	r16
     1e8:	1f 93       	push	r17
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	ec 01       	movw	r28, r24
	
	if(add == 1){
     1f0:	61 30       	cpi	r22, 0x01	; 1
     1f2:	29 f5       	brne	.+74     	; 0x23e <addToBridge+0x60>
		ASYNC(this->g, updateGUI2, this->CarsOnBridge);
     1f4:	ca 84       	ldd	r12, Y+10	; 0x0a
     1f6:	d1 2c       	mov	r13, r1
     1f8:	0c 81       	ldd	r16, Y+4	; 0x04
     1fa:	1d 81       	ldd	r17, Y+5	; 0x05
     1fc:	0f 2e       	mov	r0, r31
     1fe:	fe e7       	ldi	r31, 0x7E	; 126
     200:	ef 2e       	mov	r14, r31
     202:	f2 e0       	ldi	r31, 0x02	; 2
     204:	ff 2e       	mov	r15, r31
     206:	f0 2d       	mov	r31, r0
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	a9 01       	movw	r20, r18
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	cb 01       	movw	r24, r22
     214:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
		AFTER(WAIT, this, addToBridge, 0);
     218:	c1 2c       	mov	r12, r1
     21a:	d1 2c       	mov	r13, r1
     21c:	0f 2e       	mov	r0, r31
     21e:	ff ee       	ldi	r31, 0xEF	; 239
     220:	ef 2e       	mov	r14, r31
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	ff 2e       	mov	r15, r31
     226:	f0 2d       	mov	r31, r0
     228:	8e 01       	movw	r16, r28
     22a:	20 e0       	ldi	r18, 0x00	; 0
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	a9 01       	movw	r20, r18
     230:	6a e5       	ldi	r22, 0x5A	; 90
     232:	72 e6       	ldi	r23, 0x62	; 98
     234:	82 e0       	ldi	r24, 0x02	; 2
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
     23c:	14 c0       	rjmp	.+40     	; 0x266 <addToBridge+0x88>
	}
	else{
		this->CarsOnBridge--;
     23e:	ca 84       	ldd	r12, Y+10	; 0x0a
     240:	ca 94       	dec	r12
     242:	ca 86       	std	Y+10, r12	; 0x0a
		ASYNC(this->g, updateGUI2, this->CarsOnBridge);
     244:	d1 2c       	mov	r13, r1
     246:	0c 81       	ldd	r16, Y+4	; 0x04
     248:	1d 81       	ldd	r17, Y+5	; 0x05
     24a:	0f 2e       	mov	r0, r31
     24c:	fe e7       	ldi	r31, 0x7E	; 126
     24e:	ef 2e       	mov	r14, r31
     250:	f2 e0       	ldi	r31, 0x02	; 2
     252:	ff 2e       	mov	r15, r31
     254:	f0 2d       	mov	r31, r0
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	a9 01       	movw	r20, r18
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	cb 01       	movw	r24, r22
     262:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
		//if(this->CarsOnBridge == 0) ASYNC(this, flagCheck, 0);
	}
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	1f 91       	pop	r17
     26c:	0f 91       	pop	r16
     26e:	ff 90       	pop	r15
     270:	ef 90       	pop	r14
     272:	df 90       	pop	r13
     274:	cf 90       	pop	r12
     276:	08 95       	ret

00000278 <carCounter>:
 */ 
#include "Controller.h"

#define WAIT SEC(5)

void carCounter(Controller* this, uint8_t input){
     278:	cf 92       	push	r12
     27a:	df 92       	push	r13
     27c:	ef 92       	push	r14
     27e:	ff 92       	push	r15
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	ec 01       	movw	r28, r24
	
	if (input & 1){ // Car enters bridge from north
     28a:	60 ff       	sbrs	r22, 0
     28c:	29 c0       	rjmp	.+82     	; 0x2e0 <carCounter+0x68>
		this->northQ++;
     28e:	88 85       	ldd	r24, Y+8	; 0x08
     290:	8f 5f       	subi	r24, 0xFF	; 255
     292:	88 87       	std	Y+8, r24	; 0x08
		this->nFlag = 1; 
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	8b 87       	std	Y+11, r24	; 0x0b
		
		ASYNC(this, flagCheck, 0);
     298:	c1 2c       	mov	r12, r1
     29a:	d1 2c       	mov	r13, r1
     29c:	0f 2e       	mov	r0, r31
     29e:	fd e4       	ldi	r31, 0x4D	; 77
     2a0:	ef 2e       	mov	r14, r31
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	ff 2e       	mov	r15, r31
     2a6:	f0 2d       	mov	r31, r0
     2a8:	8e 01       	movw	r16, r28
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	a9 01       	movw	r20, r18
     2b0:	60 e0       	ldi	r22, 0x00	; 0
     2b2:	70 e0       	ldi	r23, 0x00	; 0
     2b4:	cb 01       	movw	r24, r22
     2b6:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
		ASYNC(this->g, updateGUI0, this->northQ); 
     2ba:	c8 84       	ldd	r12, Y+8	; 0x08
     2bc:	d1 2c       	mov	r13, r1
     2be:	0c 81       	ldd	r16, Y+4	; 0x04
     2c0:	1d 81       	ldd	r17, Y+5	; 0x05
     2c2:	0f 2e       	mov	r0, r31
     2c4:	f6 e7       	ldi	r31, 0x76	; 118
     2c6:	ef 2e       	mov	r14, r31
     2c8:	f2 e0       	ldi	r31, 0x02	; 2
     2ca:	ff 2e       	mov	r15, r31
     2cc:	f0 2d       	mov	r31, r0
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	a9 01       	movw	r20, r18
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	cb 01       	movw	r24, r22
     2da:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
     2de:	fd c0       	rjmp	.+506    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	else if ((input >> 1) & 1){ // Car enters bridge from north
     2e0:	61 ff       	sbrs	r22, 1
     2e2:	67 c0       	rjmp	.+206    	; 0x3b2 <carCounter+0x13a>
		this->CarsOnBridge++;
     2e4:	8a 85       	ldd	r24, Y+10	; 0x0a
     2e6:	8f 5f       	subi	r24, 0xFF	; 255
     2e8:	8a 87       	std	Y+10, r24	; 0x0a
		this->northQ--;
     2ea:	88 85       	ldd	r24, Y+8	; 0x08
     2ec:	81 50       	subi	r24, 0x01	; 1
     2ee:	88 87       	std	Y+8, r24	; 0x08
		this->pointer = 0;
     2f0:	1d 86       	std	Y+13, r1	; 0x0d
		ASYNC(this, addToBridge, 1);
     2f2:	cc 24       	eor	r12, r12
     2f4:	c3 94       	inc	r12
     2f6:	d1 2c       	mov	r13, r1
     2f8:	0f 2e       	mov	r0, r31
     2fa:	ff ee       	ldi	r31, 0xEF	; 239
     2fc:	ef 2e       	mov	r14, r31
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	ff 2e       	mov	r15, r31
     302:	f0 2d       	mov	r31, r0
     304:	8e 01       	movw	r16, r28
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	a9 01       	movw	r20, r18
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	cb 01       	movw	r24, r22
     312:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
		if (this->northQ == 0) {
     316:	88 85       	ldd	r24, Y+8	; 0x08
     318:	81 11       	cpse	r24, r1
     31a:	24 c0       	rjmp	.+72     	; 0x364 <carCounter+0xec>
			this->nFlag = 0; 
     31c:	1b 86       	std	Y+11, r1	; 0x0b
			ASYNC(this->s, totalStop, 0);
     31e:	0e 81       	ldd	r16, Y+6	; 0x06
     320:	1f 81       	ldd	r17, Y+7	; 0x07
     322:	c1 2c       	mov	r12, r1
     324:	d1 2c       	mov	r13, r1
     326:	0f 2e       	mov	r0, r31
     328:	f9 eb       	ldi	r31, 0xB9	; 185
     32a:	ef 2e       	mov	r14, r31
     32c:	f3 e0       	ldi	r31, 0x03	; 3
     32e:	ff 2e       	mov	r15, r31
     330:	f0 2d       	mov	r31, r0
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	a9 01       	movw	r20, r18
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	cb 01       	movw	r24, r22
     33e:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
			AFTER(WAIT, this, flagCheck, 0);
     342:	0f 2e       	mov	r0, r31
     344:	fd e4       	ldi	r31, 0x4D	; 77
     346:	ef 2e       	mov	r14, r31
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	ff 2e       	mov	r15, r31
     34c:	f0 2d       	mov	r31, r0
     34e:	8e 01       	movw	r16, r28
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	a9 01       	movw	r20, r18
     356:	6a e5       	ldi	r22, 0x5A	; 90
     358:	72 e6       	ldi	r23, 0x62	; 98
     35a:	82 e0       	ldi	r24, 0x02	; 2
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
     362:	14 c0       	rjmp	.+40     	; 0x38c <carCounter+0x114>
		}
		else if (this->CarsOnBridge == 5) ASYNC(this, flagCheck, 0);
     364:	8a 85       	ldd	r24, Y+10	; 0x0a
     366:	85 30       	cpi	r24, 0x05	; 5
     368:	89 f4       	brne	.+34     	; 0x38c <carCounter+0x114>
     36a:	c1 2c       	mov	r12, r1
     36c:	d1 2c       	mov	r13, r1
     36e:	0f 2e       	mov	r0, r31
     370:	fd e4       	ldi	r31, 0x4D	; 77
     372:	ef 2e       	mov	r14, r31
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	ff 2e       	mov	r15, r31
     378:	f0 2d       	mov	r31, r0
     37a:	8e 01       	movw	r16, r28
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	a9 01       	movw	r20, r18
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	cb 01       	movw	r24, r22
     388:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
		
		ASYNC(this->g, updateGUI0, this->northQ);
     38c:	c8 84       	ldd	r12, Y+8	; 0x08
     38e:	d1 2c       	mov	r13, r1
     390:	0c 81       	ldd	r16, Y+4	; 0x04
     392:	1d 81       	ldd	r17, Y+5	; 0x05
     394:	0f 2e       	mov	r0, r31
     396:	f6 e7       	ldi	r31, 0x76	; 118
     398:	ef 2e       	mov	r14, r31
     39a:	f2 e0       	ldi	r31, 0x02	; 2
     39c:	ff 2e       	mov	r15, r31
     39e:	f0 2d       	mov	r31, r0
     3a0:	20 e0       	ldi	r18, 0x00	; 0
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	a9 01       	movw	r20, r18
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	cb 01       	movw	r24, r22
     3ac:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
     3b0:	94 c0       	rjmp	.+296    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	else if ((input >> 2) & 1 ){ // Car enters Q from south
     3b2:	62 ff       	sbrs	r22, 2
     3b4:	29 c0       	rjmp	.+82     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		this->southQ++;
     3b6:	89 85       	ldd	r24, Y+9	; 0x09
     3b8:	8f 5f       	subi	r24, 0xFF	; 255
     3ba:	89 87       	std	Y+9, r24	; 0x09
		this->sFlag = 1;
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	8c 87       	std	Y+12, r24	; 0x0c
		
		ASYNC(this, flagCheck, 0);
     3c0:	c1 2c       	mov	r12, r1
     3c2:	d1 2c       	mov	r13, r1
     3c4:	0f 2e       	mov	r0, r31
     3c6:	fd e4       	ldi	r31, 0x4D	; 77
     3c8:	ef 2e       	mov	r14, r31
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	ff 2e       	mov	r15, r31
     3ce:	f0 2d       	mov	r31, r0
     3d0:	8e 01       	movw	r16, r28
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	a9 01       	movw	r20, r18
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	cb 01       	movw	r24, r22
     3de:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
		ASYNC(this->g, updateGUI4, this->southQ);
     3e2:	c9 84       	ldd	r12, Y+9	; 0x09
     3e4:	d1 2c       	mov	r13, r1
     3e6:	0c 81       	ldd	r16, Y+4	; 0x04
     3e8:	1d 81       	ldd	r17, Y+5	; 0x05
     3ea:	0f 2e       	mov	r0, r31
     3ec:	f6 e8       	ldi	r31, 0x86	; 134
     3ee:	ef 2e       	mov	r14, r31
     3f0:	f2 e0       	ldi	r31, 0x02	; 2
     3f2:	ff 2e       	mov	r15, r31
     3f4:	f0 2d       	mov	r31, r0
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	a9 01       	movw	r20, r18
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	cb 01       	movw	r24, r22
     402:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
     406:	69 c0       	rjmp	.+210    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	else if ((input >> 3) & 1){ // Car enters bridge from south
     408:	63 ff       	sbrs	r22, 3
     40a:	67 c0       	rjmp	.+206    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
		this->CarsOnBridge++;
     40c:	8a 85       	ldd	r24, Y+10	; 0x0a
     40e:	8f 5f       	subi	r24, 0xFF	; 255
     410:	8a 87       	std	Y+10, r24	; 0x0a
		this->southQ--;
     412:	89 85       	ldd	r24, Y+9	; 0x09
     414:	81 50       	subi	r24, 0x01	; 1
     416:	89 87       	std	Y+9, r24	; 0x09
		this->pointer = 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	8d 87       	std	Y+13, r24	; 0x0d
		ASYNC(this, addToBridge, 1);
     41c:	cc 24       	eor	r12, r12
     41e:	c3 94       	inc	r12
     420:	d1 2c       	mov	r13, r1
     422:	0f 2e       	mov	r0, r31
     424:	ff ee       	ldi	r31, 0xEF	; 239
     426:	ef 2e       	mov	r14, r31
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	ff 2e       	mov	r15, r31
     42c:	f0 2d       	mov	r31, r0
     42e:	8e 01       	movw	r16, r28
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	a9 01       	movw	r20, r18
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	cb 01       	movw	r24, r22
     43c:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
		if (this->southQ == 0) {
     440:	89 85       	ldd	r24, Y+9	; 0x09
     442:	81 11       	cpse	r24, r1
     444:	24 c0       	rjmp	.+72     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			this->sFlag = 0;
     446:	1c 86       	std	Y+12, r1	; 0x0c
			ASYNC(this->s, totalStop, 0);
     448:	0e 81       	ldd	r16, Y+6	; 0x06
     44a:	1f 81       	ldd	r17, Y+7	; 0x07
     44c:	c1 2c       	mov	r12, r1
     44e:	d1 2c       	mov	r13, r1
     450:	0f 2e       	mov	r0, r31
     452:	f9 eb       	ldi	r31, 0xB9	; 185
     454:	ef 2e       	mov	r14, r31
     456:	f3 e0       	ldi	r31, 0x03	; 3
     458:	ff 2e       	mov	r15, r31
     45a:	f0 2d       	mov	r31, r0
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	a9 01       	movw	r20, r18
     462:	60 e0       	ldi	r22, 0x00	; 0
     464:	70 e0       	ldi	r23, 0x00	; 0
     466:	cb 01       	movw	r24, r22
     468:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
			AFTER(WAIT, this, flagCheck, 0);
     46c:	0f 2e       	mov	r0, r31
     46e:	fd e4       	ldi	r31, 0x4D	; 77
     470:	ef 2e       	mov	r14, r31
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	ff 2e       	mov	r15, r31
     476:	f0 2d       	mov	r31, r0
     478:	8e 01       	movw	r16, r28
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	a9 01       	movw	r20, r18
     480:	6a e5       	ldi	r22, 0x5A	; 90
     482:	72 e6       	ldi	r23, 0x62	; 98
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
     48c:	14 c0       	rjmp	.+40     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
		}
		else if (this->CarsOnBridge == 5) ASYNC(this, flagCheck, 0);
     48e:	8a 85       	ldd	r24, Y+10	; 0x0a
     490:	85 30       	cpi	r24, 0x05	; 5
     492:	89 f4       	brne	.+34     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     494:	c1 2c       	mov	r12, r1
     496:	d1 2c       	mov	r13, r1
     498:	0f 2e       	mov	r0, r31
     49a:	fd e4       	ldi	r31, 0x4D	; 77
     49c:	ef 2e       	mov	r14, r31
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	ff 2e       	mov	r15, r31
     4a2:	f0 2d       	mov	r31, r0
     4a4:	8e 01       	movw	r16, r28
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	a9 01       	movw	r20, r18
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	cb 01       	movw	r24, r22
     4b2:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
		
		ASYNC(this->g, updateGUI4, this->southQ);
     4b6:	c9 84       	ldd	r12, Y+9	; 0x09
     4b8:	d1 2c       	mov	r13, r1
     4ba:	0c 81       	ldd	r16, Y+4	; 0x04
     4bc:	1d 81       	ldd	r17, Y+5	; 0x05
     4be:	0f 2e       	mov	r0, r31
     4c0:	f6 e8       	ldi	r31, 0x86	; 134
     4c2:	ef 2e       	mov	r14, r31
     4c4:	f2 e0       	ldi	r31, 0x02	; 2
     4c6:	ff 2e       	mov	r15, r31
     4c8:	f0 2d       	mov	r31, r0
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	a9 01       	movw	r20, r18
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	cb 01       	movw	r24, r22
     4d6:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
	}
}
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	0f 91       	pop	r16
     4e2:	ff 90       	pop	r15
     4e4:	ef 90       	pop	r14
     4e6:	df 90       	pop	r13
     4e8:	cf 90       	pop	r12
     4ea:	08 95       	ret

000004ec <updateGUI0>:
 * Created: 2021-03-03 11:31:24
 *  Author: marcu
 */ 
#include "GUI.h"
void updateGUI0(GUI *this, uint8_t state){
	printAt(state, 0);
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	0e 94 0b 03 	call	0x616	; 0x616 <printAt>
     4fa:	08 95       	ret

000004fc <updateGUI2>:
}

void updateGUI2(GUI *this, uint8_t state){
	printAt(state, 2);
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	42 e0       	ldi	r20, 0x02	; 2
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	0e 94 0b 03 	call	0x616	; 0x616 <printAt>
     50a:	08 95       	ret

0000050c <updateGUI4>:
}

void updateGUI4(GUI *this, uint8_t state){
	printAt(state, 4);
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	44 e0       	ldi	r20, 0x04	; 4
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	0e 94 0b 03 	call	0x616	; 0x616 <printAt>
     51a:	08 95       	ret

0000051c <signalInterrupt>:
 * Created: 2021-03-09 09:36:16
 *  Author: marasp-9
 */ 
#include "interrupt.h"

void signalInterrupt(Interrupt* this){
     51c:	cf 92       	push	r12
     51e:	df 92       	push	r13
     520:	ef 92       	push	r14
     522:	ff 92       	push	r15
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
	uint8_t data = UDR0;
     528:	c0 90 c6 00 	lds	r12, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	
	ASYNC(this->c, carCounter, data);
     52c:	d1 2c       	mov	r13, r1
     52e:	fc 01       	movw	r30, r24
     530:	04 81       	ldd	r16, Z+4	; 0x04
     532:	15 81       	ldd	r17, Z+5	; 0x05
     534:	0f 2e       	mov	r0, r31
     536:	fc e3       	ldi	r31, 0x3C	; 60
     538:	ef 2e       	mov	r14, r31
     53a:	f1 e0       	ldi	r31, 0x01	; 1
     53c:	ff 2e       	mov	r15, r31
     53e:	f0 2d       	mov	r31, r0
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	a9 01       	movw	r20, r18
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	cb 01       	movw	r24, r22
     54c:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
}
     550:	1f 91       	pop	r17
     552:	0f 91       	pop	r16
     554:	ff 90       	pop	r15
     556:	ef 90       	pop	r14
     558:	df 90       	pop	r13
     55a:	cf 90       	pop	r12
     55c:	08 95       	ret

0000055e <initInterrupts>:


void initInterrupts(){
	
	EIFR = 0xC0;
     55e:	80 ec       	ldi	r24, 0xC0	; 192
     560:	8c bb       	out	0x1c, r24	; 28
	
	EIMSK = 0xC0;
     562:	8d bb       	out	0x1d, r24	; 29
     564:	08 95       	ret

00000566 <initUSART>:
}


void initUSART(){
	
	UBRR0H = UBRR >> 8;
     566:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = UBRR;
     56a:	83 e3       	ldi	r24, 0x33	; 51
     56c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     570:	88 e9       	ldi	r24, 0x98	; 152
     572:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
     576:	86 e0       	ldi	r24, 0x06	; 6
     578:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     57c:	08 95       	ret

0000057e <writeChar>:
	printAt(00, 4);

}

//Writes character ch on position pos
void writeChar(char ch, int pos){
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	cd b7       	in	r28, 0x3d	; 61
     584:	de b7       	in	r29, 0x3e	; 62
     586:	64 97       	sbiw	r28, 0x14	; 20
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	f8 94       	cli
     58c:	de bf       	out	0x3e, r29	; 62
     58e:	0f be       	out	0x3f, r0	; 63
     590:	cd bf       	out	0x3d, r28	; 61
	
	// Sent to LCD
	uint8_t nibble = 0x0;
	
	//The numbers from 0-9
	uint16_t sccNumbers[10] = {0x1551, 0x0110, 0x1e11, 0x1b11, 0x0b50, 0x1b41, 0x1f41, 0x0111, 0x1f51, 0x0b51};
     592:	94 e1       	ldi	r25, 0x14	; 20
     594:	e8 e0       	ldi	r30, 0x08	; 8
     596:	f1 e0       	ldi	r31, 0x01	; 1
     598:	de 01       	movw	r26, r28
     59a:	11 96       	adiw	r26, 0x01	; 1
     59c:	01 90       	ld	r0, Z+
     59e:	0d 92       	st	X+, r0
     5a0:	9a 95       	dec	r25
     5a2:	e1 f7       	brne	.-8      	; 0x59c <writeChar+0x1e>
	
	
	//input char within range
	if (pos<0 || pos > 5){
     5a4:	66 30       	cpi	r22, 0x06	; 6
     5a6:	71 05       	cpc	r23, r1
     5a8:	68 f5       	brcc	.+90     	; 0x604 <writeChar+0x86>
	
	//Lookup LCD segment control code (SCC) in LCD character table
	if(ch>= '0' || ch <= '9'){
		
		// Get the number from our array (sub with zero because its the first in the ascii table)
		nr = sccNumbers[ch - '0'];
     5aa:	e8 2f       	mov	r30, r24
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	f0 97       	sbiw	r30, 0x30	; 48
     5b0:	ee 0f       	add	r30, r30
     5b2:	ff 1f       	adc	r31, r31
     5b4:	ec 0f       	add	r30, r28
     5b6:	fd 1f       	adc	r31, r29
     5b8:	21 81       	ldd	r18, Z+1	; 0x01
     5ba:	32 81       	ldd	r19, Z+2	; 0x02
	}
	
	//Point to the right position
	lcdAdress += pos >> 1;
     5bc:	fb 01       	movw	r30, r22
     5be:	f5 95       	asr	r31
     5c0:	e7 95       	ror	r30
     5c2:	e4 51       	subi	r30, 0x14	; 20
     5c4:	ff 4f       	sbci	r31, 0xFF	; 255
	
	if(pos % 2 == 0){
     5c6:	db 01       	movw	r26, r22
     5c8:	a1 70       	andi	r26, 0x01	; 1
     5ca:	bb 27       	eor	r27, r27
     5cc:	60 ff       	sbrs	r22, 0
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <writeChar+0x56>
		mask = 0xf0;
	}
	else {
		mask = 0x0f;
     5d0:	6f e0       	ldi	r22, 0x0F	; 15
     5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <writeChar+0x58>
	
	//Point to the right position
	lcdAdress += pos >> 1;
	
	if(pos % 2 == 0){
		mask = 0xf0;
     5d4:	60 ef       	ldi	r22, 0xF0	; 240
     5d6:	af 01       	movw	r20, r30
     5d8:	4c 5e       	subi	r20, 0xEC	; 236
     5da:	5f 4f       	sbci	r21, 0xFF	; 255
		mask = 0x0f;
	}
	
	for(int i = 0; i < 4; i++){
		
		nibble = nr & 0xf;
     5dc:	82 2f       	mov	r24, r18
     5de:	8f 70       	andi	r24, 0x0F	; 15
		nr = nr >> 4;
     5e0:	32 95       	swap	r19
     5e2:	22 95       	swap	r18
     5e4:	2f 70       	andi	r18, 0x0F	; 15
     5e6:	23 27       	eor	r18, r19
     5e8:	3f 70       	andi	r19, 0x0F	; 15
     5ea:	23 27       	eor	r18, r19
		
		if(pos % 2 != 0){
     5ec:	10 97       	sbiw	r26, 0x00	; 0
     5ee:	11 f0       	breq	.+4      	; 0x5f4 <writeChar+0x76>
			nibble = nibble << 4;
     5f0:	82 95       	swap	r24
     5f2:	80 7f       	andi	r24, 0xF0	; 240
		}
		
		*lcdAdress = (*lcdAdress & mask) | nibble;
     5f4:	90 81       	ld	r25, Z
     5f6:	96 23       	and	r25, r22
     5f8:	89 2b       	or	r24, r25
     5fa:	80 83       	st	Z, r24
		
		lcdAdress += 5;
     5fc:	35 96       	adiw	r30, 0x05	; 5
	}
	else {
		mask = 0x0f;
	}
	
	for(int i = 0; i < 4; i++){
     5fe:	4e 17       	cp	r20, r30
     600:	5f 07       	cpc	r21, r31
     602:	61 f7       	brne	.-40     	; 0x5dc <writeChar+0x5e>
		
		lcdAdress += 5;
		
	}
	
}
     604:	64 96       	adiw	r28, 0x14	; 20
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	cd bf       	out	0x3d, r28	; 61
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	08 95       	ret

00000616 <printAt>:
void printAt(long num, int pos) {
     616:	8f 92       	push	r8
     618:	9f 92       	push	r9
     61a:	af 92       	push	r10
     61c:	bf 92       	push	r11
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	4b 01       	movw	r8, r22
     62c:	5c 01       	movw	r10, r24
     62e:	ea 01       	movw	r28, r20
	int pp = 0;
	pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     630:	24 e6       	ldi	r18, 0x64	; 100
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	0e 94 01 10 	call	0x2002	; 0x2002 <__divmodsi4>
     63c:	0f 2e       	mov	r0, r31
     63e:	fa e0       	ldi	r31, 0x0A	; 10
     640:	cf 2e       	mov	r12, r31
     642:	d1 2c       	mov	r13, r1
     644:	e1 2c       	mov	r14, r1
     646:	f1 2c       	mov	r15, r1
     648:	f0 2d       	mov	r31, r0
     64a:	a7 01       	movw	r20, r14
     64c:	96 01       	movw	r18, r12
     64e:	0e 94 01 10 	call	0x2002	; 0x2002 <__divmodsi4>
     652:	be 01       	movw	r22, r28
     654:	80 e3       	ldi	r24, 0x30	; 48
     656:	82 0f       	add	r24, r18
     658:	0e 94 bf 02 	call	0x57e	; 0x57e <writeChar>
	pp++;

	writeChar( num % 10 + '0', pp);
     65c:	21 96       	adiw	r28, 0x01	; 1
     65e:	c5 01       	movw	r24, r10
     660:	b4 01       	movw	r22, r8
     662:	a7 01       	movw	r20, r14
     664:	96 01       	movw	r18, r12
     666:	0e 94 01 10 	call	0x2002	; 0x2002 <__divmodsi4>
     66a:	86 2f       	mov	r24, r22
     66c:	be 01       	movw	r22, r28
     66e:	80 5d       	subi	r24, 0xD0	; 208
     670:	0e 94 bf 02 	call	0x57e	; 0x57e <writeChar>
}
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	df 90       	pop	r13
     67e:	cf 90       	pop	r12
     680:	bf 90       	pop	r11
     682:	af 90       	pop	r10
     684:	9f 90       	pop	r9
     686:	8f 90       	pop	r8
     688:	08 95       	ret

0000068a <LCDInit>:
#include "LCDprint.h"

void LCDInit(void) {
	
	/* Lowpower Waveform, no frame interrupt, no blanking. LCD Enable*/
	LCDCRA = (1 << LCDAB) | (1 << LCDEN);
     68a:	80 ec       	ldi	r24, 0xC0	; 192
     68c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	/* 300 microseconds & voltage 3.35 V.*/
	LCDCCR = (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
     690:	8f e0       	ldi	r24, 0x0F	; 15
     692:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	
	/* 1/3 bias, 1/4 duty cycle, 25 segments.*/
	LCDCRB = (1 << LCDCS) | (1<< LCDMUX0) | (1<< LCDMUX1) | (1 <<LCDPM0) | (1 <<LCDPM1) | (1 <<LCDPM2);
     696:	87 eb       	ldi	r24, 0xB7	; 183
     698:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	
	/* N=16 & D=8 */
	LCDFRR = (1 << LCDCD0) | (1 << LCDCD1) | (1 << LCDCD2);
     69c:	87 e0       	ldi	r24, 0x07	; 7
     69e:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	
	printAt(00, 0);
     6a2:	40 e0       	ldi	r20, 0x00	; 0
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	cb 01       	movw	r24, r22
     6ac:	0e 94 0b 03 	call	0x616	; 0x616 <printAt>
	printAt(00, 2);
     6b0:	42 e0       	ldi	r20, 0x02	; 2
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	cb 01       	movw	r24, r22
     6ba:	0e 94 0b 03 	call	0x616	; 0x616 <printAt>
	printAt(00, 4);
     6be:	44 e0       	ldi	r20, 0x04	; 4
     6c0:	50 e0       	ldi	r21, 0x00	; 0
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	cb 01       	movw	r24, r22
     6c8:	0e 94 0b 03 	call	0x616	; 0x616 <printAt>
     6cc:	08 95       	ret

000006ce <main>:
#include "Controller.h"
#include "interrupt.h"
#include "LCDprint.h"

int main(void)
{
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	6d 97       	sbiw	r28, 0x1d	; 29
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	f8 94       	cli
     6dc:	de bf       	out	0x3e, r29	; 62
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	cd bf       	out	0x3d, r28	; 61
	initInterrupts();
     6e2:	0e 94 af 02 	call	0x55e	; 0x55e <initInterrupts>
	initUSART();
     6e6:	0e 94 b3 02 	call	0x566	; 0x566 <initUSART>
	LCDInit();
     6ea:	0e 94 45 03 	call	0x68a	; 0x68a <LCDInit>
	
	SignalSender s = initSignalSender();
     6ee:	1a 82       	std	Y+2, r1	; 0x02
     6f0:	19 82       	std	Y+1, r1	; 0x01
     6f2:	1c 82       	std	Y+4, r1	; 0x04
     6f4:	1b 82       	std	Y+3, r1	; 0x03
	GUI G = initGUI();
     6f6:	1e 82       	std	Y+6, r1	; 0x06
     6f8:	1d 82       	std	Y+5, r1	; 0x05
     6fa:	18 86       	std	Y+8, r1	; 0x08
     6fc:	1f 82       	std	Y+7, r1	; 0x07
     6fe:	19 86       	std	Y+9, r1	; 0x09
	Controller C = initController(&G, &s);
     700:	1b 86       	std	Y+11, r1	; 0x0b
     702:	1a 86       	std	Y+10, r1	; 0x0a
     704:	1d 86       	std	Y+13, r1	; 0x0d
     706:	1c 86       	std	Y+12, r1	; 0x0c
     708:	ce 01       	movw	r24, r28
     70a:	05 96       	adiw	r24, 0x05	; 5
     70c:	9f 87       	std	Y+15, r25	; 0x0f
     70e:	8e 87       	std	Y+14, r24	; 0x0e
     710:	04 97       	sbiw	r24, 0x04	; 4
     712:	99 8b       	std	Y+17, r25	; 0x11
     714:	88 8b       	std	Y+16, r24	; 0x10
     716:	1a 8a       	std	Y+18, r1	; 0x12
     718:	1b 8a       	std	Y+19, r1	; 0x13
     71a:	1c 8a       	std	Y+20, r1	; 0x14
     71c:	1d 8a       	std	Y+21, r1	; 0x15
     71e:	1e 8a       	std	Y+22, r1	; 0x16
     720:	1f 8a       	std	Y+23, r1	; 0x17
	Interrupt i = initInterrupt(&C);
     722:	19 8e       	std	Y+25, r1	; 0x19
     724:	18 8e       	std	Y+24, r1	; 0x18
     726:	1b 8e       	std	Y+27, r1	; 0x1b
     728:	1a 8e       	std	Y+26, r1	; 0x1a
     72a:	09 96       	adiw	r24, 0x09	; 9
     72c:	9d 8f       	std	Y+29, r25	; 0x1d
     72e:	8c 8f       	std	Y+28, r24	; 0x1c
	
	
	
	INSTALL(&i, signalInterrupt, IRQ_USART0_RX);
     730:	48 e0       	ldi	r20, 0x08	; 8
     732:	6e e8       	ldi	r22, 0x8E	; 142
     734:	72 e0       	ldi	r23, 0x02	; 2
     736:	0e 96       	adiw	r24, 0x0e	; 14
     738:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <install>
	TINYTIMBER(NULL, NULL, NULL);
     73c:	40 e0       	ldi	r20, 0x00	; 0
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <tinytimber>
}
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	6d 96       	adiw	r28, 0x1d	; 29
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <greenSouth>:


#include "SignalSender.h"

void greenSouth(SignalSender* this){
	UDR0 = SouthGreen;
     762:	86 e0       	ldi	r24, 0x06	; 6
     764:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     768:	08 95       	ret

0000076a <greenNorth>:
}

void greenNorth(SignalSender* this){
	UDR0 = NorthGreen;	
     76a:	89 e0       	ldi	r24, 0x09	; 9
     76c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     770:	08 95       	ret

00000772 <totalStop>:
}

void totalStop(SignalSender* this){
	UDR0 = TotalStop;
     772:	8a e0       	ldi	r24, 0x0A	; 10
     774:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     778:	08 95       	ret

0000077a <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	00 d0       	rcall	.+0      	; 0x780 <initialize+0x6>
     780:	00 d0       	rcall	.+0      	; 0x782 <initialize+0x8>
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	8f e0       	ldi	r24, 0x0F	; 15
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	2f ee       	ldi	r18, 0xEF	; 239
     78c:	32 e0       	ldi	r19, 0x02	; 2
     78e:	fc 01       	movw	r30, r24
     790:	70 97       	sbiw	r30, 0x10	; 16
     792:	91 83       	std	Z+1, r25	; 0x01
     794:	80 83       	st	Z, r24
     796:	40 96       	adiw	r24, 0x10	; 16
     798:	82 17       	cp	r24, r18
     79a:	93 07       	cpc	r25, r19
     79c:	c1 f7       	brne	.-16     	; 0x78e <initialize+0x14>
     79e:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <messages+0xe1>
     7a2:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <messages+0xe0>
     7a6:	ea e4       	ldi	r30, 0x4A	; 74
     7a8:	f1 e0       	ldi	r31, 0x01	; 1
     7aa:	87 e6       	ldi	r24, 0x67	; 103
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	91 83       	std	Z+1, r25	; 0x01
     7b0:	80 83       	st	Z, r24
     7b2:	84 e8       	ldi	r24, 0x84	; 132
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	96 8f       	std	Z+30, r25	; 0x1e
     7b8:	85 8f       	std	Z+29, r24	; 0x1d
     7ba:	a1 ea       	ldi	r26, 0xA1	; 161
     7bc:	b1 e0       	ldi	r27, 0x01	; 1
     7be:	b3 af       	std	Z+59, r27	; 0x3b
     7c0:	a2 af       	std	Z+58, r26	; 0x3a
     7c2:	1d 92       	st	X+, r1
     7c4:	1c 92       	st	X, r1
     7c6:	fa 83       	std	Y+2, r31	; 0x02
     7c8:	e9 83       	std	Y+1, r30	; 0x01
     7ca:	eb e4       	ldi	r30, 0x4B	; 75
     7cc:	f3 e0       	ldi	r31, 0x03	; 3
     7ce:	fc 83       	std	Y+4, r31	; 0x04
     7d0:	eb 83       	std	Y+3, r30	; 0x03
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	9a 81       	ldd	r25, Y+2	; 0x02
     7d6:	06 96       	adiw	r24, 0x06	; 6
     7d8:	0e 94 42 10 	call	0x2084	; 0x2084 <setjmp>
     7dc:	8b 81       	ldd	r24, Y+3	; 0x03
     7de:	9c 81       	ldd	r25, Y+4	; 0x04
     7e0:	e9 81       	ldd	r30, Y+1	; 0x01
     7e2:	fa 81       	ldd	r31, Y+2	; 0x02
     7e4:	97 8b       	std	Z+23, r25	; 0x17
     7e6:	86 8b       	std	Z+22, r24	; 0x16
     7e8:	91 8f       	std	Z+25, r25	; 0x19
     7ea:	80 8f       	std	Z+24, r24	; 0x18
     7ec:	8d e5       	ldi	r24, 0x5D	; 93
     7ee:	9f e0       	ldi	r25, 0x0F	; 15
     7f0:	94 8f       	std	Z+28, r25	; 0x1c
     7f2:	83 8f       	std	Z+27, r24	; 0x1b
     7f4:	15 82       	std	Z+5, r1	; 0x05
     7f6:	14 82       	std	Z+4, r1	; 0x04
     7f8:	7d 96       	adiw	r30, 0x1d	; 29
     7fa:	fa 83       	std	Y+2, r31	; 0x02
     7fc:	e9 83       	std	Y+1, r30	; 0x01
     7fe:	eb 81       	ldd	r30, Y+3	; 0x03
     800:	fc 81       	ldd	r31, Y+4	; 0x04
     802:	e0 5a       	subi	r30, 0xA0	; 160
     804:	ff 4f       	sbci	r31, 0xFF	; 255
     806:	fc 83       	std	Y+4, r31	; 0x04
     808:	eb 83       	std	Y+3, r30	; 0x03
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
     80e:	8e 5b       	subi	r24, 0xBE	; 190
     810:	91 40       	sbci	r25, 0x01	; 1
     812:	f9 f6       	brne	.-66     	; 0x7d2 <initialize+0x58>
     814:	e2 ee       	ldi	r30, 0xE2	; 226
     816:	f1 e0       	ldi	r31, 0x01	; 1
     818:	11 82       	std	Z+1, r1	; 0x01
     81a:	10 82       	st	Z, r1
     81c:	15 82       	std	Z+5, r1	; 0x05
     81e:	14 82       	std	Z+4, r1	; 0x04
     820:	13 82       	std	Z+3, r1	; 0x03
     822:	12 82       	std	Z+2, r1	; 0x02
     824:	e1 e6       	ldi	r30, 0x61	; 97
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 e8       	ldi	r24, 0x80	; 128
     82a:	80 83       	st	Z, r24
     82c:	10 82       	st	Z, r1
     82e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     832:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     836:	84 e0       	ldi	r24, 0x04	; 4
     838:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <dispatch>:
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	00 d0       	rcall	.+0      	; 0x856 <dispatch+0x6>
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
     85a:	9a 83       	std	Y+2, r25	; 0x02
     85c:	89 83       	std	Y+1, r24	; 0x01
     85e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     862:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     866:	06 96       	adiw	r24, 0x06	; 6
     868:	0e 94 42 10 	call	0x2084	; 0x2084 <setjmp>
     86c:	89 2b       	or	r24, r25
     86e:	59 f4       	brne	.+22     	; 0x886 <dispatch+0x36>
     870:	89 81       	ldd	r24, Y+1	; 0x01
     872:	9a 81       	ldd	r25, Y+2	; 0x02
     874:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     878:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	06 96       	adiw	r24, 0x06	; 6
     882:	0e 94 62 10 	call	0x20c4	; 0x20c4 <longjmp>
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <schedule>:
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <msgQ>
     89c:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <msgQ+0x1>
     8a0:	30 97       	sbiw	r30, 0x00	; 0
     8a2:	61 f1       	breq	.+88     	; 0x8fc <schedule+0x6c>
     8a4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     8a8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     8ac:	00 97       	sbiw	r24, 0x00	; 0
     8ae:	31 f1       	breq	.+76     	; 0x8fc <schedule+0x6c>
     8b0:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     8b4:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     8b8:	aa 81       	ldd	r26, Y+2	; 0x02
     8ba:	bb 81       	ldd	r27, Y+3	; 0x03
     8bc:	10 97       	sbiw	r26, 0x00	; 0
     8be:	79 f0       	breq	.+30     	; 0x8de <schedule+0x4e>
     8c0:	46 81       	ldd	r20, Z+6	; 0x06
     8c2:	57 81       	ldd	r21, Z+7	; 0x07
     8c4:	60 85       	ldd	r22, Z+8	; 0x08
     8c6:	71 85       	ldd	r23, Z+9	; 0x09
     8c8:	16 96       	adiw	r26, 0x06	; 6
     8ca:	0d 91       	ld	r16, X+
     8cc:	1d 91       	ld	r17, X+
     8ce:	2d 91       	ld	r18, X+
     8d0:	3c 91       	ld	r19, X
     8d2:	19 97       	sbiw	r26, 0x09	; 9
     8d4:	40 1b       	sub	r20, r16
     8d6:	51 0b       	sbc	r21, r17
     8d8:	62 0b       	sbc	r22, r18
     8da:	73 0b       	sbc	r23, r19
     8dc:	7a f4       	brpl	.+30     	; 0x8fc <schedule+0x6c>
     8de:	fc 01       	movw	r30, r24
     8e0:	20 81       	ld	r18, Z
     8e2:	31 81       	ldd	r19, Z+1	; 0x01
     8e4:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     8e8:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     8ec:	d1 83       	std	Z+1, r29	; 0x01
     8ee:	c0 83       	st	Z, r28
     8f0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     8f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     8f8:	0e 94 28 04 	call	0x850	; 0x850 <dispatch>
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	08 95       	ret

00000906 <__vector_1>:
     906:	1f 92       	push	r1
     908:	0f 92       	push	r0
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	0f 92       	push	r0
     90e:	11 24       	eor	r1, r1
     910:	2f 93       	push	r18
     912:	3f 93       	push	r19
     914:	4f 93       	push	r20
     916:	5f 93       	push	r21
     918:	6f 93       	push	r22
     91a:	7f 93       	push	r23
     91c:	8f 93       	push	r24
     91e:	9f 93       	push	r25
     920:	af 93       	push	r26
     922:	bf 93       	push	r27
     924:	ef 93       	push	r30
     926:	ff 93       	push	r31
     928:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     92c:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     930:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     934:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     938:	c9 01       	movw	r24, r18
     93a:	03 2e       	mov	r0, r19
     93c:	00 0c       	add	r0, r0
     93e:	aa 0b       	sbc	r26, r26
     940:	bb 0b       	sbc	r27, r27
     942:	dc 01       	movw	r26, r24
     944:	99 27       	eor	r25, r25
     946:	88 27       	eor	r24, r24
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	84 2b       	or	r24, r20
     94e:	95 2b       	or	r25, r21
     950:	a6 2b       	or	r26, r22
     952:	b7 2b       	or	r27, r23
     954:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     958:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     95c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     960:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     964:	b0 9b       	sbis	0x16, 0	; 22
     966:	1b c0       	rjmp	.+54     	; 0x99e <__vector_1+0x98>
     968:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     96c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     970:	c9 01       	movw	r24, r18
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	09 2e       	mov	r0, r25
     976:	00 0c       	add	r0, r0
     978:	aa 0b       	sbc	r26, r26
     97a:	bb 0b       	sbc	r27, r27
     97c:	dc 01       	movw	r26, r24
     97e:	99 27       	eor	r25, r25
     980:	88 27       	eor	r24, r24
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	84 2b       	or	r24, r20
     988:	95 2b       	or	r25, r21
     98a:	a6 2b       	or	r26, r22
     98c:	b7 2b       	or	r27, r23
     98e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     992:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     996:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     99a:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     99e:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable>
     9a2:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0x1>
     9a6:	30 97       	sbiw	r30, 0x00	; 0
     9a8:	39 f0       	breq	.+14     	; 0x9b8 <__vector_1+0xb2>
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable>
     9b2:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0x1>
     9b6:	09 95       	icall
     9b8:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
     9bc:	ff 91       	pop	r31
     9be:	ef 91       	pop	r30
     9c0:	bf 91       	pop	r27
     9c2:	af 91       	pop	r26
     9c4:	9f 91       	pop	r25
     9c6:	8f 91       	pop	r24
     9c8:	7f 91       	pop	r23
     9ca:	6f 91       	pop	r22
     9cc:	5f 91       	pop	r21
     9ce:	4f 91       	pop	r20
     9d0:	3f 91       	pop	r19
     9d2:	2f 91       	pop	r18
     9d4:	0f 90       	pop	r0
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	0f 90       	pop	r0
     9da:	1f 90       	pop	r1
     9dc:	18 95       	reti

000009de <__vector_2>:
     9de:	1f 92       	push	r1
     9e0:	0f 92       	push	r0
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	2f 93       	push	r18
     9ea:	3f 93       	push	r19
     9ec:	4f 93       	push	r20
     9ee:	5f 93       	push	r21
     9f0:	6f 93       	push	r22
     9f2:	7f 93       	push	r23
     9f4:	8f 93       	push	r24
     9f6:	9f 93       	push	r25
     9f8:	af 93       	push	r26
     9fa:	bf 93       	push	r27
     9fc:	ef 93       	push	r30
     9fe:	ff 93       	push	r31
     a00:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     a04:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     a08:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a0c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a10:	c9 01       	movw	r24, r18
     a12:	03 2e       	mov	r0, r19
     a14:	00 0c       	add	r0, r0
     a16:	aa 0b       	sbc	r26, r26
     a18:	bb 0b       	sbc	r27, r27
     a1a:	dc 01       	movw	r26, r24
     a1c:	99 27       	eor	r25, r25
     a1e:	88 27       	eor	r24, r24
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	84 2b       	or	r24, r20
     a26:	95 2b       	or	r25, r21
     a28:	a6 2b       	or	r26, r22
     a2a:	b7 2b       	or	r27, r23
     a2c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     a30:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     a34:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     a38:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     a3c:	b0 9b       	sbis	0x16, 0	; 22
     a3e:	1b c0       	rjmp	.+54     	; 0xa76 <__vector_2+0x98>
     a40:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a44:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a48:	c9 01       	movw	r24, r18
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	09 2e       	mov	r0, r25
     a4e:	00 0c       	add	r0, r0
     a50:	aa 0b       	sbc	r26, r26
     a52:	bb 0b       	sbc	r27, r27
     a54:	dc 01       	movw	r26, r24
     a56:	99 27       	eor	r25, r25
     a58:	88 27       	eor	r24, r24
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	84 2b       	or	r24, r20
     a60:	95 2b       	or	r25, r21
     a62:	a6 2b       	or	r26, r22
     a64:	b7 2b       	or	r27, r23
     a66:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     a6a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     a6e:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     a72:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     a76:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0x2>
     a7a:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0x3>
     a7e:	30 97       	sbiw	r30, 0x00	; 0
     a80:	39 f0       	breq	.+14     	; 0xa90 <__vector_2+0xb2>
     a82:	61 e0       	ldi	r22, 0x01	; 1
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0x2>
     a8a:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x3>
     a8e:	09 95       	icall
     a90:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
     a94:	ff 91       	pop	r31
     a96:	ef 91       	pop	r30
     a98:	bf 91       	pop	r27
     a9a:	af 91       	pop	r26
     a9c:	9f 91       	pop	r25
     a9e:	8f 91       	pop	r24
     aa0:	7f 91       	pop	r23
     aa2:	6f 91       	pop	r22
     aa4:	5f 91       	pop	r21
     aa6:	4f 91       	pop	r20
     aa8:	3f 91       	pop	r19
     aaa:	2f 91       	pop	r18
     aac:	0f 90       	pop	r0
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	0f 90       	pop	r0
     ab2:	1f 90       	pop	r1
     ab4:	18 95       	reti

00000ab6 <__vector_3>:
     ab6:	1f 92       	push	r1
     ab8:	0f 92       	push	r0
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	0f 92       	push	r0
     abe:	11 24       	eor	r1, r1
     ac0:	2f 93       	push	r18
     ac2:	3f 93       	push	r19
     ac4:	4f 93       	push	r20
     ac6:	5f 93       	push	r21
     ac8:	6f 93       	push	r22
     aca:	7f 93       	push	r23
     acc:	8f 93       	push	r24
     ace:	9f 93       	push	r25
     ad0:	af 93       	push	r26
     ad2:	bf 93       	push	r27
     ad4:	ef 93       	push	r30
     ad6:	ff 93       	push	r31
     ad8:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     adc:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     ae0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ae4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ae8:	c9 01       	movw	r24, r18
     aea:	03 2e       	mov	r0, r19
     aec:	00 0c       	add	r0, r0
     aee:	aa 0b       	sbc	r26, r26
     af0:	bb 0b       	sbc	r27, r27
     af2:	dc 01       	movw	r26, r24
     af4:	99 27       	eor	r25, r25
     af6:	88 27       	eor	r24, r24
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	84 2b       	or	r24, r20
     afe:	95 2b       	or	r25, r21
     b00:	a6 2b       	or	r26, r22
     b02:	b7 2b       	or	r27, r23
     b04:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     b08:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     b0c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     b10:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     b14:	b0 9b       	sbis	0x16, 0	; 22
     b16:	1b c0       	rjmp	.+54     	; 0xb4e <__vector_3+0x98>
     b18:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b1c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b20:	c9 01       	movw	r24, r18
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	09 2e       	mov	r0, r25
     b26:	00 0c       	add	r0, r0
     b28:	aa 0b       	sbc	r26, r26
     b2a:	bb 0b       	sbc	r27, r27
     b2c:	dc 01       	movw	r26, r24
     b2e:	99 27       	eor	r25, r25
     b30:	88 27       	eor	r24, r24
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	84 2b       	or	r24, r20
     b38:	95 2b       	or	r25, r21
     b3a:	a6 2b       	or	r26, r22
     b3c:	b7 2b       	or	r27, r23
     b3e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     b42:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     b46:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     b4a:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     b4e:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0x4>
     b52:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0x5>
     b56:	30 97       	sbiw	r30, 0x00	; 0
     b58:	39 f0       	breq	.+14     	; 0xb68 <__vector_3+0xb2>
     b5a:	62 e0       	ldi	r22, 0x02	; 2
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x4>
     b62:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x5>
     b66:	09 95       	icall
     b68:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
     b6c:	ff 91       	pop	r31
     b6e:	ef 91       	pop	r30
     b70:	bf 91       	pop	r27
     b72:	af 91       	pop	r26
     b74:	9f 91       	pop	r25
     b76:	8f 91       	pop	r24
     b78:	7f 91       	pop	r23
     b7a:	6f 91       	pop	r22
     b7c:	5f 91       	pop	r21
     b7e:	4f 91       	pop	r20
     b80:	3f 91       	pop	r19
     b82:	2f 91       	pop	r18
     b84:	0f 90       	pop	r0
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	0f 90       	pop	r0
     b8a:	1f 90       	pop	r1
     b8c:	18 95       	reti

00000b8e <__vector_4>:
     b8e:	1f 92       	push	r1
     b90:	0f 92       	push	r0
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	0f 92       	push	r0
     b96:	11 24       	eor	r1, r1
     b98:	2f 93       	push	r18
     b9a:	3f 93       	push	r19
     b9c:	4f 93       	push	r20
     b9e:	5f 93       	push	r21
     ba0:	6f 93       	push	r22
     ba2:	7f 93       	push	r23
     ba4:	8f 93       	push	r24
     ba6:	9f 93       	push	r25
     ba8:	af 93       	push	r26
     baa:	bf 93       	push	r27
     bac:	ef 93       	push	r30
     bae:	ff 93       	push	r31
     bb0:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     bb4:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     bb8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bbc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bc0:	c9 01       	movw	r24, r18
     bc2:	03 2e       	mov	r0, r19
     bc4:	00 0c       	add	r0, r0
     bc6:	aa 0b       	sbc	r26, r26
     bc8:	bb 0b       	sbc	r27, r27
     bca:	dc 01       	movw	r26, r24
     bcc:	99 27       	eor	r25, r25
     bce:	88 27       	eor	r24, r24
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	84 2b       	or	r24, r20
     bd6:	95 2b       	or	r25, r21
     bd8:	a6 2b       	or	r26, r22
     bda:	b7 2b       	or	r27, r23
     bdc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     be0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     be4:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     be8:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     bec:	b0 9b       	sbis	0x16, 0	; 22
     bee:	1b c0       	rjmp	.+54     	; 0xc26 <__vector_4+0x98>
     bf0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bf4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bf8:	c9 01       	movw	r24, r18
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	09 2e       	mov	r0, r25
     bfe:	00 0c       	add	r0, r0
     c00:	aa 0b       	sbc	r26, r26
     c02:	bb 0b       	sbc	r27, r27
     c04:	dc 01       	movw	r26, r24
     c06:	99 27       	eor	r25, r25
     c08:	88 27       	eor	r24, r24
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	84 2b       	or	r24, r20
     c10:	95 2b       	or	r25, r21
     c12:	a6 2b       	or	r26, r22
     c14:	b7 2b       	or	r27, r23
     c16:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     c1a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     c1e:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     c22:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     c26:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x6>
     c2a:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x7>
     c2e:	30 97       	sbiw	r30, 0x00	; 0
     c30:	39 f0       	breq	.+14     	; 0xc40 <__vector_4+0xb2>
     c32:	63 e0       	ldi	r22, 0x03	; 3
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x6>
     c3a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x7>
     c3e:	09 95       	icall
     c40:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
     c44:	ff 91       	pop	r31
     c46:	ef 91       	pop	r30
     c48:	bf 91       	pop	r27
     c4a:	af 91       	pop	r26
     c4c:	9f 91       	pop	r25
     c4e:	8f 91       	pop	r24
     c50:	7f 91       	pop	r23
     c52:	6f 91       	pop	r22
     c54:	5f 91       	pop	r21
     c56:	4f 91       	pop	r20
     c58:	3f 91       	pop	r19
     c5a:	2f 91       	pop	r18
     c5c:	0f 90       	pop	r0
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	0f 90       	pop	r0
     c62:	1f 90       	pop	r1
     c64:	18 95       	reti

00000c66 <__vector_5>:
     c66:	1f 92       	push	r1
     c68:	0f 92       	push	r0
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	0f 92       	push	r0
     c6e:	11 24       	eor	r1, r1
     c70:	2f 93       	push	r18
     c72:	3f 93       	push	r19
     c74:	4f 93       	push	r20
     c76:	5f 93       	push	r21
     c78:	6f 93       	push	r22
     c7a:	7f 93       	push	r23
     c7c:	8f 93       	push	r24
     c7e:	9f 93       	push	r25
     c80:	af 93       	push	r26
     c82:	bf 93       	push	r27
     c84:	ef 93       	push	r30
     c86:	ff 93       	push	r31
     c88:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     c8c:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     c90:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c94:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c98:	c9 01       	movw	r24, r18
     c9a:	03 2e       	mov	r0, r19
     c9c:	00 0c       	add	r0, r0
     c9e:	aa 0b       	sbc	r26, r26
     ca0:	bb 0b       	sbc	r27, r27
     ca2:	dc 01       	movw	r26, r24
     ca4:	99 27       	eor	r25, r25
     ca6:	88 27       	eor	r24, r24
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	84 2b       	or	r24, r20
     cae:	95 2b       	or	r25, r21
     cb0:	a6 2b       	or	r26, r22
     cb2:	b7 2b       	or	r27, r23
     cb4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     cb8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     cbc:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     cc0:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     cc4:	b0 9b       	sbis	0x16, 0	; 22
     cc6:	1b c0       	rjmp	.+54     	; 0xcfe <__vector_5+0x98>
     cc8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ccc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cd0:	c9 01       	movw	r24, r18
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	09 2e       	mov	r0, r25
     cd6:	00 0c       	add	r0, r0
     cd8:	aa 0b       	sbc	r26, r26
     cda:	bb 0b       	sbc	r27, r27
     cdc:	dc 01       	movw	r26, r24
     cde:	99 27       	eor	r25, r25
     ce0:	88 27       	eor	r24, r24
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	84 2b       	or	r24, r20
     ce8:	95 2b       	or	r25, r21
     cea:	a6 2b       	or	r26, r22
     cec:	b7 2b       	or	r27, r23
     cee:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     cf2:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     cf6:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     cfa:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     cfe:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x8>
     d02:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x9>
     d06:	30 97       	sbiw	r30, 0x00	; 0
     d08:	39 f0       	breq	.+14     	; 0xd18 <__vector_5+0xb2>
     d0a:	64 e0       	ldi	r22, 0x04	; 4
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x8>
     d12:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x9>
     d16:	09 95       	icall
     d18:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
     d1c:	ff 91       	pop	r31
     d1e:	ef 91       	pop	r30
     d20:	bf 91       	pop	r27
     d22:	af 91       	pop	r26
     d24:	9f 91       	pop	r25
     d26:	8f 91       	pop	r24
     d28:	7f 91       	pop	r23
     d2a:	6f 91       	pop	r22
     d2c:	5f 91       	pop	r21
     d2e:	4f 91       	pop	r20
     d30:	3f 91       	pop	r19
     d32:	2f 91       	pop	r18
     d34:	0f 90       	pop	r0
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	0f 90       	pop	r0
     d3a:	1f 90       	pop	r1
     d3c:	18 95       	reti

00000d3e <__vector_10>:
     d3e:	1f 92       	push	r1
     d40:	0f 92       	push	r0
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	0f 92       	push	r0
     d46:	11 24       	eor	r1, r1
     d48:	2f 93       	push	r18
     d4a:	3f 93       	push	r19
     d4c:	4f 93       	push	r20
     d4e:	5f 93       	push	r21
     d50:	6f 93       	push	r22
     d52:	7f 93       	push	r23
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	af 93       	push	r26
     d5a:	bf 93       	push	r27
     d5c:	ef 93       	push	r30
     d5e:	ff 93       	push	r31
     d60:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     d64:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     d68:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d6c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d70:	c9 01       	movw	r24, r18
     d72:	03 2e       	mov	r0, r19
     d74:	00 0c       	add	r0, r0
     d76:	aa 0b       	sbc	r26, r26
     d78:	bb 0b       	sbc	r27, r27
     d7a:	dc 01       	movw	r26, r24
     d7c:	99 27       	eor	r25, r25
     d7e:	88 27       	eor	r24, r24
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	84 2b       	or	r24, r20
     d86:	95 2b       	or	r25, r21
     d88:	a6 2b       	or	r26, r22
     d8a:	b7 2b       	or	r27, r23
     d8c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     d90:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     d94:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     d98:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     d9c:	b0 9b       	sbis	0x16, 0	; 22
     d9e:	1b c0       	rjmp	.+54     	; 0xdd6 <__vector_10+0x98>
     da0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     da4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     da8:	c9 01       	movw	r24, r18
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	09 2e       	mov	r0, r25
     dae:	00 0c       	add	r0, r0
     db0:	aa 0b       	sbc	r26, r26
     db2:	bb 0b       	sbc	r27, r27
     db4:	dc 01       	movw	r26, r24
     db6:	99 27       	eor	r25, r25
     db8:	88 27       	eor	r24, r24
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	84 2b       	or	r24, r20
     dc0:	95 2b       	or	r25, r21
     dc2:	a6 2b       	or	r26, r22
     dc4:	b7 2b       	or	r27, r23
     dc6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     dca:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     dce:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     dd2:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     dd6:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0xa>
     dda:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0xb>
     dde:	30 97       	sbiw	r30, 0x00	; 0
     de0:	39 f0       	breq	.+14     	; 0xdf0 <__vector_10+0xb2>
     de2:	65 e0       	ldi	r22, 0x05	; 5
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0xa>
     dea:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0xb>
     dee:	09 95       	icall
     df0:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
     df4:	ff 91       	pop	r31
     df6:	ef 91       	pop	r30
     df8:	bf 91       	pop	r27
     dfa:	af 91       	pop	r26
     dfc:	9f 91       	pop	r25
     dfe:	8f 91       	pop	r24
     e00:	7f 91       	pop	r23
     e02:	6f 91       	pop	r22
     e04:	5f 91       	pop	r21
     e06:	4f 91       	pop	r20
     e08:	3f 91       	pop	r19
     e0a:	2f 91       	pop	r18
     e0c:	0f 90       	pop	r0
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	0f 90       	pop	r0
     e12:	1f 90       	pop	r1
     e14:	18 95       	reti

00000e16 <__vector_11>:
     e16:	1f 92       	push	r1
     e18:	0f 92       	push	r0
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	0f 92       	push	r0
     e1e:	11 24       	eor	r1, r1
     e20:	2f 93       	push	r18
     e22:	3f 93       	push	r19
     e24:	4f 93       	push	r20
     e26:	5f 93       	push	r21
     e28:	6f 93       	push	r22
     e2a:	7f 93       	push	r23
     e2c:	8f 93       	push	r24
     e2e:	9f 93       	push	r25
     e30:	af 93       	push	r26
     e32:	bf 93       	push	r27
     e34:	ef 93       	push	r30
     e36:	ff 93       	push	r31
     e38:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     e3c:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     e40:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e44:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e48:	c9 01       	movw	r24, r18
     e4a:	03 2e       	mov	r0, r19
     e4c:	00 0c       	add	r0, r0
     e4e:	aa 0b       	sbc	r26, r26
     e50:	bb 0b       	sbc	r27, r27
     e52:	dc 01       	movw	r26, r24
     e54:	99 27       	eor	r25, r25
     e56:	88 27       	eor	r24, r24
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	84 2b       	or	r24, r20
     e5e:	95 2b       	or	r25, r21
     e60:	a6 2b       	or	r26, r22
     e62:	b7 2b       	or	r27, r23
     e64:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     e68:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     e6c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     e70:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     e74:	b0 9b       	sbis	0x16, 0	; 22
     e76:	1b c0       	rjmp	.+54     	; 0xeae <__vector_11+0x98>
     e78:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e7c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e80:	c9 01       	movw	r24, r18
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	09 2e       	mov	r0, r25
     e86:	00 0c       	add	r0, r0
     e88:	aa 0b       	sbc	r26, r26
     e8a:	bb 0b       	sbc	r27, r27
     e8c:	dc 01       	movw	r26, r24
     e8e:	99 27       	eor	r25, r25
     e90:	88 27       	eor	r24, r24
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	84 2b       	or	r24, r20
     e98:	95 2b       	or	r25, r21
     e9a:	a6 2b       	or	r26, r22
     e9c:	b7 2b       	or	r27, r23
     e9e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     ea2:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     ea6:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     eaa:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     eae:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0xc>
     eb2:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0xd>
     eb6:	30 97       	sbiw	r30, 0x00	; 0
     eb8:	39 f0       	breq	.+14     	; 0xec8 <__vector_11+0xb2>
     eba:	66 e0       	ldi	r22, 0x06	; 6
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0xc>
     ec2:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0xd>
     ec6:	09 95       	icall
     ec8:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
     ecc:	ff 91       	pop	r31
     ece:	ef 91       	pop	r30
     ed0:	bf 91       	pop	r27
     ed2:	af 91       	pop	r26
     ed4:	9f 91       	pop	r25
     ed6:	8f 91       	pop	r24
     ed8:	7f 91       	pop	r23
     eda:	6f 91       	pop	r22
     edc:	5f 91       	pop	r21
     ede:	4f 91       	pop	r20
     ee0:	3f 91       	pop	r19
     ee2:	2f 91       	pop	r18
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	0f 90       	pop	r0
     eea:	1f 90       	pop	r1
     eec:	18 95       	reti

00000eee <__vector_12>:
     eee:	1f 92       	push	r1
     ef0:	0f 92       	push	r0
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	0f 92       	push	r0
     ef6:	11 24       	eor	r1, r1
     ef8:	2f 93       	push	r18
     efa:	3f 93       	push	r19
     efc:	4f 93       	push	r20
     efe:	5f 93       	push	r21
     f00:	6f 93       	push	r22
     f02:	7f 93       	push	r23
     f04:	8f 93       	push	r24
     f06:	9f 93       	push	r25
     f08:	af 93       	push	r26
     f0a:	bf 93       	push	r27
     f0c:	ef 93       	push	r30
     f0e:	ff 93       	push	r31
     f10:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     f14:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     f18:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f1c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f20:	c9 01       	movw	r24, r18
     f22:	03 2e       	mov	r0, r19
     f24:	00 0c       	add	r0, r0
     f26:	aa 0b       	sbc	r26, r26
     f28:	bb 0b       	sbc	r27, r27
     f2a:	dc 01       	movw	r26, r24
     f2c:	99 27       	eor	r25, r25
     f2e:	88 27       	eor	r24, r24
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	84 2b       	or	r24, r20
     f36:	95 2b       	or	r25, r21
     f38:	a6 2b       	or	r26, r22
     f3a:	b7 2b       	or	r27, r23
     f3c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     f40:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     f44:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     f48:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     f4c:	b0 9b       	sbis	0x16, 0	; 22
     f4e:	1b c0       	rjmp	.+54     	; 0xf86 <__vector_12+0x98>
     f50:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f54:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f58:	c9 01       	movw	r24, r18
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	09 2e       	mov	r0, r25
     f5e:	00 0c       	add	r0, r0
     f60:	aa 0b       	sbc	r26, r26
     f62:	bb 0b       	sbc	r27, r27
     f64:	dc 01       	movw	r26, r24
     f66:	99 27       	eor	r25, r25
     f68:	88 27       	eor	r24, r24
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	84 2b       	or	r24, r20
     f70:	95 2b       	or	r25, r21
     f72:	a6 2b       	or	r26, r22
     f74:	b7 2b       	or	r27, r23
     f76:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     f7a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     f7e:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     f82:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     f86:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable+0xe>
     f8a:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0xf>
     f8e:	30 97       	sbiw	r30, 0x00	; 0
     f90:	39 f0       	breq	.+14     	; 0xfa0 <__vector_12+0xb2>
     f92:	67 e0       	ldi	r22, 0x07	; 7
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0xe>
     f9a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0xf>
     f9e:	09 95       	icall
     fa0:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
     fa4:	ff 91       	pop	r31
     fa6:	ef 91       	pop	r30
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	7f 91       	pop	r23
     fb2:	6f 91       	pop	r22
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <__vector_13>:
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	2f 93       	push	r18
     fd2:	3f 93       	push	r19
     fd4:	4f 93       	push	r20
     fd6:	5f 93       	push	r21
     fd8:	6f 93       	push	r22
     fda:	7f 93       	push	r23
     fdc:	8f 93       	push	r24
     fde:	9f 93       	push	r25
     fe0:	af 93       	push	r26
     fe2:	bf 93       	push	r27
     fe4:	ef 93       	push	r30
     fe6:	ff 93       	push	r31
     fe8:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     fec:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     ff0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ff4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ff8:	c9 01       	movw	r24, r18
     ffa:	03 2e       	mov	r0, r19
     ffc:	00 0c       	add	r0, r0
     ffe:	aa 0b       	sbc	r26, r26
    1000:	bb 0b       	sbc	r27, r27
    1002:	dc 01       	movw	r26, r24
    1004:	99 27       	eor	r25, r25
    1006:	88 27       	eor	r24, r24
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	84 2b       	or	r24, r20
    100e:	95 2b       	or	r25, r21
    1010:	a6 2b       	or	r26, r22
    1012:	b7 2b       	or	r27, r23
    1014:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1018:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    101c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1020:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1024:	b0 9b       	sbis	0x16, 0	; 22
    1026:	1b c0       	rjmp	.+54     	; 0x105e <__vector_13+0x98>
    1028:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    102c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1030:	c9 01       	movw	r24, r18
    1032:	01 96       	adiw	r24, 0x01	; 1
    1034:	09 2e       	mov	r0, r25
    1036:	00 0c       	add	r0, r0
    1038:	aa 0b       	sbc	r26, r26
    103a:	bb 0b       	sbc	r27, r27
    103c:	dc 01       	movw	r26, r24
    103e:	99 27       	eor	r25, r25
    1040:	88 27       	eor	r24, r24
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	84 2b       	or	r24, r20
    1048:	95 2b       	or	r25, r21
    104a:	a6 2b       	or	r26, r22
    104c:	b7 2b       	or	r27, r23
    104e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1052:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1056:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    105a:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    105e:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <mtable+0x10>
    1062:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <mtable+0x11>
    1066:	30 97       	sbiw	r30, 0x00	; 0
    1068:	39 f0       	breq	.+14     	; 0x1078 <__vector_13+0xb2>
    106a:	68 e0       	ldi	r22, 0x08	; 8
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <otable+0x10>
    1072:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <otable+0x11>
    1076:	09 95       	icall
    1078:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
    107c:	ff 91       	pop	r31
    107e:	ef 91       	pop	r30
    1080:	bf 91       	pop	r27
    1082:	af 91       	pop	r26
    1084:	9f 91       	pop	r25
    1086:	8f 91       	pop	r24
    1088:	7f 91       	pop	r23
    108a:	6f 91       	pop	r22
    108c:	5f 91       	pop	r21
    108e:	4f 91       	pop	r20
    1090:	3f 91       	pop	r19
    1092:	2f 91       	pop	r18
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <__vector_14>:
    109e:	1f 92       	push	r1
    10a0:	0f 92       	push	r0
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	0f 92       	push	r0
    10a6:	11 24       	eor	r1, r1
    10a8:	2f 93       	push	r18
    10aa:	3f 93       	push	r19
    10ac:	4f 93       	push	r20
    10ae:	5f 93       	push	r21
    10b0:	6f 93       	push	r22
    10b2:	7f 93       	push	r23
    10b4:	8f 93       	push	r24
    10b6:	9f 93       	push	r25
    10b8:	af 93       	push	r26
    10ba:	bf 93       	push	r27
    10bc:	ef 93       	push	r30
    10be:	ff 93       	push	r31
    10c0:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    10c4:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    10c8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10cc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10d0:	c9 01       	movw	r24, r18
    10d2:	03 2e       	mov	r0, r19
    10d4:	00 0c       	add	r0, r0
    10d6:	aa 0b       	sbc	r26, r26
    10d8:	bb 0b       	sbc	r27, r27
    10da:	dc 01       	movw	r26, r24
    10dc:	99 27       	eor	r25, r25
    10de:	88 27       	eor	r24, r24
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	84 2b       	or	r24, r20
    10e6:	95 2b       	or	r25, r21
    10e8:	a6 2b       	or	r26, r22
    10ea:	b7 2b       	or	r27, r23
    10ec:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    10f0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    10f4:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    10f8:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    10fc:	b0 9b       	sbis	0x16, 0	; 22
    10fe:	1b c0       	rjmp	.+54     	; 0x1136 <__vector_14+0x98>
    1100:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1104:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1108:	c9 01       	movw	r24, r18
    110a:	01 96       	adiw	r24, 0x01	; 1
    110c:	09 2e       	mov	r0, r25
    110e:	00 0c       	add	r0, r0
    1110:	aa 0b       	sbc	r26, r26
    1112:	bb 0b       	sbc	r27, r27
    1114:	dc 01       	movw	r26, r24
    1116:	99 27       	eor	r25, r25
    1118:	88 27       	eor	r24, r24
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	84 2b       	or	r24, r20
    1120:	95 2b       	or	r25, r21
    1122:	a6 2b       	or	r26, r22
    1124:	b7 2b       	or	r27, r23
    1126:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    112a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    112e:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1132:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1136:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable+0x12>
    113a:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x13>
    113e:	30 97       	sbiw	r30, 0x00	; 0
    1140:	39 f0       	breq	.+14     	; 0x1150 <__vector_14+0xb2>
    1142:	69 e0       	ldi	r22, 0x09	; 9
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable+0x12>
    114a:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x13>
    114e:	09 95       	icall
    1150:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
    1154:	ff 91       	pop	r31
    1156:	ef 91       	pop	r30
    1158:	bf 91       	pop	r27
    115a:	af 91       	pop	r26
    115c:	9f 91       	pop	r25
    115e:	8f 91       	pop	r24
    1160:	7f 91       	pop	r23
    1162:	6f 91       	pop	r22
    1164:	5f 91       	pop	r21
    1166:	4f 91       	pop	r20
    1168:	3f 91       	pop	r19
    116a:	2f 91       	pop	r18
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	0f 90       	pop	r0
    1172:	1f 90       	pop	r1
    1174:	18 95       	reti

00001176 <__vector_15>:
    1176:	1f 92       	push	r1
    1178:	0f 92       	push	r0
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	0f 92       	push	r0
    117e:	11 24       	eor	r1, r1
    1180:	2f 93       	push	r18
    1182:	3f 93       	push	r19
    1184:	4f 93       	push	r20
    1186:	5f 93       	push	r21
    1188:	6f 93       	push	r22
    118a:	7f 93       	push	r23
    118c:	8f 93       	push	r24
    118e:	9f 93       	push	r25
    1190:	af 93       	push	r26
    1192:	bf 93       	push	r27
    1194:	ef 93       	push	r30
    1196:	ff 93       	push	r31
    1198:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    119c:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    11a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11a8:	c9 01       	movw	r24, r18
    11aa:	03 2e       	mov	r0, r19
    11ac:	00 0c       	add	r0, r0
    11ae:	aa 0b       	sbc	r26, r26
    11b0:	bb 0b       	sbc	r27, r27
    11b2:	dc 01       	movw	r26, r24
    11b4:	99 27       	eor	r25, r25
    11b6:	88 27       	eor	r24, r24
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	84 2b       	or	r24, r20
    11be:	95 2b       	or	r25, r21
    11c0:	a6 2b       	or	r26, r22
    11c2:	b7 2b       	or	r27, r23
    11c4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    11c8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    11cc:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    11d0:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    11d4:	b0 9b       	sbis	0x16, 0	; 22
    11d6:	1b c0       	rjmp	.+54     	; 0x120e <__vector_15+0x98>
    11d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11e0:	c9 01       	movw	r24, r18
    11e2:	01 96       	adiw	r24, 0x01	; 1
    11e4:	09 2e       	mov	r0, r25
    11e6:	00 0c       	add	r0, r0
    11e8:	aa 0b       	sbc	r26, r26
    11ea:	bb 0b       	sbc	r27, r27
    11ec:	dc 01       	movw	r26, r24
    11ee:	99 27       	eor	r25, r25
    11f0:	88 27       	eor	r24, r24
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	84 2b       	or	r24, r20
    11f8:	95 2b       	or	r25, r21
    11fa:	a6 2b       	or	r26, r22
    11fc:	b7 2b       	or	r27, r23
    11fe:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1202:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1206:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    120a:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    120e:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable+0x14>
    1212:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x15>
    1216:	30 97       	sbiw	r30, 0x00	; 0
    1218:	39 f0       	breq	.+14     	; 0x1228 <__vector_15+0xb2>
    121a:	6a e0       	ldi	r22, 0x0A	; 10
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x14>
    1222:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x15>
    1226:	09 95       	icall
    1228:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
    122c:	ff 91       	pop	r31
    122e:	ef 91       	pop	r30
    1230:	bf 91       	pop	r27
    1232:	af 91       	pop	r26
    1234:	9f 91       	pop	r25
    1236:	8f 91       	pop	r24
    1238:	7f 91       	pop	r23
    123a:	6f 91       	pop	r22
    123c:	5f 91       	pop	r21
    123e:	4f 91       	pop	r20
    1240:	3f 91       	pop	r19
    1242:	2f 91       	pop	r18
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	0f 90       	pop	r0
    124a:	1f 90       	pop	r1
    124c:	18 95       	reti

0000124e <__vector_16>:
    124e:	1f 92       	push	r1
    1250:	0f 92       	push	r0
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	0f 92       	push	r0
    1256:	11 24       	eor	r1, r1
    1258:	2f 93       	push	r18
    125a:	3f 93       	push	r19
    125c:	4f 93       	push	r20
    125e:	5f 93       	push	r21
    1260:	6f 93       	push	r22
    1262:	7f 93       	push	r23
    1264:	8f 93       	push	r24
    1266:	9f 93       	push	r25
    1268:	af 93       	push	r26
    126a:	bf 93       	push	r27
    126c:	ef 93       	push	r30
    126e:	ff 93       	push	r31
    1270:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1274:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1278:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    127c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1280:	c9 01       	movw	r24, r18
    1282:	03 2e       	mov	r0, r19
    1284:	00 0c       	add	r0, r0
    1286:	aa 0b       	sbc	r26, r26
    1288:	bb 0b       	sbc	r27, r27
    128a:	dc 01       	movw	r26, r24
    128c:	99 27       	eor	r25, r25
    128e:	88 27       	eor	r24, r24
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	84 2b       	or	r24, r20
    1296:	95 2b       	or	r25, r21
    1298:	a6 2b       	or	r26, r22
    129a:	b7 2b       	or	r27, r23
    129c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    12a0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    12a4:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    12a8:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    12ac:	b0 9b       	sbis	0x16, 0	; 22
    12ae:	1b c0       	rjmp	.+54     	; 0x12e6 <__vector_16+0x98>
    12b0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12b4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12b8:	c9 01       	movw	r24, r18
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	09 2e       	mov	r0, r25
    12be:	00 0c       	add	r0, r0
    12c0:	aa 0b       	sbc	r26, r26
    12c2:	bb 0b       	sbc	r27, r27
    12c4:	dc 01       	movw	r26, r24
    12c6:	99 27       	eor	r25, r25
    12c8:	88 27       	eor	r24, r24
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	84 2b       	or	r24, r20
    12d0:	95 2b       	or	r25, r21
    12d2:	a6 2b       	or	r26, r22
    12d4:	b7 2b       	or	r27, r23
    12d6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    12da:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    12de:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    12e2:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    12e6:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable+0x16>
    12ea:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x17>
    12ee:	30 97       	sbiw	r30, 0x00	; 0
    12f0:	39 f0       	breq	.+14     	; 0x1300 <__vector_16+0xb2>
    12f2:	6b e0       	ldi	r22, 0x0B	; 11
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x16>
    12fa:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x17>
    12fe:	09 95       	icall
    1300:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
    1304:	ff 91       	pop	r31
    1306:	ef 91       	pop	r30
    1308:	bf 91       	pop	r27
    130a:	af 91       	pop	r26
    130c:	9f 91       	pop	r25
    130e:	8f 91       	pop	r24
    1310:	7f 91       	pop	r23
    1312:	6f 91       	pop	r22
    1314:	5f 91       	pop	r21
    1316:	4f 91       	pop	r20
    1318:	3f 91       	pop	r19
    131a:	2f 91       	pop	r18
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	0f 90       	pop	r0
    1322:	1f 90       	pop	r1
    1324:	18 95       	reti

00001326 <__vector_17>:
    1326:	1f 92       	push	r1
    1328:	0f 92       	push	r0
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	0f 92       	push	r0
    132e:	11 24       	eor	r1, r1
    1330:	2f 93       	push	r18
    1332:	3f 93       	push	r19
    1334:	4f 93       	push	r20
    1336:	5f 93       	push	r21
    1338:	6f 93       	push	r22
    133a:	7f 93       	push	r23
    133c:	8f 93       	push	r24
    133e:	9f 93       	push	r25
    1340:	af 93       	push	r26
    1342:	bf 93       	push	r27
    1344:	ef 93       	push	r30
    1346:	ff 93       	push	r31
    1348:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    134c:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1350:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1354:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1358:	c9 01       	movw	r24, r18
    135a:	03 2e       	mov	r0, r19
    135c:	00 0c       	add	r0, r0
    135e:	aa 0b       	sbc	r26, r26
    1360:	bb 0b       	sbc	r27, r27
    1362:	dc 01       	movw	r26, r24
    1364:	99 27       	eor	r25, r25
    1366:	88 27       	eor	r24, r24
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	84 2b       	or	r24, r20
    136e:	95 2b       	or	r25, r21
    1370:	a6 2b       	or	r26, r22
    1372:	b7 2b       	or	r27, r23
    1374:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1378:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    137c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1380:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1384:	b0 9b       	sbis	0x16, 0	; 22
    1386:	1b c0       	rjmp	.+54     	; 0x13be <__vector_17+0x98>
    1388:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    138c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1390:	c9 01       	movw	r24, r18
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	09 2e       	mov	r0, r25
    1396:	00 0c       	add	r0, r0
    1398:	aa 0b       	sbc	r26, r26
    139a:	bb 0b       	sbc	r27, r27
    139c:	dc 01       	movw	r26, r24
    139e:	99 27       	eor	r25, r25
    13a0:	88 27       	eor	r24, r24
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	84 2b       	or	r24, r20
    13a8:	95 2b       	or	r25, r21
    13aa:	a6 2b       	or	r26, r22
    13ac:	b7 2b       	or	r27, r23
    13ae:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    13b2:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    13b6:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    13ba:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    13be:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0x18>
    13c2:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x19>
    13c6:	30 97       	sbiw	r30, 0x00	; 0
    13c8:	39 f0       	breq	.+14     	; 0x13d8 <__vector_17+0xb2>
    13ca:	6c e0       	ldi	r22, 0x0C	; 12
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x18>
    13d2:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x19>
    13d6:	09 95       	icall
    13d8:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
    13dc:	ff 91       	pop	r31
    13de:	ef 91       	pop	r30
    13e0:	bf 91       	pop	r27
    13e2:	af 91       	pop	r26
    13e4:	9f 91       	pop	r25
    13e6:	8f 91       	pop	r24
    13e8:	7f 91       	pop	r23
    13ea:	6f 91       	pop	r22
    13ec:	5f 91       	pop	r21
    13ee:	4f 91       	pop	r20
    13f0:	3f 91       	pop	r19
    13f2:	2f 91       	pop	r18
    13f4:	0f 90       	pop	r0
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	0f 90       	pop	r0
    13fa:	1f 90       	pop	r1
    13fc:	18 95       	reti

000013fe <__vector_18>:
    13fe:	1f 92       	push	r1
    1400:	0f 92       	push	r0
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	0f 92       	push	r0
    1406:	11 24       	eor	r1, r1
    1408:	2f 93       	push	r18
    140a:	3f 93       	push	r19
    140c:	4f 93       	push	r20
    140e:	5f 93       	push	r21
    1410:	6f 93       	push	r22
    1412:	7f 93       	push	r23
    1414:	8f 93       	push	r24
    1416:	9f 93       	push	r25
    1418:	af 93       	push	r26
    141a:	bf 93       	push	r27
    141c:	ef 93       	push	r30
    141e:	ff 93       	push	r31
    1420:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1424:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1428:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    142c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1430:	c9 01       	movw	r24, r18
    1432:	03 2e       	mov	r0, r19
    1434:	00 0c       	add	r0, r0
    1436:	aa 0b       	sbc	r26, r26
    1438:	bb 0b       	sbc	r27, r27
    143a:	dc 01       	movw	r26, r24
    143c:	99 27       	eor	r25, r25
    143e:	88 27       	eor	r24, r24
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	84 2b       	or	r24, r20
    1446:	95 2b       	or	r25, r21
    1448:	a6 2b       	or	r26, r22
    144a:	b7 2b       	or	r27, r23
    144c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1450:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1454:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1458:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    145c:	b0 9b       	sbis	0x16, 0	; 22
    145e:	1b c0       	rjmp	.+54     	; 0x1496 <__vector_18+0x98>
    1460:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1464:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1468:	c9 01       	movw	r24, r18
    146a:	01 96       	adiw	r24, 0x01	; 1
    146c:	09 2e       	mov	r0, r25
    146e:	00 0c       	add	r0, r0
    1470:	aa 0b       	sbc	r26, r26
    1472:	bb 0b       	sbc	r27, r27
    1474:	dc 01       	movw	r26, r24
    1476:	99 27       	eor	r25, r25
    1478:	88 27       	eor	r24, r24
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	70 e0       	ldi	r23, 0x00	; 0
    147e:	84 2b       	or	r24, r20
    1480:	95 2b       	or	r25, r21
    1482:	a6 2b       	or	r26, r22
    1484:	b7 2b       	or	r27, r23
    1486:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    148a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    148e:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1492:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1496:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0x1a>
    149a:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x1b>
    149e:	30 97       	sbiw	r30, 0x00	; 0
    14a0:	39 f0       	breq	.+14     	; 0x14b0 <__vector_18+0xb2>
    14a2:	6d e0       	ldi	r22, 0x0D	; 13
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x1a>
    14aa:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x1b>
    14ae:	09 95       	icall
    14b0:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
    14b4:	ff 91       	pop	r31
    14b6:	ef 91       	pop	r30
    14b8:	bf 91       	pop	r27
    14ba:	af 91       	pop	r26
    14bc:	9f 91       	pop	r25
    14be:	8f 91       	pop	r24
    14c0:	7f 91       	pop	r23
    14c2:	6f 91       	pop	r22
    14c4:	5f 91       	pop	r21
    14c6:	4f 91       	pop	r20
    14c8:	3f 91       	pop	r19
    14ca:	2f 91       	pop	r18
    14cc:	0f 90       	pop	r0
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	0f 90       	pop	r0
    14d2:	1f 90       	pop	r1
    14d4:	18 95       	reti

000014d6 <__vector_19>:
    14d6:	1f 92       	push	r1
    14d8:	0f 92       	push	r0
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	0f 92       	push	r0
    14de:	11 24       	eor	r1, r1
    14e0:	2f 93       	push	r18
    14e2:	3f 93       	push	r19
    14e4:	4f 93       	push	r20
    14e6:	5f 93       	push	r21
    14e8:	6f 93       	push	r22
    14ea:	7f 93       	push	r23
    14ec:	8f 93       	push	r24
    14ee:	9f 93       	push	r25
    14f0:	af 93       	push	r26
    14f2:	bf 93       	push	r27
    14f4:	ef 93       	push	r30
    14f6:	ff 93       	push	r31
    14f8:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    14fc:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1500:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1504:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1508:	c9 01       	movw	r24, r18
    150a:	03 2e       	mov	r0, r19
    150c:	00 0c       	add	r0, r0
    150e:	aa 0b       	sbc	r26, r26
    1510:	bb 0b       	sbc	r27, r27
    1512:	dc 01       	movw	r26, r24
    1514:	99 27       	eor	r25, r25
    1516:	88 27       	eor	r24, r24
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	84 2b       	or	r24, r20
    151e:	95 2b       	or	r25, r21
    1520:	a6 2b       	or	r26, r22
    1522:	b7 2b       	or	r27, r23
    1524:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1528:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    152c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1530:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1534:	b0 9b       	sbis	0x16, 0	; 22
    1536:	1b c0       	rjmp	.+54     	; 0x156e <__vector_19+0x98>
    1538:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    153c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1540:	c9 01       	movw	r24, r18
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	09 2e       	mov	r0, r25
    1546:	00 0c       	add	r0, r0
    1548:	aa 0b       	sbc	r26, r26
    154a:	bb 0b       	sbc	r27, r27
    154c:	dc 01       	movw	r26, r24
    154e:	99 27       	eor	r25, r25
    1550:	88 27       	eor	r24, r24
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	84 2b       	or	r24, r20
    1558:	95 2b       	or	r25, r21
    155a:	a6 2b       	or	r26, r22
    155c:	b7 2b       	or	r27, r23
    155e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1562:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1566:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    156a:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    156e:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0x1c>
    1572:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x1d>
    1576:	30 97       	sbiw	r30, 0x00	; 0
    1578:	39 f0       	breq	.+14     	; 0x1588 <__vector_19+0xb2>
    157a:	6e e0       	ldi	r22, 0x0E	; 14
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x1c>
    1582:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x1d>
    1586:	09 95       	icall
    1588:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
    158c:	ff 91       	pop	r31
    158e:	ef 91       	pop	r30
    1590:	bf 91       	pop	r27
    1592:	af 91       	pop	r26
    1594:	9f 91       	pop	r25
    1596:	8f 91       	pop	r24
    1598:	7f 91       	pop	r23
    159a:	6f 91       	pop	r22
    159c:	5f 91       	pop	r21
    159e:	4f 91       	pop	r20
    15a0:	3f 91       	pop	r19
    15a2:	2f 91       	pop	r18
    15a4:	0f 90       	pop	r0
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	0f 90       	pop	r0
    15aa:	1f 90       	pop	r1
    15ac:	18 95       	reti

000015ae <__vector_20>:
    15ae:	1f 92       	push	r1
    15b0:	0f 92       	push	r0
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	0f 92       	push	r0
    15b6:	11 24       	eor	r1, r1
    15b8:	2f 93       	push	r18
    15ba:	3f 93       	push	r19
    15bc:	4f 93       	push	r20
    15be:	5f 93       	push	r21
    15c0:	6f 93       	push	r22
    15c2:	7f 93       	push	r23
    15c4:	8f 93       	push	r24
    15c6:	9f 93       	push	r25
    15c8:	af 93       	push	r26
    15ca:	bf 93       	push	r27
    15cc:	ef 93       	push	r30
    15ce:	ff 93       	push	r31
    15d0:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    15d4:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    15d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15e0:	c9 01       	movw	r24, r18
    15e2:	03 2e       	mov	r0, r19
    15e4:	00 0c       	add	r0, r0
    15e6:	aa 0b       	sbc	r26, r26
    15e8:	bb 0b       	sbc	r27, r27
    15ea:	dc 01       	movw	r26, r24
    15ec:	99 27       	eor	r25, r25
    15ee:	88 27       	eor	r24, r24
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	70 e0       	ldi	r23, 0x00	; 0
    15f4:	84 2b       	or	r24, r20
    15f6:	95 2b       	or	r25, r21
    15f8:	a6 2b       	or	r26, r22
    15fa:	b7 2b       	or	r27, r23
    15fc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1600:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1604:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1608:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    160c:	b0 9b       	sbis	0x16, 0	; 22
    160e:	1b c0       	rjmp	.+54     	; 0x1646 <__vector_20+0x98>
    1610:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1614:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1618:	c9 01       	movw	r24, r18
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	09 2e       	mov	r0, r25
    161e:	00 0c       	add	r0, r0
    1620:	aa 0b       	sbc	r26, r26
    1622:	bb 0b       	sbc	r27, r27
    1624:	dc 01       	movw	r26, r24
    1626:	99 27       	eor	r25, r25
    1628:	88 27       	eor	r24, r24
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	84 2b       	or	r24, r20
    1630:	95 2b       	or	r25, r21
    1632:	a6 2b       	or	r26, r22
    1634:	b7 2b       	or	r27, r23
    1636:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    163a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    163e:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1642:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1646:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x1e>
    164a:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x1f>
    164e:	30 97       	sbiw	r30, 0x00	; 0
    1650:	39 f0       	breq	.+14     	; 0x1660 <__vector_20+0xb2>
    1652:	6f e0       	ldi	r22, 0x0F	; 15
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x1e>
    165a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x1f>
    165e:	09 95       	icall
    1660:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
    1664:	ff 91       	pop	r31
    1666:	ef 91       	pop	r30
    1668:	bf 91       	pop	r27
    166a:	af 91       	pop	r26
    166c:	9f 91       	pop	r25
    166e:	8f 91       	pop	r24
    1670:	7f 91       	pop	r23
    1672:	6f 91       	pop	r22
    1674:	5f 91       	pop	r21
    1676:	4f 91       	pop	r20
    1678:	3f 91       	pop	r19
    167a:	2f 91       	pop	r18
    167c:	0f 90       	pop	r0
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	0f 90       	pop	r0
    1682:	1f 90       	pop	r1
    1684:	18 95       	reti

00001686 <__vector_21>:
    1686:	1f 92       	push	r1
    1688:	0f 92       	push	r0
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	0f 92       	push	r0
    168e:	11 24       	eor	r1, r1
    1690:	2f 93       	push	r18
    1692:	3f 93       	push	r19
    1694:	4f 93       	push	r20
    1696:	5f 93       	push	r21
    1698:	6f 93       	push	r22
    169a:	7f 93       	push	r23
    169c:	8f 93       	push	r24
    169e:	9f 93       	push	r25
    16a0:	af 93       	push	r26
    16a2:	bf 93       	push	r27
    16a4:	ef 93       	push	r30
    16a6:	ff 93       	push	r31
    16a8:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    16ac:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    16b0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16b4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16b8:	c9 01       	movw	r24, r18
    16ba:	03 2e       	mov	r0, r19
    16bc:	00 0c       	add	r0, r0
    16be:	aa 0b       	sbc	r26, r26
    16c0:	bb 0b       	sbc	r27, r27
    16c2:	dc 01       	movw	r26, r24
    16c4:	99 27       	eor	r25, r25
    16c6:	88 27       	eor	r24, r24
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	84 2b       	or	r24, r20
    16ce:	95 2b       	or	r25, r21
    16d0:	a6 2b       	or	r26, r22
    16d2:	b7 2b       	or	r27, r23
    16d4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    16d8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    16dc:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    16e0:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    16e4:	b0 9b       	sbis	0x16, 0	; 22
    16e6:	1b c0       	rjmp	.+54     	; 0x171e <__vector_21+0x98>
    16e8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16ec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16f0:	c9 01       	movw	r24, r18
    16f2:	01 96       	adiw	r24, 0x01	; 1
    16f4:	09 2e       	mov	r0, r25
    16f6:	00 0c       	add	r0, r0
    16f8:	aa 0b       	sbc	r26, r26
    16fa:	bb 0b       	sbc	r27, r27
    16fc:	dc 01       	movw	r26, r24
    16fe:	99 27       	eor	r25, r25
    1700:	88 27       	eor	r24, r24
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	84 2b       	or	r24, r20
    1708:	95 2b       	or	r25, r21
    170a:	a6 2b       	or	r26, r22
    170c:	b7 2b       	or	r27, r23
    170e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1712:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1716:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    171a:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    171e:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x20>
    1722:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x21>
    1726:	30 97       	sbiw	r30, 0x00	; 0
    1728:	39 f0       	breq	.+14     	; 0x1738 <__vector_21+0xb2>
    172a:	60 e1       	ldi	r22, 0x10	; 16
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x20>
    1732:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x21>
    1736:	09 95       	icall
    1738:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
    173c:	ff 91       	pop	r31
    173e:	ef 91       	pop	r30
    1740:	bf 91       	pop	r27
    1742:	af 91       	pop	r26
    1744:	9f 91       	pop	r25
    1746:	8f 91       	pop	r24
    1748:	7f 91       	pop	r23
    174a:	6f 91       	pop	r22
    174c:	5f 91       	pop	r21
    174e:	4f 91       	pop	r20
    1750:	3f 91       	pop	r19
    1752:	2f 91       	pop	r18
    1754:	0f 90       	pop	r0
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	0f 90       	pop	r0
    175a:	1f 90       	pop	r1
    175c:	18 95       	reti

0000175e <__vector_22>:
    175e:	1f 92       	push	r1
    1760:	0f 92       	push	r0
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	0f 92       	push	r0
    1766:	11 24       	eor	r1, r1
    1768:	2f 93       	push	r18
    176a:	3f 93       	push	r19
    176c:	4f 93       	push	r20
    176e:	5f 93       	push	r21
    1770:	6f 93       	push	r22
    1772:	7f 93       	push	r23
    1774:	8f 93       	push	r24
    1776:	9f 93       	push	r25
    1778:	af 93       	push	r26
    177a:	bf 93       	push	r27
    177c:	ef 93       	push	r30
    177e:	ff 93       	push	r31
    1780:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1784:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1788:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    178c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1790:	c9 01       	movw	r24, r18
    1792:	03 2e       	mov	r0, r19
    1794:	00 0c       	add	r0, r0
    1796:	aa 0b       	sbc	r26, r26
    1798:	bb 0b       	sbc	r27, r27
    179a:	dc 01       	movw	r26, r24
    179c:	99 27       	eor	r25, r25
    179e:	88 27       	eor	r24, r24
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	84 2b       	or	r24, r20
    17a6:	95 2b       	or	r25, r21
    17a8:	a6 2b       	or	r26, r22
    17aa:	b7 2b       	or	r27, r23
    17ac:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    17b0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    17b4:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    17b8:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    17bc:	b0 9b       	sbis	0x16, 0	; 22
    17be:	1b c0       	rjmp	.+54     	; 0x17f6 <__vector_22+0x98>
    17c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    17c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    17c8:	c9 01       	movw	r24, r18
    17ca:	01 96       	adiw	r24, 0x01	; 1
    17cc:	09 2e       	mov	r0, r25
    17ce:	00 0c       	add	r0, r0
    17d0:	aa 0b       	sbc	r26, r26
    17d2:	bb 0b       	sbc	r27, r27
    17d4:	dc 01       	movw	r26, r24
    17d6:	99 27       	eor	r25, r25
    17d8:	88 27       	eor	r24, r24
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	84 2b       	or	r24, r20
    17e0:	95 2b       	or	r25, r21
    17e2:	a6 2b       	or	r26, r22
    17e4:	b7 2b       	or	r27, r23
    17e6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    17ea:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    17ee:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    17f2:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    17f6:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x22>
    17fa:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x23>
    17fe:	30 97       	sbiw	r30, 0x00	; 0
    1800:	39 f0       	breq	.+14     	; 0x1810 <__vector_22+0xb2>
    1802:	61 e1       	ldi	r22, 0x11	; 17
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x22>
    180a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x23>
    180e:	09 95       	icall
    1810:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
    1814:	ff 91       	pop	r31
    1816:	ef 91       	pop	r30
    1818:	bf 91       	pop	r27
    181a:	af 91       	pop	r26
    181c:	9f 91       	pop	r25
    181e:	8f 91       	pop	r24
    1820:	7f 91       	pop	r23
    1822:	6f 91       	pop	r22
    1824:	5f 91       	pop	r21
    1826:	4f 91       	pop	r20
    1828:	3f 91       	pop	r19
    182a:	2f 91       	pop	r18
    182c:	0f 90       	pop	r0
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	0f 90       	pop	r0
    1832:	1f 90       	pop	r1
    1834:	18 95       	reti

00001836 <enqueueByDeadline>:
    1836:	ef 92       	push	r14
    1838:	ff 92       	push	r15
    183a:	0f 93       	push	r16
    183c:	1f 93       	push	r17
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	7b 01       	movw	r14, r22
    1844:	eb 01       	movw	r28, r22
    1846:	a8 81       	ld	r26, Y
    1848:	b9 81       	ldd	r27, Y+1	; 0x01
    184a:	10 97       	sbiw	r26, 0x00	; 0
    184c:	61 f1       	breq	.+88     	; 0x18a6 <enqueueByDeadline+0x70>
    184e:	fc 01       	movw	r30, r24
    1850:	06 81       	ldd	r16, Z+6	; 0x06
    1852:	17 81       	ldd	r17, Z+7	; 0x07
    1854:	20 85       	ldd	r18, Z+8	; 0x08
    1856:	31 85       	ldd	r19, Z+9	; 0x09
    1858:	16 96       	adiw	r26, 0x06	; 6
    185a:	4d 91       	ld	r20, X+
    185c:	5d 91       	ld	r21, X+
    185e:	6d 91       	ld	r22, X+
    1860:	7c 91       	ld	r23, X
    1862:	19 97       	sbiw	r26, 0x09	; 9
    1864:	04 17       	cp	r16, r20
    1866:	15 07       	cpc	r17, r21
    1868:	26 07       	cpc	r18, r22
    186a:	37 07       	cpc	r19, r23
    186c:	14 f4       	brge	.+4      	; 0x1872 <enqueueByDeadline+0x3c>
    186e:	1b c0       	rjmp	.+54     	; 0x18a6 <enqueueByDeadline+0x70>
    1870:	df 01       	movw	r26, r30
    1872:	ed 91       	ld	r30, X+
    1874:	fc 91       	ld	r31, X
    1876:	11 97       	sbiw	r26, 0x01	; 1
    1878:	30 97       	sbiw	r30, 0x00	; 0
    187a:	49 f0       	breq	.+18     	; 0x188e <enqueueByDeadline+0x58>
    187c:	46 81       	ldd	r20, Z+6	; 0x06
    187e:	57 81       	ldd	r21, Z+7	; 0x07
    1880:	60 85       	ldd	r22, Z+8	; 0x08
    1882:	71 85       	ldd	r23, Z+9	; 0x09
    1884:	04 17       	cp	r16, r20
    1886:	15 07       	cpc	r17, r21
    1888:	26 07       	cpc	r18, r22
    188a:	37 07       	cpc	r19, r23
    188c:	8c f7       	brge	.-30     	; 0x1870 <enqueueByDeadline+0x3a>
    188e:	ec 01       	movw	r28, r24
    1890:	f9 83       	std	Y+1, r31	; 0x01
    1892:	e8 83       	st	Y, r30
    1894:	10 97       	sbiw	r26, 0x00	; 0
    1896:	21 f4       	brne	.+8      	; 0x18a0 <enqueueByDeadline+0x6a>
    1898:	f7 01       	movw	r30, r14
    189a:	91 83       	std	Z+1, r25	; 0x01
    189c:	80 83       	st	Z, r24
    189e:	07 c0       	rjmp	.+14     	; 0x18ae <enqueueByDeadline+0x78>
    18a0:	8d 93       	st	X+, r24
    18a2:	9c 93       	st	X, r25
    18a4:	04 c0       	rjmp	.+8      	; 0x18ae <enqueueByDeadline+0x78>
    18a6:	ec 01       	movw	r28, r24
    18a8:	b9 83       	std	Y+1, r27	; 0x01
    18aa:	a8 83       	st	Y, r26
    18ac:	f5 cf       	rjmp	.-22     	; 0x1898 <enqueueByDeadline+0x62>
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	08 95       	ret

000018bc <enqueueByBaseline>:
    18bc:	ef 92       	push	r14
    18be:	ff 92       	push	r15
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	7b 01       	movw	r14, r22
    18ca:	eb 01       	movw	r28, r22
    18cc:	a8 81       	ld	r26, Y
    18ce:	b9 81       	ldd	r27, Y+1	; 0x01
    18d0:	10 97       	sbiw	r26, 0x00	; 0
    18d2:	61 f1       	breq	.+88     	; 0x192c <enqueueByBaseline+0x70>
    18d4:	fc 01       	movw	r30, r24
    18d6:	02 81       	ldd	r16, Z+2	; 0x02
    18d8:	13 81       	ldd	r17, Z+3	; 0x03
    18da:	24 81       	ldd	r18, Z+4	; 0x04
    18dc:	35 81       	ldd	r19, Z+5	; 0x05
    18de:	12 96       	adiw	r26, 0x02	; 2
    18e0:	4d 91       	ld	r20, X+
    18e2:	5d 91       	ld	r21, X+
    18e4:	6d 91       	ld	r22, X+
    18e6:	7c 91       	ld	r23, X
    18e8:	15 97       	sbiw	r26, 0x05	; 5
    18ea:	04 17       	cp	r16, r20
    18ec:	15 07       	cpc	r17, r21
    18ee:	26 07       	cpc	r18, r22
    18f0:	37 07       	cpc	r19, r23
    18f2:	14 f4       	brge	.+4      	; 0x18f8 <enqueueByBaseline+0x3c>
    18f4:	1b c0       	rjmp	.+54     	; 0x192c <enqueueByBaseline+0x70>
    18f6:	df 01       	movw	r26, r30
    18f8:	ed 91       	ld	r30, X+
    18fa:	fc 91       	ld	r31, X
    18fc:	11 97       	sbiw	r26, 0x01	; 1
    18fe:	30 97       	sbiw	r30, 0x00	; 0
    1900:	49 f0       	breq	.+18     	; 0x1914 <enqueueByBaseline+0x58>
    1902:	42 81       	ldd	r20, Z+2	; 0x02
    1904:	53 81       	ldd	r21, Z+3	; 0x03
    1906:	64 81       	ldd	r22, Z+4	; 0x04
    1908:	75 81       	ldd	r23, Z+5	; 0x05
    190a:	04 17       	cp	r16, r20
    190c:	15 07       	cpc	r17, r21
    190e:	26 07       	cpc	r18, r22
    1910:	37 07       	cpc	r19, r23
    1912:	8c f7       	brge	.-30     	; 0x18f6 <enqueueByBaseline+0x3a>
    1914:	ec 01       	movw	r28, r24
    1916:	f9 83       	std	Y+1, r31	; 0x01
    1918:	e8 83       	st	Y, r30
    191a:	10 97       	sbiw	r26, 0x00	; 0
    191c:	21 f4       	brne	.+8      	; 0x1926 <enqueueByBaseline+0x6a>
    191e:	f7 01       	movw	r30, r14
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	80 83       	st	Z, r24
    1924:	07 c0       	rjmp	.+14     	; 0x1934 <enqueueByBaseline+0x78>
    1926:	8d 93       	st	X+, r24
    1928:	9c 93       	st	X, r25
    192a:	04 c0       	rjmp	.+8      	; 0x1934 <enqueueByBaseline+0x78>
    192c:	ec 01       	movw	r28, r24
    192e:	b9 83       	std	Y+1, r27	; 0x01
    1930:	a8 83       	st	Y, r26
    1932:	f5 cf       	rjmp	.-22     	; 0x191e <enqueueByBaseline+0x62>
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	ff 90       	pop	r15
    193e:	ef 90       	pop	r14
    1940:	08 95       	ret

00001942 <dequeue>:
    1942:	dc 01       	movw	r26, r24
    1944:	ed 91       	ld	r30, X+
    1946:	fc 91       	ld	r31, X
    1948:	11 97       	sbiw	r26, 0x01	; 1
    194a:	30 97       	sbiw	r30, 0x00	; 0
    194c:	59 f4       	brne	.+22     	; 0x1964 <dequeue+0x22>
    194e:	8f ef       	ldi	r24, 0xFF	; 255
    1950:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1954:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    1958:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	83 bf       	out	0x33, r24	; 51
    1960:	88 95       	sleep
    1962:	fd cf       	rjmp	.-6      	; 0x195e <dequeue+0x1c>
    1964:	20 81       	ld	r18, Z
    1966:	31 81       	ldd	r19, Z+1	; 0x01
    1968:	2d 93       	st	X+, r18
    196a:	3c 93       	st	X, r19
    196c:	cf 01       	movw	r24, r30
    196e:	08 95       	ret

00001970 <__vector_9>:
    1970:	1f 92       	push	r1
    1972:	0f 92       	push	r0
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	0f 92       	push	r0
    1978:	11 24       	eor	r1, r1
    197a:	2f 93       	push	r18
    197c:	3f 93       	push	r19
    197e:	4f 93       	push	r20
    1980:	5f 93       	push	r21
    1982:	6f 93       	push	r22
    1984:	7f 93       	push	r23
    1986:	8f 93       	push	r24
    1988:	9f 93       	push	r25
    198a:	ef 93       	push	r30
    198c:	ff 93       	push	r31
    198e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1992:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
    199c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
    19a0:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    19a4:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    19a8:	30 97       	sbiw	r30, 0x00	; 0
    19aa:	01 f1       	breq	.+64     	; 0x19ec <__vector_9+0x7c>
    19ac:	42 81       	ldd	r20, Z+2	; 0x02
    19ae:	53 81       	ldd	r21, Z+3	; 0x03
    19b0:	64 81       	ldd	r22, Z+4	; 0x04
    19b2:	75 81       	ldd	r23, Z+5	; 0x05
    19b4:	86 17       	cp	r24, r22
    19b6:	97 07       	cpc	r25, r23
    19b8:	c9 f4       	brne	.+50     	; 0x19ec <__vector_9+0x7c>
    19ba:	ca 01       	movw	r24, r20
    19bc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    19c0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    19c4:	42 1b       	sub	r20, r18
    19c6:	53 0b       	sbc	r21, r19
    19c8:	41 30       	cpi	r20, 0x01	; 1
    19ca:	51 05       	cpc	r21, r1
    19cc:	29 f4       	brne	.+10     	; 0x19d8 <__vector_9+0x68>
    19ce:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    19d2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    19d6:	01 96       	adiw	r24, 0x01	; 1
    19d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    19dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    19e0:	ef e6       	ldi	r30, 0x6F	; 111
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	82 60       	ori	r24, 0x02	; 2
    19e8:	80 83       	st	Z, r24
    19ea:	05 c0       	rjmp	.+10     	; 0x19f6 <__vector_9+0x86>
    19ec:	ef e6       	ldi	r30, 0x6F	; 111
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	8d 7f       	andi	r24, 0xFD	; 253
    19f4:	80 83       	st	Z, r24
    19f6:	ff 91       	pop	r31
    19f8:	ef 91       	pop	r30
    19fa:	9f 91       	pop	r25
    19fc:	8f 91       	pop	r24
    19fe:	7f 91       	pop	r23
    1a00:	6f 91       	pop	r22
    1a02:	5f 91       	pop	r21
    1a04:	4f 91       	pop	r20
    1a06:	3f 91       	pop	r19
    1a08:	2f 91       	pop	r18
    1a0a:	0f 90       	pop	r0
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	0f 90       	pop	r0
    1a10:	1f 90       	pop	r1
    1a12:	18 95       	reti

00001a14 <__vector_7>:
    1a14:	1f 92       	push	r1
    1a16:	0f 92       	push	r0
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	0f 92       	push	r0
    1a1c:	11 24       	eor	r1, r1
    1a1e:	cf 92       	push	r12
    1a20:	df 92       	push	r13
    1a22:	ef 92       	push	r14
    1a24:	ff 92       	push	r15
    1a26:	2f 93       	push	r18
    1a28:	3f 93       	push	r19
    1a2a:	4f 93       	push	r20
    1a2c:	5f 93       	push	r21
    1a2e:	6f 93       	push	r22
    1a30:	7f 93       	push	r23
    1a32:	8f 93       	push	r24
    1a34:	9f 93       	push	r25
    1a36:	af 93       	push	r26
    1a38:	bf 93       	push	r27
    1a3a:	ef 93       	push	r30
    1a3c:	ff 93       	push	r31
    1a3e:	c0 90 1c 01 	lds	r12, 0x011C	; 0x80011c <__data_end>
    1a42:	d0 90 1d 01 	lds	r13, 0x011D	; 0x80011d <__data_end+0x1>
    1a46:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a4a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a4e:	b0 99       	sbic	0x16, 0	; 22
    1a50:	0f c0       	rjmp	.+30     	; 0x1a70 <__vector_7+0x5c>
    1a52:	0d 2c       	mov	r0, r13
    1a54:	00 0c       	add	r0, r0
    1a56:	ee 08       	sbc	r14, r14
    1a58:	ff 08       	sbc	r15, r15
    1a5a:	d6 01       	movw	r26, r12
    1a5c:	99 27       	eor	r25, r25
    1a5e:	88 27       	eor	r24, r24
    1a60:	69 01       	movw	r12, r18
    1a62:	e1 2c       	mov	r14, r1
    1a64:	f1 2c       	mov	r15, r1
    1a66:	c8 2a       	or	r12, r24
    1a68:	d9 2a       	or	r13, r25
    1a6a:	ea 2a       	or	r14, r26
    1a6c:	fb 2a       	or	r15, r27
    1a6e:	15 c0       	rjmp	.+42     	; 0x1a9a <__vector_7+0x86>
    1a70:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a74:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a78:	8f ef       	ldi	r24, 0xFF	; 255
    1a7a:	c8 1a       	sub	r12, r24
    1a7c:	d8 0a       	sbc	r13, r24
    1a7e:	0d 2c       	mov	r0, r13
    1a80:	00 0c       	add	r0, r0
    1a82:	ee 08       	sbc	r14, r14
    1a84:	ff 08       	sbc	r15, r15
    1a86:	d6 01       	movw	r26, r12
    1a88:	99 27       	eor	r25, r25
    1a8a:	88 27       	eor	r24, r24
    1a8c:	69 01       	movw	r12, r18
    1a8e:	e1 2c       	mov	r14, r1
    1a90:	f1 2c       	mov	r15, r1
    1a92:	c8 2a       	or	r12, r24
    1a94:	d9 2a       	or	r13, r25
    1a96:	ea 2a       	or	r14, r26
    1a98:	fb 2a       	or	r15, r27
    1a9a:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    1a9e:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    1aa2:	30 97       	sbiw	r30, 0x00	; 0
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <__vector_7+0x94>
    1aa6:	42 c0       	rjmp	.+132    	; 0x1b2c <__vector_7+0x118>
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	a4 81       	ldd	r26, Z+4	; 0x04
    1aae:	b5 81       	ldd	r27, Z+5	; 0x05
    1ab0:	8c 19       	sub	r24, r12
    1ab2:	9d 09       	sbc	r25, r13
    1ab4:	ae 09       	sbc	r26, r14
    1ab6:	bf 09       	sbc	r27, r15
    1ab8:	18 16       	cp	r1, r24
    1aba:	19 06       	cpc	r1, r25
    1abc:	1a 06       	cpc	r1, r26
    1abe:	1b 06       	cpc	r1, r27
    1ac0:	ec f1       	brlt	.+122    	; 0x1b3c <__vector_7+0x128>
    1ac2:	82 e2       	ldi	r24, 0x22	; 34
    1ac4:	91 e0       	ldi	r25, 0x01	; 1
    1ac6:	0e 94 a1 0c 	call	0x1942	; 0x1942 <dequeue>
    1aca:	64 e2       	ldi	r22, 0x24	; 36
    1acc:	71 e0       	ldi	r23, 0x01	; 1
    1ace:	0e 94 1b 0c 	call	0x1836	; 0x1836 <enqueueByDeadline>
    1ad2:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    1ad6:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    1ada:	30 97       	sbiw	r30, 0x00	; 0
    1adc:	39 f1       	breq	.+78     	; 0x1b2c <__vector_7+0x118>
    1ade:	82 81       	ldd	r24, Z+2	; 0x02
    1ae0:	93 81       	ldd	r25, Z+3	; 0x03
    1ae2:	a4 81       	ldd	r26, Z+4	; 0x04
    1ae4:	b5 81       	ldd	r27, Z+5	; 0x05
    1ae6:	8c 19       	sub	r24, r12
    1ae8:	9d 09       	sbc	r25, r13
    1aea:	ae 09       	sbc	r26, r14
    1aec:	bf 09       	sbc	r27, r15
    1aee:	18 16       	cp	r1, r24
    1af0:	19 06       	cpc	r1, r25
    1af2:	1a 06       	cpc	r1, r26
    1af4:	1b 06       	cpc	r1, r27
    1af6:	2c f7       	brge	.-54     	; 0x1ac2 <__vector_7+0xae>
    1af8:	21 c0       	rjmp	.+66     	; 0x1b3c <__vector_7+0x128>
    1afa:	9c 01       	movw	r18, r24
    1afc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b00:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b04:	84 1b       	sub	r24, r20
    1b06:	95 0b       	sbc	r25, r21
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	31 f4       	brne	.+12     	; 0x1b18 <__vector_7+0x104>
    1b0c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b10:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b14:	2f 5f       	subi	r18, 0xFF	; 255
    1b16:	3f 4f       	sbci	r19, 0xFF	; 255
    1b18:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1b1c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1b20:	ef e6       	ldi	r30, 0x6F	; 111
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	82 60       	ori	r24, 0x02	; 2
    1b28:	80 83       	st	Z, r24
    1b2a:	05 c0       	rjmp	.+10     	; 0x1b36 <__vector_7+0x122>
    1b2c:	ef e6       	ldi	r30, 0x6F	; 111
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	8d 7f       	andi	r24, 0xFD	; 253
    1b34:	80 83       	st	Z, r24
    1b36:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
    1b3a:	0c c0       	rjmp	.+24     	; 0x1b54 <__vector_7+0x140>
    1b3c:	82 81       	ldd	r24, Z+2	; 0x02
    1b3e:	93 81       	ldd	r25, Z+3	; 0x03
    1b40:	a4 81       	ldd	r26, Z+4	; 0x04
    1b42:	b5 81       	ldd	r27, Z+5	; 0x05
    1b44:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1b48:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1b4c:	2a 17       	cp	r18, r26
    1b4e:	3b 07       	cpc	r19, r27
    1b50:	69 f7       	brne	.-38     	; 0x1b2c <__vector_7+0x118>
    1b52:	d3 cf       	rjmp	.-90     	; 0x1afa <__vector_7+0xe6>
    1b54:	ff 91       	pop	r31
    1b56:	ef 91       	pop	r30
    1b58:	bf 91       	pop	r27
    1b5a:	af 91       	pop	r26
    1b5c:	9f 91       	pop	r25
    1b5e:	8f 91       	pop	r24
    1b60:	7f 91       	pop	r23
    1b62:	6f 91       	pop	r22
    1b64:	5f 91       	pop	r21
    1b66:	4f 91       	pop	r20
    1b68:	3f 91       	pop	r19
    1b6a:	2f 91       	pop	r18
    1b6c:	ff 90       	pop	r15
    1b6e:	ef 90       	pop	r14
    1b70:	df 90       	pop	r13
    1b72:	cf 90       	pop	r12
    1b74:	0f 90       	pop	r0
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	0f 90       	pop	r0
    1b7a:	1f 90       	pop	r1
    1b7c:	18 95       	reti

00001b7e <async>:
    1b7e:	3f 92       	push	r3
    1b80:	4f 92       	push	r4
    1b82:	5f 92       	push	r5
    1b84:	6f 92       	push	r6
    1b86:	7f 92       	push	r7
    1b88:	8f 92       	push	r8
    1b8a:	9f 92       	push	r9
    1b8c:	af 92       	push	r10
    1b8e:	bf 92       	push	r11
    1b90:	cf 92       	push	r12
    1b92:	df 92       	push	r13
    1b94:	ef 92       	push	r14
    1b96:	ff 92       	push	r15
    1b98:	0f 93       	push	r16
    1b9a:	1f 93       	push	r17
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	2b 01       	movw	r4, r22
    1ba2:	3c 01       	movw	r6, r24
    1ba4:	49 01       	movw	r8, r18
    1ba6:	5a 01       	movw	r10, r20
    1ba8:	8f b7       	in	r24, 0x3f	; 63
    1baa:	80 78       	andi	r24, 0x80	; 128
    1bac:	38 2e       	mov	r3, r24
    1bae:	f8 94       	cli
    1bb0:	86 e0       	ldi	r24, 0x06	; 6
    1bb2:	91 e0       	ldi	r25, 0x01	; 1
    1bb4:	0e 94 a1 0c 	call	0x1942	; 0x1942 <dequeue>
    1bb8:	ec 01       	movw	r28, r24
    1bba:	1b 87       	std	Y+11, r17	; 0x0b
    1bbc:	0a 87       	std	Y+10, r16	; 0x0a
    1bbe:	fd 86       	std	Y+13, r15	; 0x0d
    1bc0:	ec 86       	std	Y+12, r14	; 0x0c
    1bc2:	df 86       	std	Y+15, r13	; 0x0f
    1bc4:	ce 86       	std	Y+14, r12	; 0x0e
    1bc6:	33 20       	and	r3, r3
    1bc8:	61 f0       	breq	.+24     	; 0x1be2 <async+0x64>
    1bca:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1bce:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1bd2:	02 80       	ldd	r0, Z+2	; 0x02
    1bd4:	f3 81       	ldd	r31, Z+3	; 0x03
    1bd6:	e0 2d       	mov	r30, r0
    1bd8:	82 81       	ldd	r24, Z+2	; 0x02
    1bda:	93 81       	ldd	r25, Z+3	; 0x03
    1bdc:	a4 81       	ldd	r26, Z+4	; 0x04
    1bde:	b5 81       	ldd	r27, Z+5	; 0x05
    1be0:	08 c0       	rjmp	.+16     	; 0x1bf2 <async+0x74>
    1be2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timestamp>
    1be6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timestamp+0x1>
    1bea:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <timestamp+0x2>
    1bee:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <timestamp+0x3>
    1bf2:	48 0e       	add	r4, r24
    1bf4:	59 1e       	adc	r5, r25
    1bf6:	6a 1e       	adc	r6, r26
    1bf8:	7b 1e       	adc	r7, r27
    1bfa:	4a 82       	std	Y+2, r4	; 0x02
    1bfc:	5b 82       	std	Y+3, r5	; 0x03
    1bfe:	6c 82       	std	Y+4, r6	; 0x04
    1c00:	7d 82       	std	Y+5, r7	; 0x05
    1c02:	18 14       	cp	r1, r8
    1c04:	19 04       	cpc	r1, r9
    1c06:	1a 04       	cpc	r1, r10
    1c08:	1b 04       	cpc	r1, r11
    1c0a:	44 f0       	brlt	.+16     	; 0x1c1c <async+0x9e>
    1c0c:	0f 2e       	mov	r0, r31
    1c0e:	88 24       	eor	r8, r8
    1c10:	8a 94       	dec	r8
    1c12:	98 2c       	mov	r9, r8
    1c14:	a8 2c       	mov	r10, r8
    1c16:	ff e7       	ldi	r31, 0x7F	; 127
    1c18:	bf 2e       	mov	r11, r31
    1c1a:	f0 2d       	mov	r31, r0
    1c1c:	84 0c       	add	r8, r4
    1c1e:	95 1c       	adc	r9, r5
    1c20:	a6 1c       	adc	r10, r6
    1c22:	b7 1c       	adc	r11, r7
    1c24:	8e 82       	std	Y+6, r8	; 0x06
    1c26:	9f 82       	std	Y+7, r9	; 0x07
    1c28:	a8 86       	std	Y+8, r10	; 0x08
    1c2a:	b9 86       	std	Y+9, r11	; 0x09
    1c2c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1c30:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1c34:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c38:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c3c:	b0 99       	sbic	0x16, 0	; 22
    1c3e:	0e c0       	rjmp	.+28     	; 0x1c5c <async+0xde>
    1c40:	09 2e       	mov	r0, r25
    1c42:	00 0c       	add	r0, r0
    1c44:	aa 0b       	sbc	r26, r26
    1c46:	bb 0b       	sbc	r27, r27
    1c48:	dc 01       	movw	r26, r24
    1c4a:	99 27       	eor	r25, r25
    1c4c:	88 27       	eor	r24, r24
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	84 2b       	or	r24, r20
    1c54:	95 2b       	or	r25, r21
    1c56:	a6 2b       	or	r26, r22
    1c58:	b7 2b       	or	r27, r23
    1c5a:	13 c0       	rjmp	.+38     	; 0x1c82 <async+0x104>
    1c5c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c60:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c64:	01 96       	adiw	r24, 0x01	; 1
    1c66:	09 2e       	mov	r0, r25
    1c68:	00 0c       	add	r0, r0
    1c6a:	aa 0b       	sbc	r26, r26
    1c6c:	bb 0b       	sbc	r27, r27
    1c6e:	dc 01       	movw	r26, r24
    1c70:	99 27       	eor	r25, r25
    1c72:	88 27       	eor	r24, r24
    1c74:	a9 01       	movw	r20, r18
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	84 2b       	or	r24, r20
    1c7c:	95 2b       	or	r25, r21
    1c7e:	a6 2b       	or	r26, r22
    1c80:	b7 2b       	or	r27, r23
    1c82:	48 1a       	sub	r4, r24
    1c84:	59 0a       	sbc	r5, r25
    1c86:	6a 0a       	sbc	r6, r26
    1c88:	7b 0a       	sbc	r7, r27
    1c8a:	14 14       	cp	r1, r4
    1c8c:	15 04       	cpc	r1, r5
    1c8e:	16 04       	cpc	r1, r6
    1c90:	17 04       	cpc	r1, r7
    1c92:	ac f5       	brge	.+106    	; 0x1cfe <async+0x180>
    1c94:	62 e2       	ldi	r22, 0x22	; 34
    1c96:	71 e0       	ldi	r23, 0x01	; 1
    1c98:	ce 01       	movw	r24, r28
    1c9a:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <enqueueByBaseline>
    1c9e:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    1ca2:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    1ca6:	30 97       	sbiw	r30, 0x00	; 0
    1ca8:	21 f1       	breq	.+72     	; 0x1cf2 <async+0x174>
    1caa:	82 81       	ldd	r24, Z+2	; 0x02
    1cac:	93 81       	ldd	r25, Z+3	; 0x03
    1cae:	a4 81       	ldd	r26, Z+4	; 0x04
    1cb0:	b5 81       	ldd	r27, Z+5	; 0x05
    1cb2:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1cb6:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1cba:	2a 17       	cp	r18, r26
    1cbc:	3b 07       	cpc	r19, r27
    1cbe:	c9 f4       	brne	.+50     	; 0x1cf2 <async+0x174>
    1cc0:	9c 01       	movw	r18, r24
    1cc2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1cc6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1cca:	84 1b       	sub	r24, r20
    1ccc:	95 0b       	sbc	r25, r21
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	31 f4       	brne	.+12     	; 0x1cde <async+0x160>
    1cd2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1cd6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1cda:	2f 5f       	subi	r18, 0xFF	; 255
    1cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cde:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1ce2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1ce6:	ef e6       	ldi	r30, 0x6F	; 111
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	82 60       	ori	r24, 0x02	; 2
    1cee:	80 83       	st	Z, r24
    1cf0:	41 c0       	rjmp	.+130    	; 0x1d74 <async+0x1f6>
    1cf2:	ef e6       	ldi	r30, 0x6F	; 111
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	8d 7f       	andi	r24, 0xFD	; 253
    1cfa:	80 83       	st	Z, r24
    1cfc:	3b c0       	rjmp	.+118    	; 0x1d74 <async+0x1f6>
    1cfe:	64 e2       	ldi	r22, 0x24	; 36
    1d00:	71 e0       	ldi	r23, 0x01	; 1
    1d02:	ce 01       	movw	r24, r28
    1d04:	0e 94 1b 0c 	call	0x1836	; 0x1836 <enqueueByDeadline>
    1d08:	33 20       	and	r3, r3
    1d0a:	b9 f1       	breq	.+110    	; 0x1d7a <async+0x1fc>
    1d0c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1d10:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	81 f1       	breq	.+96     	; 0x1d78 <async+0x1fa>
    1d18:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1d1c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1d20:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <msgQ>
    1d24:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <msgQ+0x1>
    1d28:	02 81       	ldd	r16, Z+2	; 0x02
    1d2a:	13 81       	ldd	r17, Z+3	; 0x03
    1d2c:	d9 01       	movw	r26, r18
    1d2e:	16 96       	adiw	r26, 0x06	; 6
    1d30:	4d 91       	ld	r20, X+
    1d32:	5d 91       	ld	r21, X+
    1d34:	6d 91       	ld	r22, X+
    1d36:	7c 91       	ld	r23, X
    1d38:	19 97       	sbiw	r26, 0x09	; 9
    1d3a:	d8 01       	movw	r26, r16
    1d3c:	16 96       	adiw	r26, 0x06	; 6
    1d3e:	0d 91       	ld	r16, X+
    1d40:	1d 91       	ld	r17, X+
    1d42:	2d 91       	ld	r18, X+
    1d44:	3c 91       	ld	r19, X
    1d46:	19 97       	sbiw	r26, 0x09	; 9
    1d48:	40 1b       	sub	r20, r16
    1d4a:	51 0b       	sbc	r21, r17
    1d4c:	62 0b       	sbc	r22, r18
    1d4e:	73 0b       	sbc	r23, r19
    1d50:	9a f4       	brpl	.+38     	; 0x1d78 <async+0x1fa>
    1d52:	dc 01       	movw	r26, r24
    1d54:	2d 91       	ld	r18, X+
    1d56:	3c 91       	ld	r19, X
    1d58:	11 97       	sbiw	r26, 0x01	; 1
    1d5a:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
    1d5e:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
    1d62:	ed 93       	st	X+, r30
    1d64:	fc 93       	st	X, r31
    1d66:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
    1d6a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
    1d6e:	0e 94 28 04 	call	0x850	; 0x850 <dispatch>
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <async+0x1fa>
    1d74:	33 20       	and	r3, r3
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <async+0x1fc>
    1d78:	78 94       	sei
    1d7a:	ce 01       	movw	r24, r28
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	1f 91       	pop	r17
    1d82:	0f 91       	pop	r16
    1d84:	ff 90       	pop	r15
    1d86:	ef 90       	pop	r14
    1d88:	df 90       	pop	r13
    1d8a:	cf 90       	pop	r12
    1d8c:	bf 90       	pop	r11
    1d8e:	af 90       	pop	r10
    1d90:	9f 90       	pop	r9
    1d92:	8f 90       	pop	r8
    1d94:	7f 90       	pop	r7
    1d96:	6f 90       	pop	r6
    1d98:	5f 90       	pop	r5
    1d9a:	4f 90       	pop	r4
    1d9c:	3f 90       	pop	r3
    1d9e:	08 95       	ret

00001da0 <sync>:
    1da0:	cf 92       	push	r12
    1da2:	df 92       	push	r13
    1da4:	ef 92       	push	r14
    1da6:	ff 92       	push	r15
    1da8:	0f 93       	push	r16
    1daa:	1f 93       	push	r17
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
    1db0:	ec 01       	movw	r28, r24
    1db2:	7b 01       	movw	r14, r22
    1db4:	6a 01       	movw	r12, r20
    1db6:	1f b7       	in	r17, 0x3f	; 63
    1db8:	10 78       	andi	r17, 0x80	; 128
    1dba:	f8 94       	cli
    1dbc:	a8 81       	ld	r26, Y
    1dbe:	b9 81       	ldd	r27, Y+1	; 0x01
    1dc0:	10 97       	sbiw	r26, 0x00	; 0
    1dc2:	61 f1       	breq	.+88     	; 0x1e1c <sync+0x7c>
    1dc4:	14 96       	adiw	r26, 0x04	; 4
    1dc6:	ed 91       	ld	r30, X+
    1dc8:	fc 91       	ld	r31, X
    1dca:	15 97       	sbiw	r26, 0x05	; 5
    1dcc:	30 97       	sbiw	r30, 0x00	; 0
    1dce:	41 f0       	breq	.+16     	; 0x1de0 <sync+0x40>
    1dd0:	a0 81       	ld	r26, Z
    1dd2:	b1 81       	ldd	r27, Z+1	; 0x01
    1dd4:	14 96       	adiw	r26, 0x04	; 4
    1dd6:	ed 91       	ld	r30, X+
    1dd8:	fc 91       	ld	r31, X
    1dda:	15 97       	sbiw	r26, 0x05	; 5
    1ddc:	30 97       	sbiw	r30, 0x00	; 0
    1dde:	c1 f7       	brne	.-16     	; 0x1dd0 <sync+0x30>
    1de0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1de4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1de8:	2a 17       	cp	r18, r26
    1dea:	3b 07       	cpc	r19, r27
    1dec:	21 f0       	breq	.+8      	; 0x1df6 <sync+0x56>
    1dee:	11 23       	and	r17, r17
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <sync+0x54>
    1df2:	3d c0       	rjmp	.+122    	; 0x1e6e <sync+0xce>
    1df4:	07 c0       	rjmp	.+14     	; 0x1e04 <sync+0x64>
    1df6:	11 23       	and	r17, r17
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <sync+0x5c>
    1dfa:	3c c0       	rjmp	.+120    	; 0x1e74 <sync+0xd4>
    1dfc:	78 94       	sei
    1dfe:	8f ef       	ldi	r24, 0xFF	; 255
    1e00:	9f ef       	ldi	r25, 0xFF	; 255
    1e02:	52 c0       	rjmp	.+164    	; 0x1ea8 <sync+0x108>
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	9b 81       	ldd	r25, Y+3	; 0x03
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	d1 f1       	breq	.+116    	; 0x1e80 <sync+0xe0>
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	15 82       	std	Z+5, r1	; 0x05
    1e10:	14 82       	std	Z+4, r1	; 0x04
    1e12:	36 c0       	rjmp	.+108    	; 0x1e80 <sync+0xe0>
    1e14:	78 94       	sei
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	46 c0       	rjmp	.+140    	; 0x1ea8 <sync+0x108>
    1e1c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1e20:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1e24:	99 83       	std	Y+1, r25	; 0x01
    1e26:	88 83       	st	Y, r24
    1e28:	11 23       	and	r17, r17
    1e2a:	29 f0       	breq	.+10     	; 0x1e36 <sync+0x96>
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <sync+0x96>
    1e34:	78 94       	sei
    1e36:	b6 01       	movw	r22, r12
    1e38:	ce 01       	movw	r24, r28
    1e3a:	f7 01       	movw	r30, r14
    1e3c:	09 95       	icall
    1e3e:	f8 2e       	mov	r15, r24
    1e40:	09 2f       	mov	r16, r25
    1e42:	8f b7       	in	r24, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	19 82       	std	Y+1, r1	; 0x01
    1e48:	18 82       	st	Y, r1
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4e:	82 30       	cpi	r24, 0x02	; 2
    1e50:	91 05       	cpc	r25, r1
    1e52:	38 f0       	brcs	.+14     	; 0x1e62 <sync+0xc2>
    1e54:	1b 82       	std	Y+3, r1	; 0x03
    1e56:	1a 82       	std	Y+2, r1	; 0x02
    1e58:	fc 01       	movw	r30, r24
    1e5a:	15 82       	std	Z+5, r1	; 0x05
    1e5c:	14 82       	std	Z+4, r1	; 0x04
    1e5e:	0e 94 28 04 	call	0x850	; 0x850 <dispatch>
    1e62:	11 23       	and	r17, r17
    1e64:	51 f0       	breq	.+20     	; 0x1e7a <sync+0xda>
    1e66:	78 94       	sei
    1e68:	8f 2d       	mov	r24, r15
    1e6a:	90 2f       	mov	r25, r16
    1e6c:	1d c0       	rjmp	.+58     	; 0x1ea8 <sync+0x108>
    1e6e:	8f ef       	ldi	r24, 0xFF	; 255
    1e70:	9f ef       	ldi	r25, 0xFF	; 255
    1e72:	1a c0       	rjmp	.+52     	; 0x1ea8 <sync+0x108>
    1e74:	8f ef       	ldi	r24, 0xFF	; 255
    1e76:	9f ef       	ldi	r25, 0xFF	; 255
    1e78:	17 c0       	rjmp	.+46     	; 0x1ea8 <sync+0x108>
    1e7a:	8f 2d       	mov	r24, r15
    1e7c:	90 2f       	mov	r25, r16
    1e7e:	14 c0       	rjmp	.+40     	; 0x1ea8 <sync+0x108>
    1e80:	3b 83       	std	Y+3, r19	; 0x03
    1e82:	2a 83       	std	Y+2, r18	; 0x02
    1e84:	f9 01       	movw	r30, r18
    1e86:	d5 83       	std	Z+5, r29	; 0x05
    1e88:	c4 83       	std	Z+4, r28	; 0x04
    1e8a:	cd 01       	movw	r24, r26
    1e8c:	0e 94 28 04 	call	0x850	; 0x850 <dispatch>
    1e90:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1e94:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1e98:	82 81       	ldd	r24, Z+2	; 0x02
    1e9a:	93 81       	ldd	r25, Z+3	; 0x03
    1e9c:	89 2b       	or	r24, r25
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <sync+0x102>
    1ea0:	b9 cf       	rjmp	.-142    	; 0x1e14 <sync+0x74>
    1ea2:	f9 83       	std	Y+1, r31	; 0x01
    1ea4:	e8 83       	st	Y, r30
    1ea6:	c2 cf       	rjmp	.-124    	; 0x1e2c <sync+0x8c>
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
    1eac:	1f 91       	pop	r17
    1eae:	0f 91       	pop	r16
    1eb0:	ff 90       	pop	r15
    1eb2:	ef 90       	pop	r14
    1eb4:	df 90       	pop	r13
    1eb6:	cf 90       	pop	r12
    1eb8:	08 95       	ret

00001eba <run>:
    1eba:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_start>
    1ebe:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_start+0x1>
    1ec2:	84 e2       	ldi	r24, 0x24	; 36
    1ec4:	91 e0       	ldi	r25, 0x01	; 1
    1ec6:	0e 94 a1 0c 	call	0x1942	; 0x1942 <dequeue>
    1eca:	ec 01       	movw	r28, r24
    1ecc:	d8 01       	movw	r26, r16
    1ece:	13 96       	adiw	r26, 0x03	; 3
    1ed0:	9c 93       	st	X, r25
    1ed2:	8e 93       	st	-X, r24
    1ed4:	12 97       	sbiw	r26, 0x02	; 2
    1ed6:	78 94       	sei
    1ed8:	4e 85       	ldd	r20, Y+14	; 0x0e
    1eda:	5f 85       	ldd	r21, Y+15	; 0x0f
    1edc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ede:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ee0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ee2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ee4:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <sync>
    1ee8:	8f b7       	in	r24, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <msgPool>
    1ef0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <msgPool+0x1>
    1ef4:	99 83       	std	Y+1, r25	; 0x01
    1ef6:	88 83       	st	Y, r24
    1ef8:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <msgPool+0x1>
    1efc:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <msgPool>
    1f00:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1f04:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1f08:	00 81       	ld	r16, Z
    1f0a:	11 81       	ldd	r17, Z+1	; 0x01
    1f0c:	e8 01       	movw	r28, r16
    1f0e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f10:	3b 81       	ldd	r19, Y+3	; 0x03
    1f12:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <msgQ>
    1f16:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <msgQ+0x1>
    1f1a:	10 97       	sbiw	r26, 0x00	; 0
    1f1c:	c1 f0       	breq	.+48     	; 0x1f4e <run+0x94>
    1f1e:	21 15       	cp	r18, r1
    1f20:	31 05       	cpc	r19, r1
    1f22:	59 f2       	breq	.-106    	; 0x1eba <run>
    1f24:	16 96       	adiw	r26, 0x06	; 6
    1f26:	8d 91       	ld	r24, X+
    1f28:	9d 91       	ld	r25, X+
    1f2a:	0d 90       	ld	r0, X+
    1f2c:	bc 91       	ld	r27, X
    1f2e:	a0 2d       	mov	r26, r0
    1f30:	e9 01       	movw	r28, r18
    1f32:	4e 81       	ldd	r20, Y+6	; 0x06
    1f34:	5f 81       	ldd	r21, Y+7	; 0x07
    1f36:	68 85       	ldd	r22, Y+8	; 0x08
    1f38:	79 85       	ldd	r23, Y+9	; 0x09
    1f3a:	84 1b       	sub	r24, r20
    1f3c:	95 0b       	sbc	r25, r21
    1f3e:	a6 0b       	sbc	r26, r22
    1f40:	b7 0b       	sbc	r27, r23
    1f42:	18 16       	cp	r1, r24
    1f44:	19 06       	cpc	r1, r25
    1f46:	1a 06       	cpc	r1, r26
    1f48:	1b 06       	cpc	r1, r27
    1f4a:	0c f0       	brlt	.+2      	; 0x1f4e <run+0x94>
    1f4c:	b6 cf       	rjmp	.-148    	; 0x1eba <run>
    1f4e:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <activeStack+0x1>
    1f52:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <activeStack>
    1f56:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1f5a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1f5e:	91 83       	std	Z+1, r25	; 0x01
    1f60:	80 83       	st	Z, r24
    1f62:	f0 93 05 01 	sts	0x0105, r31	; 0x800105 <threadPool+0x1>
    1f66:	e0 93 04 01 	sts	0x0104, r30	; 0x800104 <threadPool>
    1f6a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <activeStack>
    1f6e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <activeStack+0x1>
    1f72:	14 96       	adiw	r26, 0x04	; 4
    1f74:	ed 91       	ld	r30, X+
    1f76:	fc 91       	ld	r31, X
    1f78:	15 97       	sbiw	r26, 0x05	; 5
    1f7a:	30 97       	sbiw	r30, 0x00	; 0
    1f7c:	41 f0       	breq	.+16     	; 0x1f8e <run+0xd4>
    1f7e:	a0 81       	ld	r26, Z
    1f80:	b1 81       	ldd	r27, Z+1	; 0x01
    1f82:	14 96       	adiw	r26, 0x04	; 4
    1f84:	ed 91       	ld	r30, X+
    1f86:	fc 91       	ld	r31, X
    1f88:	15 97       	sbiw	r26, 0x05	; 5
    1f8a:	30 97       	sbiw	r30, 0x00	; 0
    1f8c:	c1 f7       	brne	.-16     	; 0x1f7e <run+0xc4>
    1f8e:	cd 01       	movw	r24, r26
    1f90:	0e 94 28 04 	call	0x850	; 0x850 <dispatch>
    1f94:	92 cf       	rjmp	.-220    	; 0x1eba <run>

00001f96 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    1f96:	42 31       	cpi	r20, 0x12	; 18
    1f98:	b8 f4       	brcc	.+46     	; 0x1fc8 <install+0x32>
        char status;
        DISABLE(status);
    1f9a:	2f b7       	in	r18, 0x3f	; 63
    1f9c:	f8 94       	cli
        otable[i] = obj;
    1f9e:	50 e0       	ldi	r21, 0x00	; 0
    1fa0:	44 0f       	add	r20, r20
    1fa2:	55 1f       	adc	r21, r21
    1fa4:	fa 01       	movw	r30, r20
    1fa6:	ea 5d       	subi	r30, 0xDA	; 218
    1fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	80 83       	st	Z, r24
        mtable[i] = m;
    1fae:	fa 01       	movw	r30, r20
    1fb0:	e2 54       	subi	r30, 0x42	; 66
    1fb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb4:	71 83       	std	Z+1, r23	; 0x01
    1fb6:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1fb8:	41 e0       	ldi	r20, 0x01	; 1
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	53 83       	std	Z+3, r21	; 0x03
    1fc0:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    1fc2:	22 23       	and	r18, r18
    1fc4:	0c f4       	brge	.+2      	; 0x1fc8 <install+0x32>
    1fc6:	78 94       	sei
    1fc8:	08 95       	ret

00001fca <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1fca:	8c 01       	movw	r16, r24
    1fcc:	7b 01       	movw	r14, r22
    1fce:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    1fd0:	8f b7       	in	r24, 0x3f	; 63
    1fd2:	f8 94       	cli
    initialize();
    1fd4:	0e 94 bd 03 	call	0x77a	; 0x77a <initialize>
    ENABLE(1);
    1fd8:	78 94       	sei
    if (m != NULL)
    1fda:	e1 14       	cp	r14, r1
    1fdc:	f1 04       	cpc	r15, r1
    1fde:	41 f0       	breq	.+16     	; 0x1ff0 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	a9 01       	movw	r20, r18
    1fe6:	60 e0       	ldi	r22, 0x00	; 0
    1fe8:	70 e0       	ldi	r23, 0x00	; 0
    1fea:	cb 01       	movw	r24, r22
    1fec:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <async>
    DISABLE(status);
    1ff0:	8f b7       	in	r24, 0x3f	; 63
    1ff2:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    1ff4:	0e 94 48 04 	call	0x890	; 0x890 <schedule>
    ENABLE(1);
    1ff8:	78 94       	sei
    while (1) {
        SLEEP();
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	83 bf       	out	0x33, r24	; 51
    1ffe:	88 95       	sleep
    2000:	fd cf       	rjmp	.-6      	; 0x1ffc <tinytimber+0x32>

00002002 <__divmodsi4>:
    2002:	05 2e       	mov	r0, r21
    2004:	97 fb       	bst	r25, 7
    2006:	1e f4       	brtc	.+6      	; 0x200e <__divmodsi4+0xc>
    2008:	00 94       	com	r0
    200a:	0e 94 18 10 	call	0x2030	; 0x2030 <__negsi2>
    200e:	57 fd       	sbrc	r21, 7
    2010:	07 d0       	rcall	.+14     	; 0x2020 <__divmodsi4_neg2>
    2012:	0e 94 20 10 	call	0x2040	; 0x2040 <__udivmodsi4>
    2016:	07 fc       	sbrc	r0, 7
    2018:	03 d0       	rcall	.+6      	; 0x2020 <__divmodsi4_neg2>
    201a:	4e f4       	brtc	.+18     	; 0x202e <__divmodsi4_exit>
    201c:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__negsi2>

00002020 <__divmodsi4_neg2>:
    2020:	50 95       	com	r21
    2022:	40 95       	com	r20
    2024:	30 95       	com	r19
    2026:	21 95       	neg	r18
    2028:	3f 4f       	sbci	r19, 0xFF	; 255
    202a:	4f 4f       	sbci	r20, 0xFF	; 255
    202c:	5f 4f       	sbci	r21, 0xFF	; 255

0000202e <__divmodsi4_exit>:
    202e:	08 95       	ret

00002030 <__negsi2>:
    2030:	90 95       	com	r25
    2032:	80 95       	com	r24
    2034:	70 95       	com	r23
    2036:	61 95       	neg	r22
    2038:	7f 4f       	sbci	r23, 0xFF	; 255
    203a:	8f 4f       	sbci	r24, 0xFF	; 255
    203c:	9f 4f       	sbci	r25, 0xFF	; 255
    203e:	08 95       	ret

00002040 <__udivmodsi4>:
    2040:	a1 e2       	ldi	r26, 0x21	; 33
    2042:	1a 2e       	mov	r1, r26
    2044:	aa 1b       	sub	r26, r26
    2046:	bb 1b       	sub	r27, r27
    2048:	fd 01       	movw	r30, r26
    204a:	0d c0       	rjmp	.+26     	; 0x2066 <__udivmodsi4_ep>

0000204c <__udivmodsi4_loop>:
    204c:	aa 1f       	adc	r26, r26
    204e:	bb 1f       	adc	r27, r27
    2050:	ee 1f       	adc	r30, r30
    2052:	ff 1f       	adc	r31, r31
    2054:	a2 17       	cp	r26, r18
    2056:	b3 07       	cpc	r27, r19
    2058:	e4 07       	cpc	r30, r20
    205a:	f5 07       	cpc	r31, r21
    205c:	20 f0       	brcs	.+8      	; 0x2066 <__udivmodsi4_ep>
    205e:	a2 1b       	sub	r26, r18
    2060:	b3 0b       	sbc	r27, r19
    2062:	e4 0b       	sbc	r30, r20
    2064:	f5 0b       	sbc	r31, r21

00002066 <__udivmodsi4_ep>:
    2066:	66 1f       	adc	r22, r22
    2068:	77 1f       	adc	r23, r23
    206a:	88 1f       	adc	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	1a 94       	dec	r1
    2070:	69 f7       	brne	.-38     	; 0x204c <__udivmodsi4_loop>
    2072:	60 95       	com	r22
    2074:	70 95       	com	r23
    2076:	80 95       	com	r24
    2078:	90 95       	com	r25
    207a:	9b 01       	movw	r18, r22
    207c:	ac 01       	movw	r20, r24
    207e:	bd 01       	movw	r22, r26
    2080:	cf 01       	movw	r24, r30
    2082:	08 95       	ret

00002084 <setjmp>:
    2084:	dc 01       	movw	r26, r24
    2086:	2d 92       	st	X+, r2
    2088:	3d 92       	st	X+, r3
    208a:	4d 92       	st	X+, r4
    208c:	5d 92       	st	X+, r5
    208e:	6d 92       	st	X+, r6
    2090:	7d 92       	st	X+, r7
    2092:	8d 92       	st	X+, r8
    2094:	9d 92       	st	X+, r9
    2096:	ad 92       	st	X+, r10
    2098:	bd 92       	st	X+, r11
    209a:	cd 92       	st	X+, r12
    209c:	dd 92       	st	X+, r13
    209e:	ed 92       	st	X+, r14
    20a0:	fd 92       	st	X+, r15
    20a2:	0d 93       	st	X+, r16
    20a4:	1d 93       	st	X+, r17
    20a6:	cd 93       	st	X+, r28
    20a8:	dd 93       	st	X+, r29
    20aa:	ff 91       	pop	r31
    20ac:	ef 91       	pop	r30
    20ae:	8d b7       	in	r24, 0x3d	; 61
    20b0:	8d 93       	st	X+, r24
    20b2:	8e b7       	in	r24, 0x3e	; 62
    20b4:	8d 93       	st	X+, r24
    20b6:	8f b7       	in	r24, 0x3f	; 63
    20b8:	8d 93       	st	X+, r24
    20ba:	ed 93       	st	X+, r30
    20bc:	fd 93       	st	X+, r31
    20be:	88 27       	eor	r24, r24
    20c0:	99 27       	eor	r25, r25
    20c2:	09 94       	ijmp

000020c4 <longjmp>:
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	81 30       	cpi	r24, 0x01	; 1
    20ca:	91 05       	cpc	r25, r1
    20cc:	81 1d       	adc	r24, r1
    20ce:	2d 90       	ld	r2, X+
    20d0:	3d 90       	ld	r3, X+
    20d2:	4d 90       	ld	r4, X+
    20d4:	5d 90       	ld	r5, X+
    20d6:	6d 90       	ld	r6, X+
    20d8:	7d 90       	ld	r7, X+
    20da:	8d 90       	ld	r8, X+
    20dc:	9d 90       	ld	r9, X+
    20de:	ad 90       	ld	r10, X+
    20e0:	bd 90       	ld	r11, X+
    20e2:	cd 90       	ld	r12, X+
    20e4:	dd 90       	ld	r13, X+
    20e6:	ed 90       	ld	r14, X+
    20e8:	fd 90       	ld	r15, X+
    20ea:	0d 91       	ld	r16, X+
    20ec:	1d 91       	ld	r17, X+
    20ee:	cd 91       	ld	r28, X+
    20f0:	dd 91       	ld	r29, X+
    20f2:	ed 91       	ld	r30, X+
    20f4:	fd 91       	ld	r31, X+
    20f6:	0d 90       	ld	r0, X+
    20f8:	f8 94       	cli
    20fa:	fe bf       	out	0x3e, r31	; 62
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	ed bf       	out	0x3d, r30	; 61
    2100:	ed 91       	ld	r30, X+
    2102:	fd 91       	ld	r31, X+
    2104:	09 94       	ijmp

00002106 <_exit>:
    2106:	f8 94       	cli

00002108 <__stop_program>:
    2108:	ff cf       	rjmp	.-2      	; 0x2108 <__stop_program>
