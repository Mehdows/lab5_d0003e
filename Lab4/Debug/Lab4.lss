
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00003236  000032ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003236  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  0080011c  0080011c  000032e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000032e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  00003358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fab  00000000  00000000  000035d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f0d  00000000  00000000  00005583  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001844  00000000  00000000  00006490  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ec4  00000000  00000000  00007cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000931  00000000  00000000  00008b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002150  00000000  00000000  000094c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  0000b619  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__vector_1>
       8:	0c 94 77 07 	jmp	0xeee	; 0xeee <__vector_2>
       c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__vector_3>
      10:	0c 94 87 08 	jmp	0x110e	; 0x110e <__vector_4>
      14:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__vector_9>
      28:	0c 94 97 09 	jmp	0x132e	; 0x132e <__vector_10>
      2c:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__vector_11>
      30:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__vector_12>
      34:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__vector_13>
      38:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_14>
      3c:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <__vector_15>
      40:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <__vector_16>
      44:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__vector_17>
      48:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <__vector_18>
      4c:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__vector_19>
      50:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__vector_20>
      54:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__vector_21>
      58:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e6 e3       	ldi	r30, 0x36	; 54
      70:	f2 e3       	ldi	r31, 0x32	; 50
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ac 31       	cpi	r26, 0x1C	; 28
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ac e1       	ldi	r26, 0x1C	; 28
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	af 36       	cpi	r26, 0x6F	; 111
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 ad 03 	call	0x75a	; 0x75a <main>
      92:	0c 94 19 19 	jmp	0x3232	; 0x3232 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <buttonInterrupt>:
 * Created: 2021-03-01 09:04:56
 *  Author: marcus
 */ 
#include "button.h"

void buttonInterrupt(button *this){
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	00 d0       	rcall	.+0      	; 0xac <buttonInterrupt+0x12>
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	9a 83       	std	Y+2, r25	; 0x02
      b2:	89 83       	std	Y+1, r24	; 0x01
	

	if (~PINB & (1 << 6)) { // Up
      b4:	83 e2       	ldi	r24, 0x23	; 35
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	fc 01       	movw	r30, r24
      ba:	80 81       	ld	r24, Z
      bc:	88 2f       	mov	r24, r24
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	80 74       	andi	r24, 0x40	; 64
      c2:	99 27       	eor	r25, r25
      c4:	89 2b       	or	r24, r25
      c6:	b9 f4       	brne	.+46     	; 0xf6 <buttonInterrupt+0x5c>
		ASYNC(this->Current, increment, NULL);
      c8:	89 81       	ldd	r24, Y+1	; 0x01
      ca:	9a 81       	ldd	r25, Y+2	; 0x02
      cc:	fc 01       	movw	r30, r24
      ce:	80 85       	ldd	r24, Z+8	; 0x08
      d0:	91 85       	ldd	r25, Z+9	; 0x09
      d2:	c1 2c       	mov	r12, r1
      d4:	d1 2c       	mov	r13, r1
      d6:	0f 2e       	mov	r0, r31
      d8:	ff e5       	ldi	r31, 0x5F	; 95
      da:	ef 2e       	mov	r14, r31
      dc:	f4 e0       	ldi	r31, 0x04	; 4
      de:	ff 2e       	mov	r15, r31
      e0:	f0 2d       	mov	r31, r0
      e2:	8c 01       	movw	r16, r24
      e4:	20 e0       	ldi	r18, 0x00	; 0
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	a9 01       	movw	r20, r18
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	70 e0       	ldi	r23, 0x00	; 0
      ee:	cb 01       	movw	r24, r22
      f0:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
      f4:	b3 c0       	rjmp	.+358    	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
	}
	else if (~PINB & (1 << 7)) { // Down
      f6:	83 e2       	ldi	r24, 0x23	; 35
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	fc 01       	movw	r30, r24
      fc:	80 81       	ld	r24, Z
      fe:	88 23       	and	r24, r24
     100:	bc f0       	brlt	.+46     	; 0x130 <buttonInterrupt+0x96>
		ASYNC(this->Current, decrement, NULL);
     102:	89 81       	ldd	r24, Y+1	; 0x01
     104:	9a 81       	ldd	r25, Y+2	; 0x02
     106:	fc 01       	movw	r30, r24
     108:	80 85       	ldd	r24, Z+8	; 0x08
     10a:	91 85       	ldd	r25, Z+9	; 0x09
     10c:	c1 2c       	mov	r12, r1
     10e:	d1 2c       	mov	r13, r1
     110:	0f 2e       	mov	r0, r31
     112:	f0 ee       	ldi	r31, 0xE0	; 224
     114:	ef 2e       	mov	r14, r31
     116:	f4 e0       	ldi	r31, 0x04	; 4
     118:	ff 2e       	mov	r15, r31
     11a:	f0 2d       	mov	r31, r0
     11c:	8c 01       	movw	r16, r24
     11e:	20 e0       	ldi	r18, 0x00	; 0
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	a9 01       	movw	r20, r18
     124:	60 e0       	ldi	r22, 0x00	; 0
     126:	70 e0       	ldi	r23, 0x00	; 0
     128:	cb 01       	movw	r24, r22
     12a:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
     12e:	96 c0       	rjmp	.+300    	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
	}
	else if (~PINB & (1 << 4)){ // middle
     130:	83 e2       	ldi	r24, 0x23	; 35
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	fc 01       	movw	r30, r24
     136:	80 81       	ld	r24, Z
     138:	88 2f       	mov	r24, r24
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	80 71       	andi	r24, 0x10	; 16
     13e:	99 27       	eor	r25, r25
     140:	89 2b       	or	r24, r25
     142:	b9 f4       	brne	.+46     	; 0x172 <buttonInterrupt+0xd8>
		ASYNC(this->Current, resetState, NULL);
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	9a 81       	ldd	r25, Y+2	; 0x02
     148:	fc 01       	movw	r30, r24
     14a:	80 85       	ldd	r24, Z+8	; 0x08
     14c:	91 85       	ldd	r25, Z+9	; 0x09
     14e:	c1 2c       	mov	r12, r1
     150:	d1 2c       	mov	r13, r1
     152:	0f 2e       	mov	r0, r31
     154:	f6 e4       	ldi	r31, 0x46	; 70
     156:	ef 2e       	mov	r14, r31
     158:	f5 e0       	ldi	r31, 0x05	; 5
     15a:	ff 2e       	mov	r15, r31
     15c:	f0 2d       	mov	r31, r0
     15e:	8c 01       	movw	r16, r24
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	a9 01       	movw	r20, r18
     166:	60 e0       	ldi	r22, 0x00	; 0
     168:	70 e0       	ldi	r23, 0x00	; 0
     16a:	cb 01       	movw	r24, r22
     16c:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
     170:	75 c0       	rjmp	.+234    	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
	}
	else if (~PINE & (1 << 3)){ // RIGHT
     172:	8c e2       	ldi	r24, 0x2C	; 44
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	fc 01       	movw	r30, r24
     178:	80 81       	ld	r24, Z
     17a:	88 2f       	mov	r24, r24
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	88 70       	andi	r24, 0x08	; 8
     180:	99 27       	eor	r25, r25
     182:	89 2b       	or	r24, r25
     184:	89 f5       	brne	.+98     	; 0x1e8 <buttonInterrupt+0x14e>
		if(this->Current == this->C1)ASYNC(this->Current->gui, GUIShift, 0);
     186:	89 81       	ldd	r24, Y+1	; 0x01
     188:	9a 81       	ldd	r25, Y+2	; 0x02
     18a:	fc 01       	movw	r30, r24
     18c:	20 85       	ldd	r18, Z+8	; 0x08
     18e:	31 85       	ldd	r19, Z+9	; 0x09
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	9a 81       	ldd	r25, Y+2	; 0x02
     194:	fc 01       	movw	r30, r24
     196:	84 81       	ldd	r24, Z+4	; 0x04
     198:	95 81       	ldd	r25, Z+5	; 0x05
     19a:	28 17       	cp	r18, r24
     19c:	39 07       	cpc	r19, r25
     19e:	c9 f4       	brne	.+50     	; 0x1d2 <buttonInterrupt+0x138>
     1a0:	89 81       	ldd	r24, Y+1	; 0x01
     1a2:	9a 81       	ldd	r25, Y+2	; 0x02
     1a4:	fc 01       	movw	r30, r24
     1a6:	80 85       	ldd	r24, Z+8	; 0x08
     1a8:	91 85       	ldd	r25, Z+9	; 0x09
     1aa:	fc 01       	movw	r30, r24
     1ac:	87 81       	ldd	r24, Z+7	; 0x07
     1ae:	90 85       	ldd	r25, Z+8	; 0x08
     1b0:	c1 2c       	mov	r12, r1
     1b2:	d1 2c       	mov	r13, r1
     1b4:	0f 2e       	mov	r0, r31
     1b6:	f0 e4       	ldi	r31, 0x40	; 64
     1b8:	ef 2e       	mov	r14, r31
     1ba:	f2 e0       	ldi	r31, 0x02	; 2
     1bc:	ff 2e       	mov	r15, r31
     1be:	f0 2d       	mov	r31, r0
     1c0:	8c 01       	movw	r16, r24
     1c2:	20 e0       	ldi	r18, 0x00	; 0
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	a9 01       	movw	r20, r18
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	cb 01       	movw	r24, r22
     1ce:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
		this->Current = this->C2;
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	9a 81       	ldd	r25, Y+2	; 0x02
     1d6:	fc 01       	movw	r30, r24
     1d8:	26 81       	ldd	r18, Z+6	; 0x06
     1da:	37 81       	ldd	r19, Z+7	; 0x07
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	9a 81       	ldd	r25, Y+2	; 0x02
     1e0:	fc 01       	movw	r30, r24
     1e2:	31 87       	std	Z+9, r19	; 0x09
     1e4:	20 87       	std	Z+8, r18	; 0x08
     1e6:	3a c0       	rjmp	.+116    	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
		
	}
	else if (~PINE & (1 << 2)){ //LEFT
     1e8:	8c e2       	ldi	r24, 0x2C	; 44
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	fc 01       	movw	r30, r24
     1ee:	80 81       	ld	r24, Z
     1f0:	88 2f       	mov	r24, r24
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	84 70       	andi	r24, 0x04	; 4
     1f6:	99 27       	eor	r25, r25
     1f8:	89 2b       	or	r24, r25
     1fa:	81 f5       	brne	.+96     	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
		if(this->Current == this->C2)ASYNC(this->Current->gui, GUIShift, 0);
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	9a 81       	ldd	r25, Y+2	; 0x02
     200:	fc 01       	movw	r30, r24
     202:	20 85       	ldd	r18, Z+8	; 0x08
     204:	31 85       	ldd	r19, Z+9	; 0x09
     206:	89 81       	ldd	r24, Y+1	; 0x01
     208:	9a 81       	ldd	r25, Y+2	; 0x02
     20a:	fc 01       	movw	r30, r24
     20c:	86 81       	ldd	r24, Z+6	; 0x06
     20e:	97 81       	ldd	r25, Z+7	; 0x07
     210:	28 17       	cp	r18, r24
     212:	39 07       	cpc	r19, r25
     214:	c9 f4       	brne	.+50     	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	9a 81       	ldd	r25, Y+2	; 0x02
     21a:	fc 01       	movw	r30, r24
     21c:	80 85       	ldd	r24, Z+8	; 0x08
     21e:	91 85       	ldd	r25, Z+9	; 0x09
     220:	fc 01       	movw	r30, r24
     222:	87 81       	ldd	r24, Z+7	; 0x07
     224:	90 85       	ldd	r25, Z+8	; 0x08
     226:	c1 2c       	mov	r12, r1
     228:	d1 2c       	mov	r13, r1
     22a:	0f 2e       	mov	r0, r31
     22c:	f0 e4       	ldi	r31, 0x40	; 64
     22e:	ef 2e       	mov	r14, r31
     230:	f2 e0       	ldi	r31, 0x02	; 2
     232:	ff 2e       	mov	r15, r31
     234:	f0 2d       	mov	r31, r0
     236:	8c 01       	movw	r16, r24
     238:	20 e0       	ldi	r18, 0x00	; 0
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	a9 01       	movw	r20, r18
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	cb 01       	movw	r24, r22
     244:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
		this->Current = this->C1;
     248:	89 81       	ldd	r24, Y+1	; 0x01
     24a:	9a 81       	ldd	r25, Y+2	; 0x02
     24c:	fc 01       	movw	r30, r24
     24e:	24 81       	ldd	r18, Z+4	; 0x04
     250:	35 81       	ldd	r19, Z+5	; 0x05
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	fc 01       	movw	r30, r24
     258:	31 87       	std	Z+9, r19	; 0x09
     25a:	20 87       	std	Z+8, r18	; 0x08
	}
	
	AFTER(MSEC(250), this->Current, hold, this);
     25c:	29 81       	ldd	r18, Y+1	; 0x01
     25e:	3a 81       	ldd	r19, Y+2	; 0x02
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	9a 81       	ldd	r25, Y+2	; 0x02
     264:	fc 01       	movw	r30, r24
     266:	80 85       	ldd	r24, Z+8	; 0x08
     268:	91 85       	ldd	r25, Z+9	; 0x09
     26a:	69 01       	movw	r12, r18
     26c:	0f 2e       	mov	r0, r31
     26e:	f6 ed       	ldi	r31, 0xD6	; 214
     270:	ef 2e       	mov	r14, r31
     272:	f5 e0       	ldi	r31, 0x05	; 5
     274:	ff 2e       	mov	r15, r31
     276:	f0 2d       	mov	r31, r0
     278:	8c 01       	movw	r16, r24
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	a9 01       	movw	r20, r18
     280:	64 e8       	ldi	r22, 0x84	; 132
     282:	7e e1       	ldi	r23, 0x1E	; 30
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
	
	
}
     28c:	00 00       	nop
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	1f 91       	pop	r17
     298:	0f 91       	pop	r16
     29a:	ff 90       	pop	r15
     29c:	ef 90       	pop	r14
     29e:	df 90       	pop	r13
     2a0:	cf 90       	pop	r12
     2a2:	08 95       	ret

000002a4 <init>:

void init(button *this){
     2a4:	cf 92       	push	r12
     2a6:	df 92       	push	r13
     2a8:	ef 92       	push	r14
     2aa:	ff 92       	push	r15
     2ac:	0f 93       	push	r16
     2ae:	1f 93       	push	r17
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <init+0x12>
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	9a 83       	std	Y+2, r25	; 0x02
     2bc:	89 83       	std	Y+1, r24	; 0x01
	
	ASYNC(this->C1->gui, updateGUI0, this->C1->state);
     2be:	89 81       	ldd	r24, Y+1	; 0x01
     2c0:	9a 81       	ldd	r25, Y+2	; 0x02
     2c2:	fc 01       	movw	r30, r24
     2c4:	84 81       	ldd	r24, Z+4	; 0x04
     2c6:	95 81       	ldd	r25, Z+5	; 0x05
     2c8:	fc 01       	movw	r30, r24
     2ca:	84 81       	ldd	r24, Z+4	; 0x04
     2cc:	28 2f       	mov	r18, r24
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	9a 81       	ldd	r25, Y+2	; 0x02
     2d4:	fc 01       	movw	r30, r24
     2d6:	84 81       	ldd	r24, Z+4	; 0x04
     2d8:	95 81       	ldd	r25, Z+5	; 0x05
     2da:	fc 01       	movw	r30, r24
     2dc:	87 81       	ldd	r24, Z+7	; 0x07
     2de:	90 85       	ldd	r25, Z+8	; 0x08
     2e0:	69 01       	movw	r12, r18
     2e2:	0f 2e       	mov	r0, r31
     2e4:	fa e0       	ldi	r31, 0x0A	; 10
     2e6:	ef 2e       	mov	r14, r31
     2e8:	f2 e0       	ldi	r31, 0x02	; 2
     2ea:	ff 2e       	mov	r15, r31
     2ec:	f0 2d       	mov	r31, r0
     2ee:	8c 01       	movw	r16, r24
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	a9 01       	movw	r20, r18
     2f6:	60 e0       	ldi	r22, 0x00	; 0
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	cb 01       	movw	r24, r22
     2fc:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
	ASYNC(this->C2->gui, updateGUI4, this->C2->state);
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	9a 81       	ldd	r25, Y+2	; 0x02
     304:	fc 01       	movw	r30, r24
     306:	86 81       	ldd	r24, Z+6	; 0x06
     308:	97 81       	ldd	r25, Z+7	; 0x07
     30a:	fc 01       	movw	r30, r24
     30c:	84 81       	ldd	r24, Z+4	; 0x04
     30e:	28 2f       	mov	r18, r24
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	9a 81       	ldd	r25, Y+2	; 0x02
     316:	fc 01       	movw	r30, r24
     318:	86 81       	ldd	r24, Z+6	; 0x06
     31a:	97 81       	ldd	r25, Z+7	; 0x07
     31c:	fc 01       	movw	r30, r24
     31e:	87 81       	ldd	r24, Z+7	; 0x07
     320:	90 85       	ldd	r25, Z+8	; 0x08
     322:	69 01       	movw	r12, r18
     324:	0f 2e       	mov	r0, r31
     326:	f5 e2       	ldi	r31, 0x25	; 37
     328:	ef 2e       	mov	r14, r31
     32a:	f2 e0       	ldi	r31, 0x02	; 2
     32c:	ff 2e       	mov	r15, r31
     32e:	f0 2d       	mov	r31, r0
     330:	8c 01       	movw	r16, r24
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	a9 01       	movw	r20, r18
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	cb 01       	movw	r24, r22
     33e:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
	initJoy();
     342:	0e 94 ba 01 	call	0x374	; 0x374 <initJoy>
	LCDInit();
     346:	0e 94 80 02 	call	0x500	; 0x500 <LCDInit>
	LCDDR18 = 0x0;
     34a:	8e ef       	ldi	r24, 0xFE	; 254
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	fc 01       	movw	r30, r24
     350:	10 82       	st	Z, r1
	LCDDR8 = 0x1;
     352:	84 ef       	ldi	r24, 0xF4	; 244
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	21 e0       	ldi	r18, 0x01	; 1
     358:	fc 01       	movw	r30, r24
     35a:	20 83       	st	Z, r18
}
     35c:	00 00       	nop
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	ff 90       	pop	r15
     36c:	ef 90       	pop	r14
     36e:	df 90       	pop	r13
     370:	cf 90       	pop	r12
     372:	08 95       	ret

00000374 <initJoy>:

void initJoy(){
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
	DDRB = DDRB & ~((1<<7) | (1<<6) | (1<<4));
     37c:	84 e2       	ldi	r24, 0x24	; 36
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	24 e2       	ldi	r18, 0x24	; 36
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	f9 01       	movw	r30, r18
     386:	20 81       	ld	r18, Z
     388:	2f 72       	andi	r18, 0x2F	; 47
     38a:	fc 01       	movw	r30, r24
     38c:	20 83       	st	Z, r18
	DDRE = DDRE & ~((1<<2) | (1<<3));
     38e:	8d e2       	ldi	r24, 0x2D	; 45
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	2d e2       	ldi	r18, 0x2D	; 45
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	f9 01       	movw	r30, r18
     398:	20 81       	ld	r18, Z
     39a:	23 7f       	andi	r18, 0xF3	; 243
     39c:	fc 01       	movw	r30, r24
     39e:	20 83       	st	Z, r18
	PORTB = PORTB | ((1<<7) | (1<<6) | (1<<4));
     3a0:	85 e2       	ldi	r24, 0x25	; 37
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	25 e2       	ldi	r18, 0x25	; 37
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	f9 01       	movw	r30, r18
     3aa:	20 81       	ld	r18, Z
     3ac:	20 6d       	ori	r18, 0xD0	; 208
     3ae:	fc 01       	movw	r30, r24
     3b0:	20 83       	st	Z, r18
	PORTE = PORTE | ((1<<2) | (1<<3));
     3b2:	8e e2       	ldi	r24, 0x2E	; 46
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	2e e2       	ldi	r18, 0x2E	; 46
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	f9 01       	movw	r30, r18
     3bc:	20 81       	ld	r18, Z
     3be:	2c 60       	ori	r18, 0x0C	; 12
     3c0:	fc 01       	movw	r30, r24
     3c2:	20 83       	st	Z, r18
	
	// Enables external interrupt and sets the interrupt to PCINT15..8
	EIMSK |= (1 << PCIE1) | (1 << PCIE0);
     3c4:	8d e3       	ldi	r24, 0x3D	; 61
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	2d e3       	ldi	r18, 0x3D	; 61
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	f9 01       	movw	r30, r18
     3ce:	20 81       	ld	r18, Z
     3d0:	20 6c       	ori	r18, 0xC0	; 192
     3d2:	fc 01       	movw	r30, r24
     3d4:	20 83       	st	Z, r18
	
	// Enables interrupt on PCINT15
	PCMSK1 |= (1 << PCINT15)|(1 << PCINT14)|(1 << PCINT12);
     3d6:	8c e6       	ldi	r24, 0x6C	; 108
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	2c e6       	ldi	r18, 0x6C	; 108
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	f9 01       	movw	r30, r18
     3e0:	20 81       	ld	r18, Z
     3e2:	20 6d       	ori	r18, 0xD0	; 208
     3e4:	fc 01       	movw	r30, r24
     3e6:	20 83       	st	Z, r18
	PCMSK0 |= (1 << PCINT3)|(1 << PCINT2);
     3e8:	8b e6       	ldi	r24, 0x6B	; 107
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	2b e6       	ldi	r18, 0x6B	; 107
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	f9 01       	movw	r30, r18
     3f2:	20 81       	ld	r18, Z
     3f4:	2c 60       	ori	r18, 0x0C	; 12
     3f6:	fc 01       	movw	r30, r24
     3f8:	20 83       	st	Z, r18
	
	// Sets interrupt control to generate an interruption on a falling edge
	EICRA |= (1 << ISC01);
     3fa:	89 e6       	ldi	r24, 0x69	; 105
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	29 e6       	ldi	r18, 0x69	; 105
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	f9 01       	movw	r30, r18
     404:	20 81       	ld	r18, Z
     406:	22 60       	ori	r18, 0x02	; 2
     408:	fc 01       	movw	r30, r24
     40a:	20 83       	st	Z, r18
	
	
     40c:	00 00       	nop
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <updateGUI0>:
 *
 * Created: 2021-03-03 11:31:24
 *  Author: marcu
 */ 
#include "GUI.h"
void updateGUI0(GUI *this, uint8_t state){
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	00 d0       	rcall	.+0      	; 0x41a <updateGUI0+0x6>
     41a:	1f 92       	push	r1
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	9a 83       	std	Y+2, r25	; 0x02
     422:	89 83       	std	Y+1, r24	; 0x01
     424:	6b 83       	std	Y+3, r22	; 0x03
	printAt(state, 0);
     426:	8b 81       	ldd	r24, Y+3	; 0x03
     428:	88 2f       	mov	r24, r24
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	a0 e0       	ldi	r26, 0x00	; 0
     42e:	b0 e0       	ldi	r27, 0x00	; 0
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	bc 01       	movw	r22, r24
     436:	cd 01       	movw	r24, r26
     438:	0e 94 30 03 	call	0x660	; 0x660 <printAt>
}
     43c:	00 00       	nop
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <updateGUI4>:

void updateGUI4(GUI *this, uint8_t state){
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	00 d0       	rcall	.+0      	; 0x450 <updateGUI4+0x6>
     450:	1f 92       	push	r1
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	9a 83       	std	Y+2, r25	; 0x02
     458:	89 83       	std	Y+1, r24	; 0x01
     45a:	6b 83       	std	Y+3, r22	; 0x03
	printAt(state, 4);
     45c:	8b 81       	ldd	r24, Y+3	; 0x03
     45e:	88 2f       	mov	r24, r24
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	a0 e0       	ldi	r26, 0x00	; 0
     464:	b0 e0       	ldi	r27, 0x00	; 0
     466:	44 e0       	ldi	r20, 0x04	; 4
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	bc 01       	movw	r22, r24
     46c:	cd 01       	movw	r24, r26
     46e:	0e 94 30 03 	call	0x660	; 0x660 <printAt>
}
     472:	00 00       	nop
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <GUIShift>:

void GUIShift(GUI *this){
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	00 d0       	rcall	.+0      	; 0x486 <GUIShift+0x6>
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
     48a:	9a 83       	std	Y+2, r25	; 0x02
     48c:	89 83       	std	Y+1, r24	; 0x01
	if (this->on){
     48e:	89 81       	ldd	r24, Y+1	; 0x01
     490:	9a 81       	ldd	r25, Y+2	; 0x02
     492:	fc 01       	movw	r30, r24
     494:	84 81       	ldd	r24, Z+4	; 0x04
     496:	88 23       	and	r24, r24
     498:	b9 f0       	breq	.+46     	; 0x4c8 <GUIShift+0x48>
		this->on = !this->on;
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	9a 81       	ldd	r25, Y+2	; 0x02
     49e:	fc 01       	movw	r30, r24
     4a0:	84 81       	ldd	r24, Z+4	; 0x04
     4a2:	88 2f       	mov	r24, r24
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	89 2b       	or	r24, r25
     4aa:	09 f4       	brne	.+2      	; 0x4ae <GUIShift+0x2e>
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	82 27       	eor	r24, r18
     4b2:	88 2f       	mov	r24, r24
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	28 2f       	mov	r18, r24
     4b8:	21 70       	andi	r18, 0x01	; 1
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	9a 81       	ldd	r25, Y+2	; 0x02
     4be:	fc 01       	movw	r30, r24
     4c0:	24 83       	std	Z+4, r18	; 0x04
		shiftLightsR();
     4c2:	0e 94 8b 03 	call	0x716	; 0x716 <shiftLightsR>
	}
	else{
		this->on = !this->on;
		shiftLightsL();
	}
     4c6:	16 c0       	rjmp	.+44     	; 0x4f4 <GUIShift+0x74>
	if (this->on){
		this->on = !this->on;
		shiftLightsR();
	}
	else{
		this->on = !this->on;
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	9a 81       	ldd	r25, Y+2	; 0x02
     4cc:	fc 01       	movw	r30, r24
     4ce:	84 81       	ldd	r24, Z+4	; 0x04
     4d0:	88 2f       	mov	r24, r24
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	21 e0       	ldi	r18, 0x01	; 1
     4d6:	89 2b       	or	r24, r25
     4d8:	09 f4       	brne	.+2      	; 0x4dc <GUIShift+0x5c>
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	82 27       	eor	r24, r18
     4e0:	88 2f       	mov	r24, r24
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	28 2f       	mov	r18, r24
     4e6:	21 70       	andi	r18, 0x01	; 1
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	9a 81       	ldd	r25, Y+2	; 0x02
     4ec:	fc 01       	movw	r30, r24
     4ee:	24 83       	std	Z+4, r18	; 0x04
		shiftLightsL();
     4f0:	0e 94 9c 03 	call	0x738	; 0x738 <shiftLightsL>
	}
     4f4:	00 00       	nop
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <LCDInit>:
 * Created: 2021-02-27 11:07:23
 *  Author: marcu
 */ 
#include "LCDprint.h"

void LCDInit(void) {
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
	
	/* Lowpower Waveform, no frame interrupt, no blanking. LCD Enable*/
	LCDCRA = (1 << LCDAB) | (1 << LCDEN);
     508:	84 ee       	ldi	r24, 0xE4	; 228
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	20 ec       	ldi	r18, 0xC0	; 192
     50e:	fc 01       	movw	r30, r24
     510:	20 83       	st	Z, r18
	
	/* 300 microseconds & voltage 3.35 V.*/
	LCDCCR = (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
     512:	87 ee       	ldi	r24, 0xE7	; 231
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	2f e0       	ldi	r18, 0x0F	; 15
     518:	fc 01       	movw	r30, r24
     51a:	20 83       	st	Z, r18
	
	/* 1/3 bias, 1/4 duty cycle, 25 segments.*/
	LCDCRB = (1 << LCDCS) | (1<< LCDMUX0) | (1<< LCDMUX1) | (1 <<LCDPM0) | (1 <<LCDPM1) | (1 <<LCDPM2);
     51c:	85 ee       	ldi	r24, 0xE5	; 229
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	27 eb       	ldi	r18, 0xB7	; 183
     522:	fc 01       	movw	r30, r24
     524:	20 83       	st	Z, r18
	
	/* N=16 & D=8 */
	LCDFRR = (1 << LCDCD0) | (1 << LCDCD1) | (1 << LCDCD2);
     526:	86 ee       	ldi	r24, 0xE6	; 230
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	27 e0       	ldi	r18, 0x07	; 7
     52c:	fc 01       	movw	r30, r24
     52e:	20 83       	st	Z, r18

}
     530:	00 00       	nop
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <writeChar>:

//Writes character ch on position pos
void writeChar(char ch, int pos){
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	6f 97       	sbiw	r28, 0x1f	; 31
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	f8 94       	cli
     546:	de bf       	out	0x3e, r29	; 62
     548:	0f be       	out	0x3f, r0	; 63
     54a:	cd bf       	out	0x3d, r28	; 61
     54c:	8d 8f       	std	Y+29, r24	; 0x1d
     54e:	7f 8f       	std	Y+31, r23	; 0x1f
     550:	6e 8f       	std	Y+30, r22	; 0x1e
	// The start address on the LCD
	uint8_t *lcdAdress = (uint8_t *) 0xec;
     552:	8c ee       	ldi	r24, 0xEC	; 236
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	9a 83       	std	Y+2, r25	; 0x02
     558:	89 83       	std	Y+1, r24	; 0x01
	
	// To get the nibble
	uint8_t mask;
	
	// Sent to LCD
	uint8_t nibble = 0x0;
     55a:	1c 82       	std	Y+4, r1	; 0x04
	
	//The numbers from 0-9
	uint16_t sccNumbers[10] = {0x1551, 0x0110, 0x1e11, 0x1b11, 0x0b50, 0x1b41, 0x1f41, 0x0111, 0x1f51, 0x0b51};
     55c:	84 e1       	ldi	r24, 0x14	; 20
     55e:	e8 e0       	ldi	r30, 0x08	; 8
     560:	f1 e0       	ldi	r31, 0x01	; 1
     562:	de 01       	movw	r26, r28
     564:	19 96       	adiw	r26, 0x09	; 9
     566:	01 90       	ld	r0, Z+
     568:	0d 92       	st	X+, r0
     56a:	8a 95       	dec	r24
     56c:	e1 f7       	brne	.-8      	; 0x566 <writeChar+0x2e>
	
	
	//input char within range
	if (pos<0 || pos > 5){
     56e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     570:	9f 8d       	ldd	r25, Y+31	; 0x1f
     572:	99 23       	and	r25, r25
     574:	0c f4       	brge	.+2      	; 0x578 <writeChar+0x40>
     576:	6a c0       	rjmp	.+212    	; 0x64c <writeChar+0x114>
     578:	8e 8d       	ldd	r24, Y+30	; 0x1e
     57a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     57c:	06 97       	sbiw	r24, 0x06	; 6
     57e:	0c f0       	brlt	.+2      	; 0x582 <writeChar+0x4a>
     580:	65 c0       	rjmp	.+202    	; 0x64c <writeChar+0x114>
		return;
	}
	
	//The number to use
	uint16_t nr = 0x0;
     582:	1e 82       	std	Y+6, r1	; 0x06
     584:	1d 82       	std	Y+5, r1	; 0x05
	
	//Lookup LCD segment control code (SCC) in LCD character table
	if(ch>= '0' || ch <= '9'){
     586:	8d 8d       	ldd	r24, Y+29	; 0x1d
     588:	80 33       	cpi	r24, 0x30	; 48
     58a:	18 f4       	brcc	.+6      	; 0x592 <writeChar+0x5a>
     58c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     58e:	8a 33       	cpi	r24, 0x3A	; 58
     590:	88 f4       	brcc	.+34     	; 0x5b4 <writeChar+0x7c>
		
		// Get the number from our array (sub with zero because its the first in the ascii table)
		nr = sccNumbers[ch - '0'];
     592:	8d 8d       	ldd	r24, Y+29	; 0x1d
     594:	88 2f       	mov	r24, r24
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	c0 97       	sbiw	r24, 0x30	; 48
     59a:	88 0f       	add	r24, r24
     59c:	99 1f       	adc	r25, r25
     59e:	9e 01       	movw	r18, r28
     5a0:	2f 5f       	subi	r18, 0xFF	; 255
     5a2:	3f 4f       	sbci	r19, 0xFF	; 255
     5a4:	82 0f       	add	r24, r18
     5a6:	93 1f       	adc	r25, r19
     5a8:	08 96       	adiw	r24, 0x08	; 8
     5aa:	fc 01       	movw	r30, r24
     5ac:	80 81       	ld	r24, Z
     5ae:	91 81       	ldd	r25, Z+1	; 0x01
     5b0:	9e 83       	std	Y+6, r25	; 0x06
     5b2:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	//Point to the right position
	lcdAdress += pos >> 1;
     5b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     5b8:	95 95       	asr	r25
     5ba:	87 95       	ror	r24
     5bc:	9c 01       	movw	r18, r24
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	9a 81       	ldd	r25, Y+2	; 0x02
     5c2:	82 0f       	add	r24, r18
     5c4:	93 1f       	adc	r25, r19
     5c6:	9a 83       	std	Y+2, r25	; 0x02
     5c8:	89 83       	std	Y+1, r24	; 0x01
	
	if(pos % 2 == 0){
     5ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5cc:	9f 8d       	ldd	r25, Y+31	; 0x1f
     5ce:	81 70       	andi	r24, 0x01	; 1
     5d0:	99 27       	eor	r25, r25
     5d2:	89 2b       	or	r24, r25
     5d4:	19 f4       	brne	.+6      	; 0x5dc <writeChar+0xa4>
		mask = 0xf0;
     5d6:	80 ef       	ldi	r24, 0xF0	; 240
     5d8:	8b 83       	std	Y+3, r24	; 0x03
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <writeChar+0xa8>
	}
	else {
		mask = 0x0f;
     5dc:	8f e0       	ldi	r24, 0x0F	; 15
     5de:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	for(int i = 0; i < 4; i++){
     5e0:	18 86       	std	Y+8, r1	; 0x08
     5e2:	1f 82       	std	Y+7, r1	; 0x07
     5e4:	2e c0       	rjmp	.+92     	; 0x642 <writeChar+0x10a>
		
		nibble = nr & 0xf;
     5e6:	8d 81       	ldd	r24, Y+5	; 0x05
     5e8:	8f 70       	andi	r24, 0x0F	; 15
     5ea:	8c 83       	std	Y+4, r24	; 0x04
		nr = nr >> 4;
     5ec:	8d 81       	ldd	r24, Y+5	; 0x05
     5ee:	9e 81       	ldd	r25, Y+6	; 0x06
     5f0:	92 95       	swap	r25
     5f2:	82 95       	swap	r24
     5f4:	8f 70       	andi	r24, 0x0F	; 15
     5f6:	89 27       	eor	r24, r25
     5f8:	9f 70       	andi	r25, 0x0F	; 15
     5fa:	89 27       	eor	r24, r25
     5fc:	9e 83       	std	Y+6, r25	; 0x06
     5fe:	8d 83       	std	Y+5, r24	; 0x05
		
		if(pos % 2 != 0){
     600:	8e 8d       	ldd	r24, Y+30	; 0x1e
     602:	9f 8d       	ldd	r25, Y+31	; 0x1f
     604:	81 70       	andi	r24, 0x01	; 1
     606:	99 27       	eor	r25, r25
     608:	89 2b       	or	r24, r25
     60a:	21 f0       	breq	.+8      	; 0x614 <writeChar+0xdc>
			nibble = nibble << 4;
     60c:	8c 81       	ldd	r24, Y+4	; 0x04
     60e:	82 95       	swap	r24
     610:	80 7f       	andi	r24, 0xF0	; 240
     612:	8c 83       	std	Y+4, r24	; 0x04
		}
		
		*lcdAdress = (*lcdAdress & mask) | nibble;
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	9a 81       	ldd	r25, Y+2	; 0x02
     618:	fc 01       	movw	r30, r24
     61a:	90 81       	ld	r25, Z
     61c:	8b 81       	ldd	r24, Y+3	; 0x03
     61e:	98 23       	and	r25, r24
     620:	8c 81       	ldd	r24, Y+4	; 0x04
     622:	29 2f       	mov	r18, r25
     624:	28 2b       	or	r18, r24
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	9a 81       	ldd	r25, Y+2	; 0x02
     62a:	fc 01       	movw	r30, r24
     62c:	20 83       	st	Z, r18
		
		lcdAdress += 5;
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	9a 81       	ldd	r25, Y+2	; 0x02
     632:	05 96       	adiw	r24, 0x05	; 5
     634:	9a 83       	std	Y+2, r25	; 0x02
     636:	89 83       	std	Y+1, r24	; 0x01
	}
	else {
		mask = 0x0f;
	}
	
	for(int i = 0; i < 4; i++){
     638:	8f 81       	ldd	r24, Y+7	; 0x07
     63a:	98 85       	ldd	r25, Y+8	; 0x08
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	98 87       	std	Y+8, r25	; 0x08
     640:	8f 83       	std	Y+7, r24	; 0x07
     642:	8f 81       	ldd	r24, Y+7	; 0x07
     644:	98 85       	ldd	r25, Y+8	; 0x08
     646:	04 97       	sbiw	r24, 0x04	; 4
     648:	74 f2       	brlt	.-100    	; 0x5e6 <writeChar+0xae>
     64a:	01 c0       	rjmp	.+2      	; 0x64e <writeChar+0x116>
	uint16_t sccNumbers[10] = {0x1551, 0x0110, 0x1e11, 0x1b11, 0x0b50, 0x1b41, 0x1f41, 0x0111, 0x1f51, 0x0b51};
	
	
	//input char within range
	if (pos<0 || pos > 5){
		return;
     64c:	00 00       	nop
		
		lcdAdress += 5;
		
	}
	
}
     64e:	6f 96       	adiw	r28, 0x1f	; 31
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret

00000660 <printAt>:
void printAt(long num, int pos) {
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
     668:	28 97       	sbiw	r28, 0x08	; 8
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	6b 83       	std	Y+3, r22	; 0x03
     676:	7c 83       	std	Y+4, r23	; 0x04
     678:	8d 83       	std	Y+5, r24	; 0x05
     67a:	9e 83       	std	Y+6, r25	; 0x06
     67c:	58 87       	std	Y+8, r21	; 0x08
     67e:	4f 83       	std	Y+7, r20	; 0x07
	int pp = 0;
     680:	1a 82       	std	Y+2, r1	; 0x02
     682:	19 82       	std	Y+1, r1	; 0x01
	pp = pos;
     684:	8f 81       	ldd	r24, Y+7	; 0x07
     686:	98 85       	ldd	r25, Y+8	; 0x08
     688:	9a 83       	std	Y+2, r25	; 0x02
     68a:	89 83       	std	Y+1, r24	; 0x01
	writeChar( (num % 100) / 10 + '0', pp);
     68c:	8b 81       	ldd	r24, Y+3	; 0x03
     68e:	9c 81       	ldd	r25, Y+4	; 0x04
     690:	ad 81       	ldd	r26, Y+5	; 0x05
     692:	be 81       	ldd	r27, Y+6	; 0x06
     694:	24 e6       	ldi	r18, 0x64	; 100
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	bc 01       	movw	r22, r24
     69e:	cd 01       	movw	r24, r26
     6a0:	0e 94 7d 18 	call	0x30fa	; 0x30fa <__divmodsi4>
     6a4:	dc 01       	movw	r26, r24
     6a6:	cb 01       	movw	r24, r22
     6a8:	2a e0       	ldi	r18, 0x0A	; 10
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	40 e0       	ldi	r20, 0x00	; 0
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	bc 01       	movw	r22, r24
     6b2:	cd 01       	movw	r24, r26
     6b4:	0e 94 7d 18 	call	0x30fa	; 0x30fa <__divmodsi4>
     6b8:	da 01       	movw	r26, r20
     6ba:	c9 01       	movw	r24, r18
     6bc:	20 e3       	ldi	r18, 0x30	; 48
     6be:	28 0f       	add	r18, r24
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	9a 81       	ldd	r25, Y+2	; 0x02
     6c4:	bc 01       	movw	r22, r24
     6c6:	82 2f       	mov	r24, r18
     6c8:	0e 94 9c 02 	call	0x538	; 0x538 <writeChar>
	pp++;
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	9a 81       	ldd	r25, Y+2	; 0x02
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	9a 83       	std	Y+2, r25	; 0x02
     6d4:	89 83       	std	Y+1, r24	; 0x01

	writeChar( num % 10 + '0', pp);
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	9c 81       	ldd	r25, Y+4	; 0x04
     6da:	ad 81       	ldd	r26, Y+5	; 0x05
     6dc:	be 81       	ldd	r27, Y+6	; 0x06
     6de:	2a e0       	ldi	r18, 0x0A	; 10
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	40 e0       	ldi	r20, 0x00	; 0
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	bc 01       	movw	r22, r24
     6e8:	cd 01       	movw	r24, r26
     6ea:	0e 94 7d 18 	call	0x30fa	; 0x30fa <__divmodsi4>
     6ee:	dc 01       	movw	r26, r24
     6f0:	cb 01       	movw	r24, r22
     6f2:	20 e3       	ldi	r18, 0x30	; 48
     6f4:	28 0f       	add	r18, r24
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	9a 81       	ldd	r25, Y+2	; 0x02
     6fa:	bc 01       	movw	r22, r24
     6fc:	82 2f       	mov	r24, r18
     6fe:	0e 94 9c 02 	call	0x538	; 0x538 <writeChar>
}
     702:	00 00       	nop
     704:	28 96       	adiw	r28, 0x08	; 8
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	de bf       	out	0x3e, r29	; 62
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <shiftLightsR>:

void shiftLightsR(){
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
	LCDDR18 = 0x0;
     71e:	8e ef       	ldi	r24, 0xFE	; 254
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	fc 01       	movw	r30, r24
     724:	10 82       	st	Z, r1
	LCDDR8 = 0x1;
     726:	84 ef       	ldi	r24, 0xF4	; 244
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	21 e0       	ldi	r18, 0x01	; 1
     72c:	fc 01       	movw	r30, r24
     72e:	20 83       	st	Z, r18
}
     730:	00 00       	nop
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	08 95       	ret

00000738 <shiftLightsL>:

void shiftLightsL(){
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
	LCDDR18 = 0x1;
     740:	8e ef       	ldi	r24, 0xFE	; 254
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	21 e0       	ldi	r18, 0x01	; 1
     746:	fc 01       	movw	r30, r24
     748:	20 83       	st	Z, r18
	LCDDR8 = 0x0;
     74a:	84 ef       	ldi	r24, 0xF4	; 244
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	fc 01       	movw	r30, r24
     750:	10 82       	st	Z, r1
}
     752:	00 00       	nop
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <main>:
#include "LCDprint.h"
#include "button.h"
#include "PulseCounter.h"

int main(void)
{
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	af 97       	sbiw	r28, 0x2f	; 47
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	de bf       	out	0x3e, r29	; 62
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	cd bf       	out	0x3d, r28	; 61
	Port port = initPort();
     76e:	1a 82       	std	Y+2, r1	; 0x02
     770:	19 82       	std	Y+1, r1	; 0x01
     772:	1c 82       	std	Y+4, r1	; 0x04
     774:	1b 82       	std	Y+3, r1	; 0x03
	GUI gui = initGUI();
     776:	1e 82       	std	Y+6, r1	; 0x06
     778:	1d 82       	std	Y+5, r1	; 0x05
     77a:	18 86       	std	Y+8, r1	; 0x08
     77c:	1f 82       	std	Y+7, r1	; 0x07
     77e:	19 86       	std	Y+9, r1	; 0x09
	
	PulseCounter p1 = InitPulseCounter(0, 4, &port, &gui);
     780:	1b 86       	std	Y+11, r1	; 0x0b
     782:	1a 86       	std	Y+10, r1	; 0x0a
     784:	1d 86       	std	Y+13, r1	; 0x0d
     786:	1c 86       	std	Y+12, r1	; 0x0c
     788:	1e 86       	std	Y+14, r1	; 0x0e
     78a:	1f 86       	std	Y+15, r1	; 0x0f
     78c:	18 8a       	std	Y+16, r1	; 0x10
     78e:	ce 01       	movw	r24, r28
     790:	05 96       	adiw	r24, 0x05	; 5
     792:	9a 8b       	std	Y+18, r25	; 0x12
     794:	89 8b       	std	Y+17, r24	; 0x11
     796:	1b 8a       	std	Y+19, r1	; 0x13
     798:	84 e0       	ldi	r24, 0x04	; 4
     79a:	8c 8b       	std	Y+20, r24	; 0x14
     79c:	ce 01       	movw	r24, r28
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	9e 8b       	std	Y+22, r25	; 0x16
     7a2:	8d 8b       	std	Y+21, r24	; 0x15
     7a4:	1f 8a       	std	Y+23, r1	; 0x17
	PulseCounter p2 = InitPulseCounter(4, 6, &port, &gui);
     7a6:	19 8e       	std	Y+25, r1	; 0x19
     7a8:	18 8e       	std	Y+24, r1	; 0x18
     7aa:	1b 8e       	std	Y+27, r1	; 0x1b
     7ac:	1a 8e       	std	Y+26, r1	; 0x1a
     7ae:	1c 8e       	std	Y+28, r1	; 0x1c
     7b0:	1d 8e       	std	Y+29, r1	; 0x1d
     7b2:	1e 8e       	std	Y+30, r1	; 0x1e
     7b4:	ce 01       	movw	r24, r28
     7b6:	05 96       	adiw	r24, 0x05	; 5
     7b8:	98 a3       	std	Y+32, r25	; 0x20
     7ba:	8f 8f       	std	Y+31, r24	; 0x1f
     7bc:	84 e0       	ldi	r24, 0x04	; 4
     7be:	89 a3       	std	Y+33, r24	; 0x21
     7c0:	86 e0       	ldi	r24, 0x06	; 6
     7c2:	8a a3       	std	Y+34, r24	; 0x22
     7c4:	ce 01       	movw	r24, r28
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	9c a3       	std	Y+36, r25	; 0x24
     7ca:	8b a3       	std	Y+35, r24	; 0x23
     7cc:	1d a2       	std	Y+37, r1	; 0x25
	
	button b = initButton(&p1, &p2);
     7ce:	1f a2       	std	Y+39, r1	; 0x27
     7d0:	1e a2       	std	Y+38, r1	; 0x26
     7d2:	19 a6       	std	Y+41, r1	; 0x29
     7d4:	18 a6       	std	Y+40, r1	; 0x28
     7d6:	ce 01       	movw	r24, r28
     7d8:	0a 96       	adiw	r24, 0x0a	; 10
     7da:	9b a7       	std	Y+43, r25	; 0x2b
     7dc:	8a a7       	std	Y+42, r24	; 0x2a
     7de:	ce 01       	movw	r24, r28
     7e0:	48 96       	adiw	r24, 0x18	; 24
     7e2:	9d a7       	std	Y+45, r25	; 0x2d
     7e4:	8c a7       	std	Y+44, r24	; 0x2c
     7e6:	ce 01       	movw	r24, r28
     7e8:	0a 96       	adiw	r24, 0x0a	; 10
     7ea:	9f a7       	std	Y+47, r25	; 0x2f
     7ec:	8e a7       	std	Y+46, r24	; 0x2e
	
	INSTALL(&b, buttonInterrupt, IRQ_PCINT0);
     7ee:	ce 01       	movw	r24, r28
     7f0:	86 96       	adiw	r24, 0x26	; 38
     7f2:	41 e0       	ldi	r20, 0x01	; 1
     7f4:	6d e4       	ldi	r22, 0x4D	; 77
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <install>
	INSTALL(&b, buttonInterrupt, IRQ_PCINT1);
     7fc:	ce 01       	movw	r24, r28
     7fe:	86 96       	adiw	r24, 0x26	; 38
     800:	42 e0       	ldi	r20, 0x02	; 2
     802:	6d e4       	ldi	r22, 0x4D	; 77
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <install>
	
	return TINYTIMBER(&b, init, 0);
     80a:	ce 01       	movw	r24, r28
     80c:	86 96       	adiw	r24, 0x26	; 38
     80e:	40 e0       	ldi	r20, 0x00	; 0
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	62 e5       	ldi	r22, 0x52	; 82
     814:	71 e0       	ldi	r23, 0x01	; 1
     816:	0e 94 2e 18 	call	0x305c	; 0x305c <tinytimber>
	
}
     81a:	af 96       	adiw	r28, 0x2f	; 47
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <invertPort>:
 * Created: 2021-03-03 15:08:05
 *  Author: marcu
 */ 
#include "Port.h"

void invertPort(Port *this, uint8_t port){
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	00 d0       	rcall	.+0      	; 0x832 <invertPort+0x6>
     832:	1f 92       	push	r1
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	9a 83       	std	Y+2, r25	; 0x02
     83a:	89 83       	std	Y+1, r24	; 0x01
     83c:	6b 83       	std	Y+3, r22	; 0x03
	PORTE ^= (1<<port);
     83e:	8e e2       	ldi	r24, 0x2E	; 46
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	2e e2       	ldi	r18, 0x2E	; 46
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	f9 01       	movw	r30, r18
     848:	20 81       	ld	r18, Z
     84a:	62 2f       	mov	r22, r18
     84c:	2b 81       	ldd	r18, Y+3	; 0x03
     84e:	42 2f       	mov	r20, r18
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	21 e0       	ldi	r18, 0x01	; 1
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	02 c0       	rjmp	.+4      	; 0x85c <invertPort+0x30>
     858:	22 0f       	add	r18, r18
     85a:	33 1f       	adc	r19, r19
     85c:	4a 95       	dec	r20
     85e:	e2 f7       	brpl	.-8      	; 0x858 <invertPort+0x2c>
     860:	26 27       	eor	r18, r22
     862:	fc 01       	movw	r30, r24
     864:	20 83       	st	Z, r18
}
     866:	00 00       	nop
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <resetPort>:
void resetPort(Port *this, uint8_t port){
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	00 d0       	rcall	.+0      	; 0x87a <resetPort+0x6>
     87a:	1f 92       	push	r1
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	9a 83       	std	Y+2, r25	; 0x02
     882:	89 83       	std	Y+1, r24	; 0x01
     884:	6b 83       	std	Y+3, r22	; 0x03
	PORTE &= ~(1<<port);
     886:	8e e2       	ldi	r24, 0x2E	; 46
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	2e e2       	ldi	r18, 0x2E	; 46
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	f9 01       	movw	r30, r18
     890:	20 81       	ld	r18, Z
     892:	62 2f       	mov	r22, r18
     894:	2b 81       	ldd	r18, Y+3	; 0x03
     896:	42 2f       	mov	r20, r18
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	21 e0       	ldi	r18, 0x01	; 1
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <resetPort+0x30>
     8a0:	22 0f       	add	r18, r18
     8a2:	33 1f       	adc	r19, r19
     8a4:	4a 95       	dec	r20
     8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <resetPort+0x2c>
     8a8:	20 95       	com	r18
     8aa:	26 23       	and	r18, r22
     8ac:	fc 01       	movw	r30, r24
     8ae:	20 83       	st	Z, r18
     8b0:	00 00       	nop
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <increment>:
 *
 * Created: 2021-03-02 10:11:04
 *  Author: marcu
 */ 
 #include "PulseCounter.h"
 void increment(PulseCounter *this){
     8be:	cf 92       	push	r12
     8c0:	df 92       	push	r13
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	00 d0       	rcall	.+0      	; 0x8d0 <increment+0x12>
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	9a 83       	std	Y+2, r25	; 0x02
     8d6:	89 83       	std	Y+1, r24	; 0x01
	 if(this->state < 99) this->state++;
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	9a 81       	ldd	r25, Y+2	; 0x02
     8dc:	fc 01       	movw	r30, r24
     8de:	84 81       	ldd	r24, Z+4	; 0x04
     8e0:	83 36       	cpi	r24, 0x63	; 99
     8e2:	50 f4       	brcc	.+20     	; 0x8f8 <increment+0x3a>
     8e4:	89 81       	ldd	r24, Y+1	; 0x01
     8e6:	9a 81       	ldd	r25, Y+2	; 0x02
     8e8:	fc 01       	movw	r30, r24
     8ea:	84 81       	ldd	r24, Z+4	; 0x04
     8ec:	21 e0       	ldi	r18, 0x01	; 1
     8ee:	28 0f       	add	r18, r24
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	9a 81       	ldd	r25, Y+2	; 0x02
     8f4:	fc 01       	movw	r30, r24
     8f6:	24 83       	std	Z+4, r18	; 0x04
	 if(!this->active) ASYNC(this, pulseGen, 0);
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	9a 81       	ldd	r25, Y+2	; 0x02
     8fc:	fc 01       	movw	r30, r24
     8fe:	95 85       	ldd	r25, Z+13	; 0x0d
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	89 27       	eor	r24, r25
     904:	88 23       	and	r24, r24
     906:	99 f0       	breq	.+38     	; 0x92e <increment+0x70>
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	9a 81       	ldd	r25, Y+2	; 0x02
     90c:	c1 2c       	mov	r12, r1
     90e:	d1 2c       	mov	r13, r1
     910:	0f 2e       	mov	r0, r31
     912:	fe e4       	ldi	r31, 0x4E	; 78
     914:	ef 2e       	mov	r14, r31
     916:	f6 e0       	ldi	r31, 0x06	; 6
     918:	ff 2e       	mov	r15, r31
     91a:	f0 2d       	mov	r31, r0
     91c:	8c 01       	movw	r16, r24
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	a9 01       	movw	r20, r18
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	cb 01       	movw	r24, r22
     92a:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
	 
	 if (this->pos == 4){
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	9a 81       	ldd	r25, Y+2	; 0x02
     932:	fc 01       	movw	r30, r24
     934:	81 85       	ldd	r24, Z+9	; 0x09
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	e1 f4       	brne	.+56     	; 0x972 <increment+0xb4>
		 ASYNC((this->gui), updateGUI4, this->state);
     93a:	89 81       	ldd	r24, Y+1	; 0x01
     93c:	9a 81       	ldd	r25, Y+2	; 0x02
     93e:	fc 01       	movw	r30, r24
     940:	84 81       	ldd	r24, Z+4	; 0x04
     942:	28 2f       	mov	r18, r24
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	89 81       	ldd	r24, Y+1	; 0x01
     948:	9a 81       	ldd	r25, Y+2	; 0x02
     94a:	fc 01       	movw	r30, r24
     94c:	87 81       	ldd	r24, Z+7	; 0x07
     94e:	90 85       	ldd	r25, Z+8	; 0x08
     950:	69 01       	movw	r12, r18
     952:	0f 2e       	mov	r0, r31
     954:	f5 e2       	ldi	r31, 0x25	; 37
     956:	ef 2e       	mov	r14, r31
     958:	f2 e0       	ldi	r31, 0x02	; 2
     95a:	ff 2e       	mov	r15, r31
     95c:	f0 2d       	mov	r31, r0
     95e:	8c 01       	movw	r16, r24
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	a9 01       	movw	r20, r18
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	cb 01       	movw	r24, r22
     96c:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
	 }
	 else {
		 ASYNC(this->gui, updateGUI0, this->state);
	 }
  }
     970:	1b c0       	rjmp	.+54     	; 0x9a8 <increment+0xea>
	 
	 if (this->pos == 4){
		 ASYNC((this->gui), updateGUI4, this->state);
	 }
	 else {
		 ASYNC(this->gui, updateGUI0, this->state);
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	9a 81       	ldd	r25, Y+2	; 0x02
     976:	fc 01       	movw	r30, r24
     978:	84 81       	ldd	r24, Z+4	; 0x04
     97a:	28 2f       	mov	r18, r24
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	9a 81       	ldd	r25, Y+2	; 0x02
     982:	fc 01       	movw	r30, r24
     984:	87 81       	ldd	r24, Z+7	; 0x07
     986:	90 85       	ldd	r25, Z+8	; 0x08
     988:	69 01       	movw	r12, r18
     98a:	0f 2e       	mov	r0, r31
     98c:	fa e0       	ldi	r31, 0x0A	; 10
     98e:	ef 2e       	mov	r14, r31
     990:	f2 e0       	ldi	r31, 0x02	; 2
     992:	ff 2e       	mov	r15, r31
     994:	f0 2d       	mov	r31, r0
     996:	8c 01       	movw	r16, r24
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	a9 01       	movw	r20, r18
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	cb 01       	movw	r24, r22
     9a4:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
	 }
  }
     9a8:	00 00       	nop
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	08 95       	ret

000009c0 <decrement>:
  
 void decrement(PulseCounter *this){
     9c0:	cf 92       	push	r12
     9c2:	df 92       	push	r13
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	00 d0       	rcall	.+0      	; 0x9d2 <decrement+0x12>
     9d2:	cd b7       	in	r28, 0x3d	; 61
     9d4:	de b7       	in	r29, 0x3e	; 62
     9d6:	9a 83       	std	Y+2, r25	; 0x02
     9d8:	89 83       	std	Y+1, r24	; 0x01
	 if(this->state > 0){
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	9a 81       	ldd	r25, Y+2	; 0x02
     9de:	fc 01       	movw	r30, r24
     9e0:	84 81       	ldd	r24, Z+4	; 0x04
     9e2:	88 23       	and	r24, r24
     9e4:	51 f0       	breq	.+20     	; 0x9fa <decrement+0x3a>
		 this->state--;
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ea:	fc 01       	movw	r30, r24
     9ec:	84 81       	ldd	r24, Z+4	; 0x04
     9ee:	2f ef       	ldi	r18, 0xFF	; 255
     9f0:	28 0f       	add	r18, r24
     9f2:	89 81       	ldd	r24, Y+1	; 0x01
     9f4:	9a 81       	ldd	r25, Y+2	; 0x02
     9f6:	fc 01       	movw	r30, r24
     9f8:	24 83       	std	Z+4, r18	; 0x04
	 }
	 if (this->pos == 4){
     9fa:	89 81       	ldd	r24, Y+1	; 0x01
     9fc:	9a 81       	ldd	r25, Y+2	; 0x02
     9fe:	fc 01       	movw	r30, r24
     a00:	81 85       	ldd	r24, Z+9	; 0x09
     a02:	84 30       	cpi	r24, 0x04	; 4
     a04:	e1 f4       	brne	.+56     	; 0xa3e <decrement+0x7e>
		 ASYNC((this->gui), updateGUI4, this->state);
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	9a 81       	ldd	r25, Y+2	; 0x02
     a0a:	fc 01       	movw	r30, r24
     a0c:	84 81       	ldd	r24, Z+4	; 0x04
     a0e:	28 2f       	mov	r18, r24
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	9a 81       	ldd	r25, Y+2	; 0x02
     a16:	fc 01       	movw	r30, r24
     a18:	87 81       	ldd	r24, Z+7	; 0x07
     a1a:	90 85       	ldd	r25, Z+8	; 0x08
     a1c:	69 01       	movw	r12, r18
     a1e:	0f 2e       	mov	r0, r31
     a20:	f5 e2       	ldi	r31, 0x25	; 37
     a22:	ef 2e       	mov	r14, r31
     a24:	f2 e0       	ldi	r31, 0x02	; 2
     a26:	ff 2e       	mov	r15, r31
     a28:	f0 2d       	mov	r31, r0
     a2a:	8c 01       	movw	r16, r24
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	a9 01       	movw	r20, r18
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	cb 01       	movw	r24, r22
     a38:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
	 }
	 else {
		 ASYNC(this->gui, updateGUI0, this->state);
	 }
 }
     a3c:	1b c0       	rjmp	.+54     	; 0xa74 <decrement+0xb4>
	 }
	 if (this->pos == 4){
		 ASYNC((this->gui), updateGUI4, this->state);
	 }
	 else {
		 ASYNC(this->gui, updateGUI0, this->state);
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	9a 81       	ldd	r25, Y+2	; 0x02
     a42:	fc 01       	movw	r30, r24
     a44:	84 81       	ldd	r24, Z+4	; 0x04
     a46:	28 2f       	mov	r18, r24
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	89 81       	ldd	r24, Y+1	; 0x01
     a4c:	9a 81       	ldd	r25, Y+2	; 0x02
     a4e:	fc 01       	movw	r30, r24
     a50:	87 81       	ldd	r24, Z+7	; 0x07
     a52:	90 85       	ldd	r25, Z+8	; 0x08
     a54:	69 01       	movw	r12, r18
     a56:	0f 2e       	mov	r0, r31
     a58:	fa e0       	ldi	r31, 0x0A	; 10
     a5a:	ef 2e       	mov	r14, r31
     a5c:	f2 e0       	ldi	r31, 0x02	; 2
     a5e:	ff 2e       	mov	r15, r31
     a60:	f0 2d       	mov	r31, r0
     a62:	8c 01       	movw	r16, r24
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	a9 01       	movw	r20, r18
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	cb 01       	movw	r24, r22
     a70:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
	 }
 }
     a74:	00 00       	nop
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	ff 90       	pop	r15
     a84:	ef 90       	pop	r14
     a86:	df 90       	pop	r13
     a88:	cf 90       	pop	r12
     a8a:	08 95       	ret

00000a8c <resetState>:
  
  void resetState(PulseCounter *this){
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	00 d0       	rcall	.+0      	; 0xa9e <resetState+0x12>
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	9a 83       	std	Y+2, r25	; 0x02
     aa4:	89 83       	std	Y+1, r24	; 0x01
	  if (this->state==0)
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	9a 81       	ldd	r25, Y+2	; 0x02
     aaa:	fc 01       	movw	r30, r24
     aac:	84 81       	ldd	r24, Z+4	; 0x04
     aae:	88 23       	and	r24, r24
     ab0:	69 f4       	brne	.+26     	; 0xacc <resetState+0x40>
	  {
		  this->state = this->reset;
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	9a 81       	ldd	r25, Y+2	; 0x02
     ab6:	fc 01       	movw	r30, r24
     ab8:	25 81       	ldd	r18, Z+5	; 0x05
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	9a 81       	ldd	r25, Y+2	; 0x02
     abe:	fc 01       	movw	r30, r24
     ac0:	24 83       	std	Z+4, r18	; 0x04
		  this->reset = 0;
     ac2:	89 81       	ldd	r24, Y+1	; 0x01
     ac4:	9a 81       	ldd	r25, Y+2	; 0x02
     ac6:	fc 01       	movw	r30, r24
     ac8:	15 82       	std	Z+5, r1	; 0x05
     aca:	0c c0       	rjmp	.+24     	; 0xae4 <resetState+0x58>
	  }
	  else{
		this->reset = this->state;
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	9a 81       	ldd	r25, Y+2	; 0x02
     ad0:	fc 01       	movw	r30, r24
     ad2:	24 81       	ldd	r18, Z+4	; 0x04
     ad4:	89 81       	ldd	r24, Y+1	; 0x01
     ad6:	9a 81       	ldd	r25, Y+2	; 0x02
     ad8:	fc 01       	movw	r30, r24
     ada:	25 83       	std	Z+5, r18	; 0x05
		this->state = 0;  
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	9a 81       	ldd	r25, Y+2	; 0x02
     ae0:	fc 01       	movw	r30, r24
     ae2:	14 82       	std	Z+4, r1	; 0x04
	  }
	  if (!this->active) ASYNC(this, pulseGen, 0);
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	9a 81       	ldd	r25, Y+2	; 0x02
     ae8:	fc 01       	movw	r30, r24
     aea:	95 85       	ldd	r25, Z+13	; 0x0d
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	89 27       	eor	r24, r25
     af0:	88 23       	and	r24, r24
     af2:	99 f0       	breq	.+38     	; 0xb1a <resetState+0x8e>
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	9a 81       	ldd	r25, Y+2	; 0x02
     af8:	c1 2c       	mov	r12, r1
     afa:	d1 2c       	mov	r13, r1
     afc:	0f 2e       	mov	r0, r31
     afe:	fe e4       	ldi	r31, 0x4E	; 78
     b00:	ef 2e       	mov	r14, r31
     b02:	f6 e0       	ldi	r31, 0x06	; 6
     b04:	ff 2e       	mov	r15, r31
     b06:	f0 2d       	mov	r31, r0
     b08:	8c 01       	movw	r16, r24
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	a9 01       	movw	r20, r18
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	cb 01       	movw	r24, r22
     b16:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
	  
	  if (this->pos == 4){
     b1a:	89 81       	ldd	r24, Y+1	; 0x01
     b1c:	9a 81       	ldd	r25, Y+2	; 0x02
     b1e:	fc 01       	movw	r30, r24
     b20:	81 85       	ldd	r24, Z+9	; 0x09
     b22:	84 30       	cpi	r24, 0x04	; 4
     b24:	e1 f4       	brne	.+56     	; 0xb5e <resetState+0xd2>
			ASYNC((this->gui), updateGUI4, this->state);
     b26:	89 81       	ldd	r24, Y+1	; 0x01
     b28:	9a 81       	ldd	r25, Y+2	; 0x02
     b2a:	fc 01       	movw	r30, r24
     b2c:	84 81       	ldd	r24, Z+4	; 0x04
     b2e:	28 2f       	mov	r18, r24
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	9a 81       	ldd	r25, Y+2	; 0x02
     b36:	fc 01       	movw	r30, r24
     b38:	87 81       	ldd	r24, Z+7	; 0x07
     b3a:	90 85       	ldd	r25, Z+8	; 0x08
     b3c:	69 01       	movw	r12, r18
     b3e:	0f 2e       	mov	r0, r31
     b40:	f5 e2       	ldi	r31, 0x25	; 37
     b42:	ef 2e       	mov	r14, r31
     b44:	f2 e0       	ldi	r31, 0x02	; 2
     b46:	ff 2e       	mov	r15, r31
     b48:	f0 2d       	mov	r31, r0
     b4a:	8c 01       	movw	r16, r24
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	a9 01       	movw	r20, r18
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	cb 01       	movw	r24, r22
     b58:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
	  }
	  else {
		  ASYNC(this->gui, updateGUI0, this->state);
	  }
    }
     b5c:	1b c0       	rjmp	.+54     	; 0xb94 <resetState+0x108>
	  
	  if (this->pos == 4){
			ASYNC((this->gui), updateGUI4, this->state);
	  }
	  else {
		  ASYNC(this->gui, updateGUI0, this->state);
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	9a 81       	ldd	r25, Y+2	; 0x02
     b62:	fc 01       	movw	r30, r24
     b64:	84 81       	ldd	r24, Z+4	; 0x04
     b66:	28 2f       	mov	r18, r24
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	fc 01       	movw	r30, r24
     b70:	87 81       	ldd	r24, Z+7	; 0x07
     b72:	90 85       	ldd	r25, Z+8	; 0x08
     b74:	69 01       	movw	r12, r18
     b76:	0f 2e       	mov	r0, r31
     b78:	fa e0       	ldi	r31, 0x0A	; 10
     b7a:	ef 2e       	mov	r14, r31
     b7c:	f2 e0       	ldi	r31, 0x02	; 2
     b7e:	ff 2e       	mov	r15, r31
     b80:	f0 2d       	mov	r31, r0
     b82:	8c 01       	movw	r16, r24
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	a9 01       	movw	r20, r18
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	cb 01       	movw	r24, r22
     b90:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
	  }
    }
     b94:	00 00       	nop
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	ff 90       	pop	r15
     ba4:	ef 90       	pop	r14
     ba6:	df 90       	pop	r13
     ba8:	cf 90       	pop	r12
     baa:	08 95       	ret

00000bac <hold>:
	
	
void hold(PulseCounter *this){
     bac:	cf 92       	push	r12
     bae:	df 92       	push	r13
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <hold+0x12>
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	9a 83       	std	Y+2, r25	; 0x02
     bc4:	89 83       	std	Y+1, r24	; 0x01
		if (~PINB & (1 << 6))
     bc6:	83 e2       	ldi	r24, 0x23	; 35
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	fc 01       	movw	r30, r24
     bcc:	80 81       	ld	r24, Z
     bce:	88 2f       	mov	r24, r24
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	80 74       	andi	r24, 0x40	; 64
     bd4:	99 27       	eor	r25, r25
     bd6:	89 2b       	or	r24, r25
     bd8:	41 f5       	brne	.+80     	; 0xc2a <hold+0x7e>
		{
			ASYNC(this, increment, NULL);
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	9a 81       	ldd	r25, Y+2	; 0x02
     bde:	c1 2c       	mov	r12, r1
     be0:	d1 2c       	mov	r13, r1
     be2:	0f 2e       	mov	r0, r31
     be4:	ff e5       	ldi	r31, 0x5F	; 95
     be6:	ef 2e       	mov	r14, r31
     be8:	f4 e0       	ldi	r31, 0x04	; 4
     bea:	ff 2e       	mov	r15, r31
     bec:	f0 2d       	mov	r31, r0
     bee:	8c 01       	movw	r16, r24
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	a9 01       	movw	r20, r18
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	cb 01       	movw	r24, r22
     bfc:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
			AFTER(TinyTime, this, hold, 0);
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	9a 81       	ldd	r25, Y+2	; 0x02
     c04:	c1 2c       	mov	r12, r1
     c06:	d1 2c       	mov	r13, r1
     c08:	0f 2e       	mov	r0, r31
     c0a:	f6 ed       	ldi	r31, 0xD6	; 214
     c0c:	ef 2e       	mov	r14, r31
     c0e:	f5 e0       	ldi	r31, 0x05	; 5
     c10:	ff 2e       	mov	r15, r31
     c12:	f0 2d       	mov	r31, r0
     c14:	8c 01       	movw	r16, r24
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	a9 01       	movw	r20, r18
     c1c:	64 e8       	ldi	r22, 0x84	; 132
     c1e:	7e e1       	ldi	r23, 0x1E	; 30
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
		else if (~PINB & (1 << 7))
		{
			ASYNC(this, decrement, NULL);
			AFTER(TinyTime, this, hold, 0);
		}
	}
     c28:	2d c0       	rjmp	.+90     	; 0xc84 <hold+0xd8>
		if (~PINB & (1 << 6))
		{
			ASYNC(this, increment, NULL);
			AFTER(TinyTime, this, hold, 0);
		}
		else if (~PINB & (1 << 7))
     c2a:	83 e2       	ldi	r24, 0x23	; 35
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	fc 01       	movw	r30, r24
     c30:	80 81       	ld	r24, Z
     c32:	88 23       	and	r24, r24
     c34:	3c f1       	brlt	.+78     	; 0xc84 <hold+0xd8>
		{
			ASYNC(this, decrement, NULL);
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	c1 2c       	mov	r12, r1
     c3c:	d1 2c       	mov	r13, r1
     c3e:	0f 2e       	mov	r0, r31
     c40:	f0 ee       	ldi	r31, 0xE0	; 224
     c42:	ef 2e       	mov	r14, r31
     c44:	f4 e0       	ldi	r31, 0x04	; 4
     c46:	ff 2e       	mov	r15, r31
     c48:	f0 2d       	mov	r31, r0
     c4a:	8c 01       	movw	r16, r24
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	a9 01       	movw	r20, r18
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	cb 01       	movw	r24, r22
     c58:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
			AFTER(TinyTime, this, hold, 0);
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	9a 81       	ldd	r25, Y+2	; 0x02
     c60:	c1 2c       	mov	r12, r1
     c62:	d1 2c       	mov	r13, r1
     c64:	0f 2e       	mov	r0, r31
     c66:	f6 ed       	ldi	r31, 0xD6	; 214
     c68:	ef 2e       	mov	r14, r31
     c6a:	f5 e0       	ldi	r31, 0x05	; 5
     c6c:	ff 2e       	mov	r15, r31
     c6e:	f0 2d       	mov	r31, r0
     c70:	8c 01       	movw	r16, r24
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	a9 01       	movw	r20, r18
     c78:	64 e8       	ldi	r22, 0x84	; 132
     c7a:	7e e1       	ldi	r23, 0x1E	; 30
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
		}
	}
     c84:	00 00       	nop
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	cf 90       	pop	r12
     c9a:	08 95       	ret

00000c9c <pulseGen>:

void pulseGen(PulseCounter *this){
     c9c:	8f 92       	push	r8
     c9e:	9f 92       	push	r9
     ca0:	af 92       	push	r10
     ca2:	bf 92       	push	r11
     ca4:	cf 92       	push	r12
     ca6:	df 92       	push	r13
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <pulseGen+0x1a>
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	9a 83       	std	Y+2, r25	; 0x02
     cbc:	89 83       	std	Y+1, r24	; 0x01
	
	if(this->state > 0){
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	fc 01       	movw	r30, r24
     cc4:	84 81       	ldd	r24, Z+4	; 0x04
     cc6:	88 23       	and	r24, r24
     cc8:	09 f4       	brne	.+2      	; 0xccc <pulseGen+0x30>
     cca:	5a c0       	rjmp	.+180    	; 0xd80 <pulseGen+0xe4>
		this->active = true;
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	9a 81       	ldd	r25, Y+2	; 0x02
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	fc 01       	movw	r30, r24
     cd4:	25 87       	std	Z+13, r18	; 0x0d
		ASYNC(this->gui, invertPort, this->pin);
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	fc 01       	movw	r30, r24
     cdc:	82 85       	ldd	r24, Z+10	; 0x0a
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	9a 81       	ldd	r25, Y+2	; 0x02
     ce6:	fc 01       	movw	r30, r24
     ce8:	87 81       	ldd	r24, Z+7	; 0x07
     cea:	90 85       	ldd	r25, Z+8	; 0x08
     cec:	69 01       	movw	r12, r18
     cee:	0f 2e       	mov	r0, r31
     cf0:	f6 e1       	ldi	r31, 0x16	; 22
     cf2:	ef 2e       	mov	r14, r31
     cf4:	f4 e0       	ldi	r31, 0x04	; 4
     cf6:	ff 2e       	mov	r15, r31
     cf8:	f0 2d       	mov	r31, r0
     cfa:	8c 01       	movw	r16, r24
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	a9 01       	movw	r20, r18
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	cb 01       	movw	r24, r22
     d08:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
		AFTER(USEC(500000/this->state), this, pulseGen, 0);
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
     d10:	fc 01       	movw	r30, r24
     d12:	84 81       	ldd	r24, Z+4	; 0x04
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	80 e2       	ldi	r24, 0x20	; 32
     d1e:	91 ea       	ldi	r25, 0xA1	; 161
     d20:	a7 e0       	ldi	r26, 0x07	; 7
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	bc 01       	movw	r22, r24
     d26:	cd 01       	movw	r24, r26
     d28:	0e 94 7d 18 	call	0x30fa	; 0x30fa <__divmodsi4>
     d2c:	da 01       	movw	r26, r20
     d2e:	c9 01       	movw	r24, r18
     d30:	9c 01       	movw	r18, r24
     d32:	ad 01       	movw	r20, r26
     d34:	8d e7       	ldi	r24, 0x7D	; 125
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	dc 01       	movw	r26, r24
     d3a:	0e 94 9c 18 	call	0x3138	; 0x3138 <__muluhisi3>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	20 ea       	ldi	r18, 0xA0	; 160
     d44:	3f e0       	ldi	r19, 0x0F	; 15
     d46:	40 e0       	ldi	r20, 0x00	; 0
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	bc 01       	movw	r22, r24
     d4c:	cd 01       	movw	r24, r26
     d4e:	0e 94 7d 18 	call	0x30fa	; 0x30fa <__divmodsi4>
     d52:	da 01       	movw	r26, r20
     d54:	c9 01       	movw	r24, r18
     d56:	4c 01       	movw	r8, r24
     d58:	5d 01       	movw	r10, r26
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	9a 81       	ldd	r25, Y+2	; 0x02
     d5e:	c1 2c       	mov	r12, r1
     d60:	d1 2c       	mov	r13, r1
     d62:	0f 2e       	mov	r0, r31
     d64:	fe e4       	ldi	r31, 0x4E	; 78
     d66:	ef 2e       	mov	r14, r31
     d68:	f6 e0       	ldi	r31, 0x06	; 6
     d6a:	ff 2e       	mov	r15, r31
     d6c:	f0 2d       	mov	r31, r0
     d6e:	8c 01       	movw	r16, r24
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	a9 01       	movw	r20, r18
     d76:	c5 01       	movw	r24, r10
     d78:	b4 01       	movw	r22, r8
     d7a:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
		this->active = false;
		ASYNC(this->gui, resetPort, this->pin);
	}
	
	
}
     d7e:	1f c0       	rjmp	.+62     	; 0xdbe <pulseGen+0x122>
		ASYNC(this->gui, invertPort, this->pin);
		AFTER(USEC(500000/this->state), this, pulseGen, 0);
	}
	else
	{
		this->active = false;
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	fc 01       	movw	r30, r24
     d86:	15 86       	std	Z+13, r1	; 0x0d
		ASYNC(this->gui, resetPort, this->pin);
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	9a 81       	ldd	r25, Y+2	; 0x02
     d8c:	fc 01       	movw	r30, r24
     d8e:	82 85       	ldd	r24, Z+10	; 0x0a
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
     d98:	fc 01       	movw	r30, r24
     d9a:	87 81       	ldd	r24, Z+7	; 0x07
     d9c:	90 85       	ldd	r25, Z+8	; 0x08
     d9e:	69 01       	movw	r12, r18
     da0:	0f 2e       	mov	r0, r31
     da2:	fa e3       	ldi	r31, 0x3A	; 58
     da4:	ef 2e       	mov	r14, r31
     da6:	f4 e0       	ldi	r31, 0x04	; 4
     da8:	ff 2e       	mov	r15, r31
     daa:	f0 2d       	mov	r31, r0
     dac:	8c 01       	movw	r16, r24
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	a9 01       	movw	r20, r18
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	cb 01       	movw	r24, r22
     dba:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
	}
	
	
}
     dbe:	00 00       	nop
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	ff 90       	pop	r15
     dce:	ef 90       	pop	r14
     dd0:	df 90       	pop	r13
     dd2:	cf 90       	pop	r12
     dd4:	bf 90       	pop	r11
     dd6:	af 90       	pop	r10
     dd8:	9f 90       	pop	r9
     dda:	8f 90       	pop	r8
     ddc:	08 95       	ret

00000dde <__vector_1>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     dde:	1f 92       	push	r1
     de0:	0f 92       	push	r0
     de2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     de6:	0f 92       	push	r0
     de8:	11 24       	eor	r1, r1
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
     e0e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
     e12:	09 2e       	mov	r0, r25
     e14:	00 0c       	add	r0, r0
     e16:	aa 0b       	sbc	r26, r26
     e18:	bb 0b       	sbc	r27, r27
     e1a:	ac 01       	movw	r20, r24
     e1c:	33 27       	eor	r19, r19
     e1e:	22 27       	eor	r18, r18
     e20:	84 e8       	ldi	r24, 0x84	; 132
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	fc 01       	movw	r30, r24
     e26:	80 81       	ld	r24, Z
     e28:	91 81       	ldd	r25, Z+1	; 0x01
     e2a:	cc 01       	movw	r24, r24
     e2c:	a0 e0       	ldi	r26, 0x00	; 0
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	82 2b       	or	r24, r18
     e32:	93 2b       	or	r25, r19
     e34:	a4 2b       	or	r26, r20
     e36:	b5 2b       	or	r27, r21
     e38:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     e3c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     e40:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     e44:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     e48:	86 e3       	ldi	r24, 0x36	; 54
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	fc 01       	movw	r30, r24
     e4e:	80 81       	ld	r24, Z
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	81 70       	andi	r24, 0x01	; 1
     e56:	99 27       	eor	r25, r25
     e58:	89 2b       	or	r24, r25
     e5a:	01 f1       	breq	.+64     	; 0xe9c <__vector_1+0xbe>
     e5c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
     e60:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	09 2e       	mov	r0, r25
     e68:	00 0c       	add	r0, r0
     e6a:	aa 0b       	sbc	r26, r26
     e6c:	bb 0b       	sbc	r27, r27
     e6e:	ac 01       	movw	r20, r24
     e70:	33 27       	eor	r19, r19
     e72:	22 27       	eor	r18, r18
     e74:	84 e8       	ldi	r24, 0x84	; 132
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	fc 01       	movw	r30, r24
     e7a:	80 81       	ld	r24, Z
     e7c:	91 81       	ldd	r25, Z+1	; 0x01
     e7e:	cc 01       	movw	r24, r24
     e80:	a0 e0       	ldi	r26, 0x00	; 0
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	82 2b       	or	r24, r18
     e86:	93 2b       	or	r25, r19
     e88:	a4 2b       	or	r26, r20
     e8a:	b5 2b       	or	r27, r21
     e8c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     e90:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     e94:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     e98:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     e9c:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <mtable>
     ea0:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <mtable+0x1>
     ea4:	89 2b       	or	r24, r25
     ea6:	61 f0       	breq	.+24     	; 0xec0 <__vector_1+0xe2>
     ea8:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <mtable>
     eac:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <mtable+0x1>
     eb0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable>
     eb4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0x1>
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	f9 01       	movw	r30, r18
     ebe:	09 95       	icall
     ec0:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
     ec4:	00 00       	nop
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	ff 91       	pop	r31
     ecc:	ef 91       	pop	r30
     ece:	bf 91       	pop	r27
     ed0:	af 91       	pop	r26
     ed2:	9f 91       	pop	r25
     ed4:	8f 91       	pop	r24
     ed6:	7f 91       	pop	r23
     ed8:	6f 91       	pop	r22
     eda:	5f 91       	pop	r21
     edc:	4f 91       	pop	r20
     ede:	3f 91       	pop	r19
     ee0:	2f 91       	pop	r18
     ee2:	0f 90       	pop	r0
     ee4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     ee8:	0f 90       	pop	r0
     eea:	1f 90       	pop	r1
     eec:	18 95       	reti

00000eee <__vector_2>:
     eee:	1f 92       	push	r1
     ef0:	0f 92       	push	r0
     ef2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     ef6:	0f 92       	push	r0
     ef8:	11 24       	eor	r1, r1
     efa:	2f 93       	push	r18
     efc:	3f 93       	push	r19
     efe:	4f 93       	push	r20
     f00:	5f 93       	push	r21
     f02:	6f 93       	push	r22
     f04:	7f 93       	push	r23
     f06:	8f 93       	push	r24
     f08:	9f 93       	push	r25
     f0a:	af 93       	push	r26
     f0c:	bf 93       	push	r27
     f0e:	ef 93       	push	r30
     f10:	ff 93       	push	r31
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
     f1e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
     f22:	09 2e       	mov	r0, r25
     f24:	00 0c       	add	r0, r0
     f26:	aa 0b       	sbc	r26, r26
     f28:	bb 0b       	sbc	r27, r27
     f2a:	ac 01       	movw	r20, r24
     f2c:	33 27       	eor	r19, r19
     f2e:	22 27       	eor	r18, r18
     f30:	84 e8       	ldi	r24, 0x84	; 132
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	fc 01       	movw	r30, r24
     f36:	80 81       	ld	r24, Z
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	cc 01       	movw	r24, r24
     f3c:	a0 e0       	ldi	r26, 0x00	; 0
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	82 2b       	or	r24, r18
     f42:	93 2b       	or	r25, r19
     f44:	a4 2b       	or	r26, r20
     f46:	b5 2b       	or	r27, r21
     f48:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     f4c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     f50:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     f54:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     f58:	86 e3       	ldi	r24, 0x36	; 54
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	fc 01       	movw	r30, r24
     f5e:	80 81       	ld	r24, Z
     f60:	88 2f       	mov	r24, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	81 70       	andi	r24, 0x01	; 1
     f66:	99 27       	eor	r25, r25
     f68:	89 2b       	or	r24, r25
     f6a:	01 f1       	breq	.+64     	; 0xfac <__vector_2+0xbe>
     f6c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
     f70:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	09 2e       	mov	r0, r25
     f78:	00 0c       	add	r0, r0
     f7a:	aa 0b       	sbc	r26, r26
     f7c:	bb 0b       	sbc	r27, r27
     f7e:	ac 01       	movw	r20, r24
     f80:	33 27       	eor	r19, r19
     f82:	22 27       	eor	r18, r18
     f84:	84 e8       	ldi	r24, 0x84	; 132
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	fc 01       	movw	r30, r24
     f8a:	80 81       	ld	r24, Z
     f8c:	91 81       	ldd	r25, Z+1	; 0x01
     f8e:	cc 01       	movw	r24, r24
     f90:	a0 e0       	ldi	r26, 0x00	; 0
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	82 2b       	or	r24, r18
     f96:	93 2b       	or	r25, r19
     f98:	a4 2b       	or	r26, r20
     f9a:	b5 2b       	or	r27, r21
     f9c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
     fa0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
     fa4:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
     fa8:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
     fac:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <mtable+0x2>
     fb0:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <mtable+0x3>
     fb4:	89 2b       	or	r24, r25
     fb6:	61 f0       	breq	.+24     	; 0xfd0 <__vector_2+0xe2>
     fb8:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <mtable+0x2>
     fbc:	30 91 c1 01 	lds	r19, 0x01C1	; 0x8001c1 <mtable+0x3>
     fc0:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0x2>
     fc4:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x3>
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	f9 01       	movw	r30, r18
     fce:	09 95       	icall
     fd0:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
     fd4:	00 00       	nop
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	ff 91       	pop	r31
     fdc:	ef 91       	pop	r30
     fde:	bf 91       	pop	r27
     fe0:	af 91       	pop	r26
     fe2:	9f 91       	pop	r25
     fe4:	8f 91       	pop	r24
     fe6:	7f 91       	pop	r23
     fe8:	6f 91       	pop	r22
     fea:	5f 91       	pop	r21
     fec:	4f 91       	pop	r20
     fee:	3f 91       	pop	r19
     ff0:	2f 91       	pop	r18
     ff2:	0f 90       	pop	r0
     ff4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
     ff8:	0f 90       	pop	r0
     ffa:	1f 90       	pop	r1
     ffc:	18 95       	reti

00000ffe <__vector_3>:
     ffe:	1f 92       	push	r1
    1000:	0f 92       	push	r0
    1002:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1006:	0f 92       	push	r0
    1008:	11 24       	eor	r1, r1
    100a:	2f 93       	push	r18
    100c:	3f 93       	push	r19
    100e:	4f 93       	push	r20
    1010:	5f 93       	push	r21
    1012:	6f 93       	push	r22
    1014:	7f 93       	push	r23
    1016:	8f 93       	push	r24
    1018:	9f 93       	push	r25
    101a:	af 93       	push	r26
    101c:	bf 93       	push	r27
    101e:	ef 93       	push	r30
    1020:	ff 93       	push	r31
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    102e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1032:	09 2e       	mov	r0, r25
    1034:	00 0c       	add	r0, r0
    1036:	aa 0b       	sbc	r26, r26
    1038:	bb 0b       	sbc	r27, r27
    103a:	ac 01       	movw	r20, r24
    103c:	33 27       	eor	r19, r19
    103e:	22 27       	eor	r18, r18
    1040:	84 e8       	ldi	r24, 0x84	; 132
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	fc 01       	movw	r30, r24
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	cc 01       	movw	r24, r24
    104c:	a0 e0       	ldi	r26, 0x00	; 0
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	82 2b       	or	r24, r18
    1052:	93 2b       	or	r25, r19
    1054:	a4 2b       	or	r26, r20
    1056:	b5 2b       	or	r27, r21
    1058:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    105c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1060:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1064:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1068:	86 e3       	ldi	r24, 0x36	; 54
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	fc 01       	movw	r30, r24
    106e:	80 81       	ld	r24, Z
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	81 70       	andi	r24, 0x01	; 1
    1076:	99 27       	eor	r25, r25
    1078:	89 2b       	or	r24, r25
    107a:	01 f1       	breq	.+64     	; 0x10bc <__vector_3+0xbe>
    107c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    1080:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	09 2e       	mov	r0, r25
    1088:	00 0c       	add	r0, r0
    108a:	aa 0b       	sbc	r26, r26
    108c:	bb 0b       	sbc	r27, r27
    108e:	ac 01       	movw	r20, r24
    1090:	33 27       	eor	r19, r19
    1092:	22 27       	eor	r18, r18
    1094:	84 e8       	ldi	r24, 0x84	; 132
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	fc 01       	movw	r30, r24
    109a:	80 81       	ld	r24, Z
    109c:	91 81       	ldd	r25, Z+1	; 0x01
    109e:	cc 01       	movw	r24, r24
    10a0:	a0 e0       	ldi	r26, 0x00	; 0
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	82 2b       	or	r24, r18
    10a6:	93 2b       	or	r25, r19
    10a8:	a4 2b       	or	r26, r20
    10aa:	b5 2b       	or	r27, r21
    10ac:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    10b0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    10b4:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    10b8:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    10bc:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <mtable+0x4>
    10c0:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <mtable+0x5>
    10c4:	89 2b       	or	r24, r25
    10c6:	61 f0       	breq	.+24     	; 0x10e0 <__vector_3+0xe2>
    10c8:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <mtable+0x4>
    10cc:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <mtable+0x5>
    10d0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x4>
    10d4:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x5>
    10d8:	62 e0       	ldi	r22, 0x02	; 2
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	f9 01       	movw	r30, r18
    10de:	09 95       	icall
    10e0:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
    10e4:	00 00       	nop
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	ff 91       	pop	r31
    10ec:	ef 91       	pop	r30
    10ee:	bf 91       	pop	r27
    10f0:	af 91       	pop	r26
    10f2:	9f 91       	pop	r25
    10f4:	8f 91       	pop	r24
    10f6:	7f 91       	pop	r23
    10f8:	6f 91       	pop	r22
    10fa:	5f 91       	pop	r21
    10fc:	4f 91       	pop	r20
    10fe:	3f 91       	pop	r19
    1100:	2f 91       	pop	r18
    1102:	0f 90       	pop	r0
    1104:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti

0000110e <__vector_4>:
    110e:	1f 92       	push	r1
    1110:	0f 92       	push	r0
    1112:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1116:	0f 92       	push	r0
    1118:	11 24       	eor	r1, r1
    111a:	2f 93       	push	r18
    111c:	3f 93       	push	r19
    111e:	4f 93       	push	r20
    1120:	5f 93       	push	r21
    1122:	6f 93       	push	r22
    1124:	7f 93       	push	r23
    1126:	8f 93       	push	r24
    1128:	9f 93       	push	r25
    112a:	af 93       	push	r26
    112c:	bf 93       	push	r27
    112e:	ef 93       	push	r30
    1130:	ff 93       	push	r31
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    113e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1142:	09 2e       	mov	r0, r25
    1144:	00 0c       	add	r0, r0
    1146:	aa 0b       	sbc	r26, r26
    1148:	bb 0b       	sbc	r27, r27
    114a:	ac 01       	movw	r20, r24
    114c:	33 27       	eor	r19, r19
    114e:	22 27       	eor	r18, r18
    1150:	84 e8       	ldi	r24, 0x84	; 132
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	fc 01       	movw	r30, r24
    1156:	80 81       	ld	r24, Z
    1158:	91 81       	ldd	r25, Z+1	; 0x01
    115a:	cc 01       	movw	r24, r24
    115c:	a0 e0       	ldi	r26, 0x00	; 0
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	82 2b       	or	r24, r18
    1162:	93 2b       	or	r25, r19
    1164:	a4 2b       	or	r26, r20
    1166:	b5 2b       	or	r27, r21
    1168:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    116c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1170:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1174:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1178:	86 e3       	ldi	r24, 0x36	; 54
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	fc 01       	movw	r30, r24
    117e:	80 81       	ld	r24, Z
    1180:	88 2f       	mov	r24, r24
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	81 70       	andi	r24, 0x01	; 1
    1186:	99 27       	eor	r25, r25
    1188:	89 2b       	or	r24, r25
    118a:	01 f1       	breq	.+64     	; 0x11cc <__vector_4+0xbe>
    118c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    1190:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	09 2e       	mov	r0, r25
    1198:	00 0c       	add	r0, r0
    119a:	aa 0b       	sbc	r26, r26
    119c:	bb 0b       	sbc	r27, r27
    119e:	ac 01       	movw	r20, r24
    11a0:	33 27       	eor	r19, r19
    11a2:	22 27       	eor	r18, r18
    11a4:	84 e8       	ldi	r24, 0x84	; 132
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	fc 01       	movw	r30, r24
    11aa:	80 81       	ld	r24, Z
    11ac:	91 81       	ldd	r25, Z+1	; 0x01
    11ae:	cc 01       	movw	r24, r24
    11b0:	a0 e0       	ldi	r26, 0x00	; 0
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	82 2b       	or	r24, r18
    11b6:	93 2b       	or	r25, r19
    11b8:	a4 2b       	or	r26, r20
    11ba:	b5 2b       	or	r27, r21
    11bc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    11c0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    11c4:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    11c8:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    11cc:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <mtable+0x6>
    11d0:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <mtable+0x7>
    11d4:	89 2b       	or	r24, r25
    11d6:	61 f0       	breq	.+24     	; 0x11f0 <__vector_4+0xe2>
    11d8:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <mtable+0x6>
    11dc:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <mtable+0x7>
    11e0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x6>
    11e4:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x7>
    11e8:	63 e0       	ldi	r22, 0x03	; 3
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	f9 01       	movw	r30, r18
    11ee:	09 95       	icall
    11f0:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
    11f4:	00 00       	nop
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	ff 91       	pop	r31
    11fc:	ef 91       	pop	r30
    11fe:	bf 91       	pop	r27
    1200:	af 91       	pop	r26
    1202:	9f 91       	pop	r25
    1204:	8f 91       	pop	r24
    1206:	7f 91       	pop	r23
    1208:	6f 91       	pop	r22
    120a:	5f 91       	pop	r21
    120c:	4f 91       	pop	r20
    120e:	3f 91       	pop	r19
    1210:	2f 91       	pop	r18
    1212:	0f 90       	pop	r0
    1214:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1218:	0f 90       	pop	r0
    121a:	1f 90       	pop	r1
    121c:	18 95       	reti

0000121e <__vector_5>:
    121e:	1f 92       	push	r1
    1220:	0f 92       	push	r0
    1222:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1226:	0f 92       	push	r0
    1228:	11 24       	eor	r1, r1
    122a:	2f 93       	push	r18
    122c:	3f 93       	push	r19
    122e:	4f 93       	push	r20
    1230:	5f 93       	push	r21
    1232:	6f 93       	push	r22
    1234:	7f 93       	push	r23
    1236:	8f 93       	push	r24
    1238:	9f 93       	push	r25
    123a:	af 93       	push	r26
    123c:	bf 93       	push	r27
    123e:	ef 93       	push	r30
    1240:	ff 93       	push	r31
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    124e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1252:	09 2e       	mov	r0, r25
    1254:	00 0c       	add	r0, r0
    1256:	aa 0b       	sbc	r26, r26
    1258:	bb 0b       	sbc	r27, r27
    125a:	ac 01       	movw	r20, r24
    125c:	33 27       	eor	r19, r19
    125e:	22 27       	eor	r18, r18
    1260:	84 e8       	ldi	r24, 0x84	; 132
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	fc 01       	movw	r30, r24
    1266:	80 81       	ld	r24, Z
    1268:	91 81       	ldd	r25, Z+1	; 0x01
    126a:	cc 01       	movw	r24, r24
    126c:	a0 e0       	ldi	r26, 0x00	; 0
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	82 2b       	or	r24, r18
    1272:	93 2b       	or	r25, r19
    1274:	a4 2b       	or	r26, r20
    1276:	b5 2b       	or	r27, r21
    1278:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    127c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1280:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1284:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1288:	86 e3       	ldi	r24, 0x36	; 54
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	fc 01       	movw	r30, r24
    128e:	80 81       	ld	r24, Z
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	81 70       	andi	r24, 0x01	; 1
    1296:	99 27       	eor	r25, r25
    1298:	89 2b       	or	r24, r25
    129a:	01 f1       	breq	.+64     	; 0x12dc <__vector_5+0xbe>
    129c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    12a0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	09 2e       	mov	r0, r25
    12a8:	00 0c       	add	r0, r0
    12aa:	aa 0b       	sbc	r26, r26
    12ac:	bb 0b       	sbc	r27, r27
    12ae:	ac 01       	movw	r20, r24
    12b0:	33 27       	eor	r19, r19
    12b2:	22 27       	eor	r18, r18
    12b4:	84 e8       	ldi	r24, 0x84	; 132
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	fc 01       	movw	r30, r24
    12ba:	80 81       	ld	r24, Z
    12bc:	91 81       	ldd	r25, Z+1	; 0x01
    12be:	cc 01       	movw	r24, r24
    12c0:	a0 e0       	ldi	r26, 0x00	; 0
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	82 2b       	or	r24, r18
    12c6:	93 2b       	or	r25, r19
    12c8:	a4 2b       	or	r26, r20
    12ca:	b5 2b       	or	r27, r21
    12cc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    12d0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    12d4:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    12d8:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    12dc:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <mtable+0x8>
    12e0:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <mtable+0x9>
    12e4:	89 2b       	or	r24, r25
    12e6:	61 f0       	breq	.+24     	; 0x1300 <__vector_5+0xe2>
    12e8:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <mtable+0x8>
    12ec:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <mtable+0x9>
    12f0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x8>
    12f4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x9>
    12f8:	64 e0       	ldi	r22, 0x04	; 4
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	f9 01       	movw	r30, r18
    12fe:	09 95       	icall
    1300:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
    1304:	00 00       	nop
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	ff 91       	pop	r31
    130c:	ef 91       	pop	r30
    130e:	bf 91       	pop	r27
    1310:	af 91       	pop	r26
    1312:	9f 91       	pop	r25
    1314:	8f 91       	pop	r24
    1316:	7f 91       	pop	r23
    1318:	6f 91       	pop	r22
    131a:	5f 91       	pop	r21
    131c:	4f 91       	pop	r20
    131e:	3f 91       	pop	r19
    1320:	2f 91       	pop	r18
    1322:	0f 90       	pop	r0
    1324:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1328:	0f 90       	pop	r0
    132a:	1f 90       	pop	r1
    132c:	18 95       	reti

0000132e <__vector_10>:
    132e:	1f 92       	push	r1
    1330:	0f 92       	push	r0
    1332:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1336:	0f 92       	push	r0
    1338:	11 24       	eor	r1, r1
    133a:	2f 93       	push	r18
    133c:	3f 93       	push	r19
    133e:	4f 93       	push	r20
    1340:	5f 93       	push	r21
    1342:	6f 93       	push	r22
    1344:	7f 93       	push	r23
    1346:	8f 93       	push	r24
    1348:	9f 93       	push	r25
    134a:	af 93       	push	r26
    134c:	bf 93       	push	r27
    134e:	ef 93       	push	r30
    1350:	ff 93       	push	r31
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    135e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1362:	09 2e       	mov	r0, r25
    1364:	00 0c       	add	r0, r0
    1366:	aa 0b       	sbc	r26, r26
    1368:	bb 0b       	sbc	r27, r27
    136a:	ac 01       	movw	r20, r24
    136c:	33 27       	eor	r19, r19
    136e:	22 27       	eor	r18, r18
    1370:	84 e8       	ldi	r24, 0x84	; 132
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	fc 01       	movw	r30, r24
    1376:	80 81       	ld	r24, Z
    1378:	91 81       	ldd	r25, Z+1	; 0x01
    137a:	cc 01       	movw	r24, r24
    137c:	a0 e0       	ldi	r26, 0x00	; 0
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	82 2b       	or	r24, r18
    1382:	93 2b       	or	r25, r19
    1384:	a4 2b       	or	r26, r20
    1386:	b5 2b       	or	r27, r21
    1388:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    138c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1390:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1394:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1398:	86 e3       	ldi	r24, 0x36	; 54
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	fc 01       	movw	r30, r24
    139e:	80 81       	ld	r24, Z
    13a0:	88 2f       	mov	r24, r24
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	81 70       	andi	r24, 0x01	; 1
    13a6:	99 27       	eor	r25, r25
    13a8:	89 2b       	or	r24, r25
    13aa:	01 f1       	breq	.+64     	; 0x13ec <__vector_10+0xbe>
    13ac:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    13b0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	09 2e       	mov	r0, r25
    13b8:	00 0c       	add	r0, r0
    13ba:	aa 0b       	sbc	r26, r26
    13bc:	bb 0b       	sbc	r27, r27
    13be:	ac 01       	movw	r20, r24
    13c0:	33 27       	eor	r19, r19
    13c2:	22 27       	eor	r18, r18
    13c4:	84 e8       	ldi	r24, 0x84	; 132
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	fc 01       	movw	r30, r24
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	cc 01       	movw	r24, r24
    13d0:	a0 e0       	ldi	r26, 0x00	; 0
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	82 2b       	or	r24, r18
    13d6:	93 2b       	or	r25, r19
    13d8:	a4 2b       	or	r26, r20
    13da:	b5 2b       	or	r27, r21
    13dc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    13e0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    13e4:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    13e8:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    13ec:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <mtable+0xa>
    13f0:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <mtable+0xb>
    13f4:	89 2b       	or	r24, r25
    13f6:	61 f0       	breq	.+24     	; 0x1410 <__vector_10+0xe2>
    13f8:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <mtable+0xa>
    13fc:	30 91 c9 01 	lds	r19, 0x01C9	; 0x8001c9 <mtable+0xb>
    1400:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0xa>
    1404:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0xb>
    1408:	65 e0       	ldi	r22, 0x05	; 5
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	f9 01       	movw	r30, r18
    140e:	09 95       	icall
    1410:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
    1414:	00 00       	nop
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	ff 91       	pop	r31
    141c:	ef 91       	pop	r30
    141e:	bf 91       	pop	r27
    1420:	af 91       	pop	r26
    1422:	9f 91       	pop	r25
    1424:	8f 91       	pop	r24
    1426:	7f 91       	pop	r23
    1428:	6f 91       	pop	r22
    142a:	5f 91       	pop	r21
    142c:	4f 91       	pop	r20
    142e:	3f 91       	pop	r19
    1430:	2f 91       	pop	r18
    1432:	0f 90       	pop	r0
    1434:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1438:	0f 90       	pop	r0
    143a:	1f 90       	pop	r1
    143c:	18 95       	reti

0000143e <__vector_11>:
    143e:	1f 92       	push	r1
    1440:	0f 92       	push	r0
    1442:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1446:	0f 92       	push	r0
    1448:	11 24       	eor	r1, r1
    144a:	2f 93       	push	r18
    144c:	3f 93       	push	r19
    144e:	4f 93       	push	r20
    1450:	5f 93       	push	r21
    1452:	6f 93       	push	r22
    1454:	7f 93       	push	r23
    1456:	8f 93       	push	r24
    1458:	9f 93       	push	r25
    145a:	af 93       	push	r26
    145c:	bf 93       	push	r27
    145e:	ef 93       	push	r30
    1460:	ff 93       	push	r31
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    146e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1472:	09 2e       	mov	r0, r25
    1474:	00 0c       	add	r0, r0
    1476:	aa 0b       	sbc	r26, r26
    1478:	bb 0b       	sbc	r27, r27
    147a:	ac 01       	movw	r20, r24
    147c:	33 27       	eor	r19, r19
    147e:	22 27       	eor	r18, r18
    1480:	84 e8       	ldi	r24, 0x84	; 132
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	fc 01       	movw	r30, r24
    1486:	80 81       	ld	r24, Z
    1488:	91 81       	ldd	r25, Z+1	; 0x01
    148a:	cc 01       	movw	r24, r24
    148c:	a0 e0       	ldi	r26, 0x00	; 0
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	82 2b       	or	r24, r18
    1492:	93 2b       	or	r25, r19
    1494:	a4 2b       	or	r26, r20
    1496:	b5 2b       	or	r27, r21
    1498:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    149c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    14a0:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    14a4:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    14a8:	86 e3       	ldi	r24, 0x36	; 54
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	fc 01       	movw	r30, r24
    14ae:	80 81       	ld	r24, Z
    14b0:	88 2f       	mov	r24, r24
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	81 70       	andi	r24, 0x01	; 1
    14b6:	99 27       	eor	r25, r25
    14b8:	89 2b       	or	r24, r25
    14ba:	01 f1       	breq	.+64     	; 0x14fc <__vector_11+0xbe>
    14bc:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    14c0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	09 2e       	mov	r0, r25
    14c8:	00 0c       	add	r0, r0
    14ca:	aa 0b       	sbc	r26, r26
    14cc:	bb 0b       	sbc	r27, r27
    14ce:	ac 01       	movw	r20, r24
    14d0:	33 27       	eor	r19, r19
    14d2:	22 27       	eor	r18, r18
    14d4:	84 e8       	ldi	r24, 0x84	; 132
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	fc 01       	movw	r30, r24
    14da:	80 81       	ld	r24, Z
    14dc:	91 81       	ldd	r25, Z+1	; 0x01
    14de:	cc 01       	movw	r24, r24
    14e0:	a0 e0       	ldi	r26, 0x00	; 0
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	82 2b       	or	r24, r18
    14e6:	93 2b       	or	r25, r19
    14e8:	a4 2b       	or	r26, r20
    14ea:	b5 2b       	or	r27, r21
    14ec:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    14f0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    14f4:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    14f8:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    14fc:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <mtable+0xc>
    1500:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <mtable+0xd>
    1504:	89 2b       	or	r24, r25
    1506:	61 f0       	breq	.+24     	; 0x1520 <__vector_11+0xe2>
    1508:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <mtable+0xc>
    150c:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <mtable+0xd>
    1510:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0xc>
    1514:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0xd>
    1518:	66 e0       	ldi	r22, 0x06	; 6
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	f9 01       	movw	r30, r18
    151e:	09 95       	icall
    1520:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
    1524:	00 00       	nop
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	ff 91       	pop	r31
    152c:	ef 91       	pop	r30
    152e:	bf 91       	pop	r27
    1530:	af 91       	pop	r26
    1532:	9f 91       	pop	r25
    1534:	8f 91       	pop	r24
    1536:	7f 91       	pop	r23
    1538:	6f 91       	pop	r22
    153a:	5f 91       	pop	r21
    153c:	4f 91       	pop	r20
    153e:	3f 91       	pop	r19
    1540:	2f 91       	pop	r18
    1542:	0f 90       	pop	r0
    1544:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1548:	0f 90       	pop	r0
    154a:	1f 90       	pop	r1
    154c:	18 95       	reti

0000154e <__vector_12>:
    154e:	1f 92       	push	r1
    1550:	0f 92       	push	r0
    1552:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1556:	0f 92       	push	r0
    1558:	11 24       	eor	r1, r1
    155a:	2f 93       	push	r18
    155c:	3f 93       	push	r19
    155e:	4f 93       	push	r20
    1560:	5f 93       	push	r21
    1562:	6f 93       	push	r22
    1564:	7f 93       	push	r23
    1566:	8f 93       	push	r24
    1568:	9f 93       	push	r25
    156a:	af 93       	push	r26
    156c:	bf 93       	push	r27
    156e:	ef 93       	push	r30
    1570:	ff 93       	push	r31
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    157e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1582:	09 2e       	mov	r0, r25
    1584:	00 0c       	add	r0, r0
    1586:	aa 0b       	sbc	r26, r26
    1588:	bb 0b       	sbc	r27, r27
    158a:	ac 01       	movw	r20, r24
    158c:	33 27       	eor	r19, r19
    158e:	22 27       	eor	r18, r18
    1590:	84 e8       	ldi	r24, 0x84	; 132
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	fc 01       	movw	r30, r24
    1596:	80 81       	ld	r24, Z
    1598:	91 81       	ldd	r25, Z+1	; 0x01
    159a:	cc 01       	movw	r24, r24
    159c:	a0 e0       	ldi	r26, 0x00	; 0
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	82 2b       	or	r24, r18
    15a2:	93 2b       	or	r25, r19
    15a4:	a4 2b       	or	r26, r20
    15a6:	b5 2b       	or	r27, r21
    15a8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    15ac:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    15b0:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    15b4:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    15b8:	86 e3       	ldi	r24, 0x36	; 54
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	fc 01       	movw	r30, r24
    15be:	80 81       	ld	r24, Z
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	81 70       	andi	r24, 0x01	; 1
    15c6:	99 27       	eor	r25, r25
    15c8:	89 2b       	or	r24, r25
    15ca:	01 f1       	breq	.+64     	; 0x160c <__vector_12+0xbe>
    15cc:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    15d0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	09 2e       	mov	r0, r25
    15d8:	00 0c       	add	r0, r0
    15da:	aa 0b       	sbc	r26, r26
    15dc:	bb 0b       	sbc	r27, r27
    15de:	ac 01       	movw	r20, r24
    15e0:	33 27       	eor	r19, r19
    15e2:	22 27       	eor	r18, r18
    15e4:	84 e8       	ldi	r24, 0x84	; 132
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	fc 01       	movw	r30, r24
    15ea:	80 81       	ld	r24, Z
    15ec:	91 81       	ldd	r25, Z+1	; 0x01
    15ee:	cc 01       	movw	r24, r24
    15f0:	a0 e0       	ldi	r26, 0x00	; 0
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	82 2b       	or	r24, r18
    15f6:	93 2b       	or	r25, r19
    15f8:	a4 2b       	or	r26, r20
    15fa:	b5 2b       	or	r27, r21
    15fc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1600:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1604:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1608:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    160c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <mtable+0xe>
    1610:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <mtable+0xf>
    1614:	89 2b       	or	r24, r25
    1616:	61 f0       	breq	.+24     	; 0x1630 <__vector_12+0xe2>
    1618:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <mtable+0xe>
    161c:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <mtable+0xf>
    1620:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0xe>
    1624:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0xf>
    1628:	67 e0       	ldi	r22, 0x07	; 7
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	f9 01       	movw	r30, r18
    162e:	09 95       	icall
    1630:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
    1634:	00 00       	nop
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	ff 91       	pop	r31
    163c:	ef 91       	pop	r30
    163e:	bf 91       	pop	r27
    1640:	af 91       	pop	r26
    1642:	9f 91       	pop	r25
    1644:	8f 91       	pop	r24
    1646:	7f 91       	pop	r23
    1648:	6f 91       	pop	r22
    164a:	5f 91       	pop	r21
    164c:	4f 91       	pop	r20
    164e:	3f 91       	pop	r19
    1650:	2f 91       	pop	r18
    1652:	0f 90       	pop	r0
    1654:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1658:	0f 90       	pop	r0
    165a:	1f 90       	pop	r1
    165c:	18 95       	reti

0000165e <__vector_13>:
    165e:	1f 92       	push	r1
    1660:	0f 92       	push	r0
    1662:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1666:	0f 92       	push	r0
    1668:	11 24       	eor	r1, r1
    166a:	2f 93       	push	r18
    166c:	3f 93       	push	r19
    166e:	4f 93       	push	r20
    1670:	5f 93       	push	r21
    1672:	6f 93       	push	r22
    1674:	7f 93       	push	r23
    1676:	8f 93       	push	r24
    1678:	9f 93       	push	r25
    167a:	af 93       	push	r26
    167c:	bf 93       	push	r27
    167e:	ef 93       	push	r30
    1680:	ff 93       	push	r31
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    168e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1692:	09 2e       	mov	r0, r25
    1694:	00 0c       	add	r0, r0
    1696:	aa 0b       	sbc	r26, r26
    1698:	bb 0b       	sbc	r27, r27
    169a:	ac 01       	movw	r20, r24
    169c:	33 27       	eor	r19, r19
    169e:	22 27       	eor	r18, r18
    16a0:	84 e8       	ldi	r24, 0x84	; 132
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	fc 01       	movw	r30, r24
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01
    16aa:	cc 01       	movw	r24, r24
    16ac:	a0 e0       	ldi	r26, 0x00	; 0
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	82 2b       	or	r24, r18
    16b2:	93 2b       	or	r25, r19
    16b4:	a4 2b       	or	r26, r20
    16b6:	b5 2b       	or	r27, r21
    16b8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    16bc:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    16c0:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    16c4:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    16c8:	86 e3       	ldi	r24, 0x36	; 54
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	fc 01       	movw	r30, r24
    16ce:	80 81       	ld	r24, Z
    16d0:	88 2f       	mov	r24, r24
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	81 70       	andi	r24, 0x01	; 1
    16d6:	99 27       	eor	r25, r25
    16d8:	89 2b       	or	r24, r25
    16da:	01 f1       	breq	.+64     	; 0x171c <__vector_13+0xbe>
    16dc:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    16e0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    16e4:	01 96       	adiw	r24, 0x01	; 1
    16e6:	09 2e       	mov	r0, r25
    16e8:	00 0c       	add	r0, r0
    16ea:	aa 0b       	sbc	r26, r26
    16ec:	bb 0b       	sbc	r27, r27
    16ee:	ac 01       	movw	r20, r24
    16f0:	33 27       	eor	r19, r19
    16f2:	22 27       	eor	r18, r18
    16f4:	84 e8       	ldi	r24, 0x84	; 132
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	fc 01       	movw	r30, r24
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	cc 01       	movw	r24, r24
    1700:	a0 e0       	ldi	r26, 0x00	; 0
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	82 2b       	or	r24, r18
    1706:	93 2b       	or	r25, r19
    1708:	a4 2b       	or	r26, r20
    170a:	b5 2b       	or	r27, r21
    170c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1710:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1714:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1718:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    171c:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <mtable+0x10>
    1720:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <mtable+0x11>
    1724:	89 2b       	or	r24, r25
    1726:	61 f0       	breq	.+24     	; 0x1740 <__vector_13+0xe2>
    1728:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <mtable+0x10>
    172c:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <mtable+0x11>
    1730:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <otable+0x10>
    1734:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <otable+0x11>
    1738:	68 e0       	ldi	r22, 0x08	; 8
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	f9 01       	movw	r30, r18
    173e:	09 95       	icall
    1740:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
    1744:	00 00       	nop
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	ff 91       	pop	r31
    174c:	ef 91       	pop	r30
    174e:	bf 91       	pop	r27
    1750:	af 91       	pop	r26
    1752:	9f 91       	pop	r25
    1754:	8f 91       	pop	r24
    1756:	7f 91       	pop	r23
    1758:	6f 91       	pop	r22
    175a:	5f 91       	pop	r21
    175c:	4f 91       	pop	r20
    175e:	3f 91       	pop	r19
    1760:	2f 91       	pop	r18
    1762:	0f 90       	pop	r0
    1764:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1768:	0f 90       	pop	r0
    176a:	1f 90       	pop	r1
    176c:	18 95       	reti

0000176e <__vector_14>:
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1776:	0f 92       	push	r0
    1778:	11 24       	eor	r1, r1
    177a:	2f 93       	push	r18
    177c:	3f 93       	push	r19
    177e:	4f 93       	push	r20
    1780:	5f 93       	push	r21
    1782:	6f 93       	push	r22
    1784:	7f 93       	push	r23
    1786:	8f 93       	push	r24
    1788:	9f 93       	push	r25
    178a:	af 93       	push	r26
    178c:	bf 93       	push	r27
    178e:	ef 93       	push	r30
    1790:	ff 93       	push	r31
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    179e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    17a2:	09 2e       	mov	r0, r25
    17a4:	00 0c       	add	r0, r0
    17a6:	aa 0b       	sbc	r26, r26
    17a8:	bb 0b       	sbc	r27, r27
    17aa:	ac 01       	movw	r20, r24
    17ac:	33 27       	eor	r19, r19
    17ae:	22 27       	eor	r18, r18
    17b0:	84 e8       	ldi	r24, 0x84	; 132
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	fc 01       	movw	r30, r24
    17b6:	80 81       	ld	r24, Z
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
    17ba:	cc 01       	movw	r24, r24
    17bc:	a0 e0       	ldi	r26, 0x00	; 0
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	82 2b       	or	r24, r18
    17c2:	93 2b       	or	r25, r19
    17c4:	a4 2b       	or	r26, r20
    17c6:	b5 2b       	or	r27, r21
    17c8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    17cc:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    17d0:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    17d4:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    17d8:	86 e3       	ldi	r24, 0x36	; 54
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	fc 01       	movw	r30, r24
    17de:	80 81       	ld	r24, Z
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	81 70       	andi	r24, 0x01	; 1
    17e6:	99 27       	eor	r25, r25
    17e8:	89 2b       	or	r24, r25
    17ea:	01 f1       	breq	.+64     	; 0x182c <__vector_14+0xbe>
    17ec:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    17f0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	09 2e       	mov	r0, r25
    17f8:	00 0c       	add	r0, r0
    17fa:	aa 0b       	sbc	r26, r26
    17fc:	bb 0b       	sbc	r27, r27
    17fe:	ac 01       	movw	r20, r24
    1800:	33 27       	eor	r19, r19
    1802:	22 27       	eor	r18, r18
    1804:	84 e8       	ldi	r24, 0x84	; 132
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	fc 01       	movw	r30, r24
    180a:	80 81       	ld	r24, Z
    180c:	91 81       	ldd	r25, Z+1	; 0x01
    180e:	cc 01       	movw	r24, r24
    1810:	a0 e0       	ldi	r26, 0x00	; 0
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	82 2b       	or	r24, r18
    1816:	93 2b       	or	r25, r19
    1818:	a4 2b       	or	r26, r20
    181a:	b5 2b       	or	r27, r21
    181c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1820:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1824:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1828:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    182c:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <mtable+0x12>
    1830:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <mtable+0x13>
    1834:	89 2b       	or	r24, r25
    1836:	61 f0       	breq	.+24     	; 0x1850 <__vector_14+0xe2>
    1838:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <mtable+0x12>
    183c:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <mtable+0x13>
    1840:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable+0x12>
    1844:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x13>
    1848:	69 e0       	ldi	r22, 0x09	; 9
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	f9 01       	movw	r30, r18
    184e:	09 95       	icall
    1850:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
    1854:	00 00       	nop
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	ff 91       	pop	r31
    185c:	ef 91       	pop	r30
    185e:	bf 91       	pop	r27
    1860:	af 91       	pop	r26
    1862:	9f 91       	pop	r25
    1864:	8f 91       	pop	r24
    1866:	7f 91       	pop	r23
    1868:	6f 91       	pop	r22
    186a:	5f 91       	pop	r21
    186c:	4f 91       	pop	r20
    186e:	3f 91       	pop	r19
    1870:	2f 91       	pop	r18
    1872:	0f 90       	pop	r0
    1874:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1878:	0f 90       	pop	r0
    187a:	1f 90       	pop	r1
    187c:	18 95       	reti

0000187e <__vector_15>:
    187e:	1f 92       	push	r1
    1880:	0f 92       	push	r0
    1882:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1886:	0f 92       	push	r0
    1888:	11 24       	eor	r1, r1
    188a:	2f 93       	push	r18
    188c:	3f 93       	push	r19
    188e:	4f 93       	push	r20
    1890:	5f 93       	push	r21
    1892:	6f 93       	push	r22
    1894:	7f 93       	push	r23
    1896:	8f 93       	push	r24
    1898:	9f 93       	push	r25
    189a:	af 93       	push	r26
    189c:	bf 93       	push	r27
    189e:	ef 93       	push	r30
    18a0:	ff 93       	push	r31
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    18ae:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    18b2:	09 2e       	mov	r0, r25
    18b4:	00 0c       	add	r0, r0
    18b6:	aa 0b       	sbc	r26, r26
    18b8:	bb 0b       	sbc	r27, r27
    18ba:	ac 01       	movw	r20, r24
    18bc:	33 27       	eor	r19, r19
    18be:	22 27       	eor	r18, r18
    18c0:	84 e8       	ldi	r24, 0x84	; 132
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	fc 01       	movw	r30, r24
    18c6:	80 81       	ld	r24, Z
    18c8:	91 81       	ldd	r25, Z+1	; 0x01
    18ca:	cc 01       	movw	r24, r24
    18cc:	a0 e0       	ldi	r26, 0x00	; 0
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	82 2b       	or	r24, r18
    18d2:	93 2b       	or	r25, r19
    18d4:	a4 2b       	or	r26, r20
    18d6:	b5 2b       	or	r27, r21
    18d8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    18dc:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    18e0:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    18e4:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    18e8:	86 e3       	ldi	r24, 0x36	; 54
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	fc 01       	movw	r30, r24
    18ee:	80 81       	ld	r24, Z
    18f0:	88 2f       	mov	r24, r24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	81 70       	andi	r24, 0x01	; 1
    18f6:	99 27       	eor	r25, r25
    18f8:	89 2b       	or	r24, r25
    18fa:	01 f1       	breq	.+64     	; 0x193c <__vector_15+0xbe>
    18fc:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    1900:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1904:	01 96       	adiw	r24, 0x01	; 1
    1906:	09 2e       	mov	r0, r25
    1908:	00 0c       	add	r0, r0
    190a:	aa 0b       	sbc	r26, r26
    190c:	bb 0b       	sbc	r27, r27
    190e:	ac 01       	movw	r20, r24
    1910:	33 27       	eor	r19, r19
    1912:	22 27       	eor	r18, r18
    1914:	84 e8       	ldi	r24, 0x84	; 132
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	fc 01       	movw	r30, r24
    191a:	80 81       	ld	r24, Z
    191c:	91 81       	ldd	r25, Z+1	; 0x01
    191e:	cc 01       	movw	r24, r24
    1920:	a0 e0       	ldi	r26, 0x00	; 0
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	82 2b       	or	r24, r18
    1926:	93 2b       	or	r25, r19
    1928:	a4 2b       	or	r26, r20
    192a:	b5 2b       	or	r27, r21
    192c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1930:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1934:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1938:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    193c:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <mtable+0x14>
    1940:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <mtable+0x15>
    1944:	89 2b       	or	r24, r25
    1946:	61 f0       	breq	.+24     	; 0x1960 <__vector_15+0xe2>
    1948:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <mtable+0x14>
    194c:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <mtable+0x15>
    1950:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x14>
    1954:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x15>
    1958:	6a e0       	ldi	r22, 0x0A	; 10
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	f9 01       	movw	r30, r18
    195e:	09 95       	icall
    1960:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
    1964:	00 00       	nop
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	ff 91       	pop	r31
    196c:	ef 91       	pop	r30
    196e:	bf 91       	pop	r27
    1970:	af 91       	pop	r26
    1972:	9f 91       	pop	r25
    1974:	8f 91       	pop	r24
    1976:	7f 91       	pop	r23
    1978:	6f 91       	pop	r22
    197a:	5f 91       	pop	r21
    197c:	4f 91       	pop	r20
    197e:	3f 91       	pop	r19
    1980:	2f 91       	pop	r18
    1982:	0f 90       	pop	r0
    1984:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1988:	0f 90       	pop	r0
    198a:	1f 90       	pop	r1
    198c:	18 95       	reti

0000198e <__vector_16>:
    198e:	1f 92       	push	r1
    1990:	0f 92       	push	r0
    1992:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1996:	0f 92       	push	r0
    1998:	11 24       	eor	r1, r1
    199a:	2f 93       	push	r18
    199c:	3f 93       	push	r19
    199e:	4f 93       	push	r20
    19a0:	5f 93       	push	r21
    19a2:	6f 93       	push	r22
    19a4:	7f 93       	push	r23
    19a6:	8f 93       	push	r24
    19a8:	9f 93       	push	r25
    19aa:	af 93       	push	r26
    19ac:	bf 93       	push	r27
    19ae:	ef 93       	push	r30
    19b0:	ff 93       	push	r31
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    19be:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    19c2:	09 2e       	mov	r0, r25
    19c4:	00 0c       	add	r0, r0
    19c6:	aa 0b       	sbc	r26, r26
    19c8:	bb 0b       	sbc	r27, r27
    19ca:	ac 01       	movw	r20, r24
    19cc:	33 27       	eor	r19, r19
    19ce:	22 27       	eor	r18, r18
    19d0:	84 e8       	ldi	r24, 0x84	; 132
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	fc 01       	movw	r30, r24
    19d6:	80 81       	ld	r24, Z
    19d8:	91 81       	ldd	r25, Z+1	; 0x01
    19da:	cc 01       	movw	r24, r24
    19dc:	a0 e0       	ldi	r26, 0x00	; 0
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	82 2b       	or	r24, r18
    19e2:	93 2b       	or	r25, r19
    19e4:	a4 2b       	or	r26, r20
    19e6:	b5 2b       	or	r27, r21
    19e8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    19ec:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    19f0:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    19f4:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    19f8:	86 e3       	ldi	r24, 0x36	; 54
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	fc 01       	movw	r30, r24
    19fe:	80 81       	ld	r24, Z
    1a00:	88 2f       	mov	r24, r24
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	81 70       	andi	r24, 0x01	; 1
    1a06:	99 27       	eor	r25, r25
    1a08:	89 2b       	or	r24, r25
    1a0a:	01 f1       	breq	.+64     	; 0x1a4c <__vector_16+0xbe>
    1a0c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    1a10:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1a14:	01 96       	adiw	r24, 0x01	; 1
    1a16:	09 2e       	mov	r0, r25
    1a18:	00 0c       	add	r0, r0
    1a1a:	aa 0b       	sbc	r26, r26
    1a1c:	bb 0b       	sbc	r27, r27
    1a1e:	ac 01       	movw	r20, r24
    1a20:	33 27       	eor	r19, r19
    1a22:	22 27       	eor	r18, r18
    1a24:	84 e8       	ldi	r24, 0x84	; 132
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	fc 01       	movw	r30, r24
    1a2a:	80 81       	ld	r24, Z
    1a2c:	91 81       	ldd	r25, Z+1	; 0x01
    1a2e:	cc 01       	movw	r24, r24
    1a30:	a0 e0       	ldi	r26, 0x00	; 0
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	82 2b       	or	r24, r18
    1a36:	93 2b       	or	r25, r19
    1a38:	a4 2b       	or	r26, r20
    1a3a:	b5 2b       	or	r27, r21
    1a3c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1a40:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1a44:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1a48:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1a4c:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <mtable+0x16>
    1a50:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <mtable+0x17>
    1a54:	89 2b       	or	r24, r25
    1a56:	61 f0       	breq	.+24     	; 0x1a70 <__vector_16+0xe2>
    1a58:	20 91 d4 01 	lds	r18, 0x01D4	; 0x8001d4 <mtable+0x16>
    1a5c:	30 91 d5 01 	lds	r19, 0x01D5	; 0x8001d5 <mtable+0x17>
    1a60:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x16>
    1a64:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x17>
    1a68:	6b e0       	ldi	r22, 0x0B	; 11
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	f9 01       	movw	r30, r18
    1a6e:	09 95       	icall
    1a70:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
    1a74:	00 00       	nop
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	ff 91       	pop	r31
    1a7c:	ef 91       	pop	r30
    1a7e:	bf 91       	pop	r27
    1a80:	af 91       	pop	r26
    1a82:	9f 91       	pop	r25
    1a84:	8f 91       	pop	r24
    1a86:	7f 91       	pop	r23
    1a88:	6f 91       	pop	r22
    1a8a:	5f 91       	pop	r21
    1a8c:	4f 91       	pop	r20
    1a8e:	3f 91       	pop	r19
    1a90:	2f 91       	pop	r18
    1a92:	0f 90       	pop	r0
    1a94:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1a98:	0f 90       	pop	r0
    1a9a:	1f 90       	pop	r1
    1a9c:	18 95       	reti

00001a9e <__vector_17>:
    1a9e:	1f 92       	push	r1
    1aa0:	0f 92       	push	r0
    1aa2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1aa6:	0f 92       	push	r0
    1aa8:	11 24       	eor	r1, r1
    1aaa:	2f 93       	push	r18
    1aac:	3f 93       	push	r19
    1aae:	4f 93       	push	r20
    1ab0:	5f 93       	push	r21
    1ab2:	6f 93       	push	r22
    1ab4:	7f 93       	push	r23
    1ab6:	8f 93       	push	r24
    1ab8:	9f 93       	push	r25
    1aba:	af 93       	push	r26
    1abc:	bf 93       	push	r27
    1abe:	ef 93       	push	r30
    1ac0:	ff 93       	push	r31
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    1ace:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1ad2:	09 2e       	mov	r0, r25
    1ad4:	00 0c       	add	r0, r0
    1ad6:	aa 0b       	sbc	r26, r26
    1ad8:	bb 0b       	sbc	r27, r27
    1ada:	ac 01       	movw	r20, r24
    1adc:	33 27       	eor	r19, r19
    1ade:	22 27       	eor	r18, r18
    1ae0:	84 e8       	ldi	r24, 0x84	; 132
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	80 81       	ld	r24, Z
    1ae8:	91 81       	ldd	r25, Z+1	; 0x01
    1aea:	cc 01       	movw	r24, r24
    1aec:	a0 e0       	ldi	r26, 0x00	; 0
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	82 2b       	or	r24, r18
    1af2:	93 2b       	or	r25, r19
    1af4:	a4 2b       	or	r26, r20
    1af6:	b5 2b       	or	r27, r21
    1af8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1afc:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1b00:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1b04:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1b08:	86 e3       	ldi	r24, 0x36	; 54
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	80 81       	ld	r24, Z
    1b10:	88 2f       	mov	r24, r24
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	81 70       	andi	r24, 0x01	; 1
    1b16:	99 27       	eor	r25, r25
    1b18:	89 2b       	or	r24, r25
    1b1a:	01 f1       	breq	.+64     	; 0x1b5c <__vector_17+0xbe>
    1b1c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    1b20:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	09 2e       	mov	r0, r25
    1b28:	00 0c       	add	r0, r0
    1b2a:	aa 0b       	sbc	r26, r26
    1b2c:	bb 0b       	sbc	r27, r27
    1b2e:	ac 01       	movw	r20, r24
    1b30:	33 27       	eor	r19, r19
    1b32:	22 27       	eor	r18, r18
    1b34:	84 e8       	ldi	r24, 0x84	; 132
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	fc 01       	movw	r30, r24
    1b3a:	80 81       	ld	r24, Z
    1b3c:	91 81       	ldd	r25, Z+1	; 0x01
    1b3e:	cc 01       	movw	r24, r24
    1b40:	a0 e0       	ldi	r26, 0x00	; 0
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	82 2b       	or	r24, r18
    1b46:	93 2b       	or	r25, r19
    1b48:	a4 2b       	or	r26, r20
    1b4a:	b5 2b       	or	r27, r21
    1b4c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1b50:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1b54:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1b58:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1b5c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <mtable+0x18>
    1b60:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <mtable+0x19>
    1b64:	89 2b       	or	r24, r25
    1b66:	61 f0       	breq	.+24     	; 0x1b80 <__vector_17+0xe2>
    1b68:	20 91 d6 01 	lds	r18, 0x01D6	; 0x8001d6 <mtable+0x18>
    1b6c:	30 91 d7 01 	lds	r19, 0x01D7	; 0x8001d7 <mtable+0x19>
    1b70:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x18>
    1b74:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x19>
    1b78:	6c e0       	ldi	r22, 0x0C	; 12
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	f9 01       	movw	r30, r18
    1b7e:	09 95       	icall
    1b80:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
    1b84:	00 00       	nop
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	ff 91       	pop	r31
    1b8c:	ef 91       	pop	r30
    1b8e:	bf 91       	pop	r27
    1b90:	af 91       	pop	r26
    1b92:	9f 91       	pop	r25
    1b94:	8f 91       	pop	r24
    1b96:	7f 91       	pop	r23
    1b98:	6f 91       	pop	r22
    1b9a:	5f 91       	pop	r21
    1b9c:	4f 91       	pop	r20
    1b9e:	3f 91       	pop	r19
    1ba0:	2f 91       	pop	r18
    1ba2:	0f 90       	pop	r0
    1ba4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1ba8:	0f 90       	pop	r0
    1baa:	1f 90       	pop	r1
    1bac:	18 95       	reti

00001bae <__vector_18>:
    1bae:	1f 92       	push	r1
    1bb0:	0f 92       	push	r0
    1bb2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1bb6:	0f 92       	push	r0
    1bb8:	11 24       	eor	r1, r1
    1bba:	2f 93       	push	r18
    1bbc:	3f 93       	push	r19
    1bbe:	4f 93       	push	r20
    1bc0:	5f 93       	push	r21
    1bc2:	6f 93       	push	r22
    1bc4:	7f 93       	push	r23
    1bc6:	8f 93       	push	r24
    1bc8:	9f 93       	push	r25
    1bca:	af 93       	push	r26
    1bcc:	bf 93       	push	r27
    1bce:	ef 93       	push	r30
    1bd0:	ff 93       	push	r31
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    1bde:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1be2:	09 2e       	mov	r0, r25
    1be4:	00 0c       	add	r0, r0
    1be6:	aa 0b       	sbc	r26, r26
    1be8:	bb 0b       	sbc	r27, r27
    1bea:	ac 01       	movw	r20, r24
    1bec:	33 27       	eor	r19, r19
    1bee:	22 27       	eor	r18, r18
    1bf0:	84 e8       	ldi	r24, 0x84	; 132
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	80 81       	ld	r24, Z
    1bf8:	91 81       	ldd	r25, Z+1	; 0x01
    1bfa:	cc 01       	movw	r24, r24
    1bfc:	a0 e0       	ldi	r26, 0x00	; 0
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	82 2b       	or	r24, r18
    1c02:	93 2b       	or	r25, r19
    1c04:	a4 2b       	or	r26, r20
    1c06:	b5 2b       	or	r27, r21
    1c08:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1c0c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1c10:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1c14:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1c18:	86 e3       	ldi	r24, 0x36	; 54
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	80 81       	ld	r24, Z
    1c20:	88 2f       	mov	r24, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	81 70       	andi	r24, 0x01	; 1
    1c26:	99 27       	eor	r25, r25
    1c28:	89 2b       	or	r24, r25
    1c2a:	01 f1       	breq	.+64     	; 0x1c6c <__vector_18+0xbe>
    1c2c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    1c30:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1c34:	01 96       	adiw	r24, 0x01	; 1
    1c36:	09 2e       	mov	r0, r25
    1c38:	00 0c       	add	r0, r0
    1c3a:	aa 0b       	sbc	r26, r26
    1c3c:	bb 0b       	sbc	r27, r27
    1c3e:	ac 01       	movw	r20, r24
    1c40:	33 27       	eor	r19, r19
    1c42:	22 27       	eor	r18, r18
    1c44:	84 e8       	ldi	r24, 0x84	; 132
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	fc 01       	movw	r30, r24
    1c4a:	80 81       	ld	r24, Z
    1c4c:	91 81       	ldd	r25, Z+1	; 0x01
    1c4e:	cc 01       	movw	r24, r24
    1c50:	a0 e0       	ldi	r26, 0x00	; 0
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	82 2b       	or	r24, r18
    1c56:	93 2b       	or	r25, r19
    1c58:	a4 2b       	or	r26, r20
    1c5a:	b5 2b       	or	r27, r21
    1c5c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1c60:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1c64:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1c68:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1c6c:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <mtable+0x1a>
    1c70:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <mtable+0x1b>
    1c74:	89 2b       	or	r24, r25
    1c76:	61 f0       	breq	.+24     	; 0x1c90 <__vector_18+0xe2>
    1c78:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <mtable+0x1a>
    1c7c:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <mtable+0x1b>
    1c80:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x1a>
    1c84:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x1b>
    1c88:	6d e0       	ldi	r22, 0x0D	; 13
    1c8a:	70 e0       	ldi	r23, 0x00	; 0
    1c8c:	f9 01       	movw	r30, r18
    1c8e:	09 95       	icall
    1c90:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
    1c94:	00 00       	nop
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	ff 91       	pop	r31
    1c9c:	ef 91       	pop	r30
    1c9e:	bf 91       	pop	r27
    1ca0:	af 91       	pop	r26
    1ca2:	9f 91       	pop	r25
    1ca4:	8f 91       	pop	r24
    1ca6:	7f 91       	pop	r23
    1ca8:	6f 91       	pop	r22
    1caa:	5f 91       	pop	r21
    1cac:	4f 91       	pop	r20
    1cae:	3f 91       	pop	r19
    1cb0:	2f 91       	pop	r18
    1cb2:	0f 90       	pop	r0
    1cb4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1cb8:	0f 90       	pop	r0
    1cba:	1f 90       	pop	r1
    1cbc:	18 95       	reti

00001cbe <__vector_19>:
    1cbe:	1f 92       	push	r1
    1cc0:	0f 92       	push	r0
    1cc2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1cc6:	0f 92       	push	r0
    1cc8:	11 24       	eor	r1, r1
    1cca:	2f 93       	push	r18
    1ccc:	3f 93       	push	r19
    1cce:	4f 93       	push	r20
    1cd0:	5f 93       	push	r21
    1cd2:	6f 93       	push	r22
    1cd4:	7f 93       	push	r23
    1cd6:	8f 93       	push	r24
    1cd8:	9f 93       	push	r25
    1cda:	af 93       	push	r26
    1cdc:	bf 93       	push	r27
    1cde:	ef 93       	push	r30
    1ce0:	ff 93       	push	r31
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    1cee:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1cf2:	09 2e       	mov	r0, r25
    1cf4:	00 0c       	add	r0, r0
    1cf6:	aa 0b       	sbc	r26, r26
    1cf8:	bb 0b       	sbc	r27, r27
    1cfa:	ac 01       	movw	r20, r24
    1cfc:	33 27       	eor	r19, r19
    1cfe:	22 27       	eor	r18, r18
    1d00:	84 e8       	ldi	r24, 0x84	; 132
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	fc 01       	movw	r30, r24
    1d06:	80 81       	ld	r24, Z
    1d08:	91 81       	ldd	r25, Z+1	; 0x01
    1d0a:	cc 01       	movw	r24, r24
    1d0c:	a0 e0       	ldi	r26, 0x00	; 0
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	82 2b       	or	r24, r18
    1d12:	93 2b       	or	r25, r19
    1d14:	a4 2b       	or	r26, r20
    1d16:	b5 2b       	or	r27, r21
    1d18:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1d1c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1d20:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1d24:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1d28:	86 e3       	ldi	r24, 0x36	; 54
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	80 81       	ld	r24, Z
    1d30:	88 2f       	mov	r24, r24
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	81 70       	andi	r24, 0x01	; 1
    1d36:	99 27       	eor	r25, r25
    1d38:	89 2b       	or	r24, r25
    1d3a:	01 f1       	breq	.+64     	; 0x1d7c <__vector_19+0xbe>
    1d3c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    1d40:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1d44:	01 96       	adiw	r24, 0x01	; 1
    1d46:	09 2e       	mov	r0, r25
    1d48:	00 0c       	add	r0, r0
    1d4a:	aa 0b       	sbc	r26, r26
    1d4c:	bb 0b       	sbc	r27, r27
    1d4e:	ac 01       	movw	r20, r24
    1d50:	33 27       	eor	r19, r19
    1d52:	22 27       	eor	r18, r18
    1d54:	84 e8       	ldi	r24, 0x84	; 132
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	fc 01       	movw	r30, r24
    1d5a:	80 81       	ld	r24, Z
    1d5c:	91 81       	ldd	r25, Z+1	; 0x01
    1d5e:	cc 01       	movw	r24, r24
    1d60:	a0 e0       	ldi	r26, 0x00	; 0
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	82 2b       	or	r24, r18
    1d66:	93 2b       	or	r25, r19
    1d68:	a4 2b       	or	r26, r20
    1d6a:	b5 2b       	or	r27, r21
    1d6c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1d70:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1d74:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1d78:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1d7c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <mtable+0x1c>
    1d80:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <mtable+0x1d>
    1d84:	89 2b       	or	r24, r25
    1d86:	61 f0       	breq	.+24     	; 0x1da0 <__vector_19+0xe2>
    1d88:	20 91 da 01 	lds	r18, 0x01DA	; 0x8001da <mtable+0x1c>
    1d8c:	30 91 db 01 	lds	r19, 0x01DB	; 0x8001db <mtable+0x1d>
    1d90:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x1c>
    1d94:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x1d>
    1d98:	6e e0       	ldi	r22, 0x0E	; 14
    1d9a:	70 e0       	ldi	r23, 0x00	; 0
    1d9c:	f9 01       	movw	r30, r18
    1d9e:	09 95       	icall
    1da0:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
    1da4:	00 00       	nop
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	ff 91       	pop	r31
    1dac:	ef 91       	pop	r30
    1dae:	bf 91       	pop	r27
    1db0:	af 91       	pop	r26
    1db2:	9f 91       	pop	r25
    1db4:	8f 91       	pop	r24
    1db6:	7f 91       	pop	r23
    1db8:	6f 91       	pop	r22
    1dba:	5f 91       	pop	r21
    1dbc:	4f 91       	pop	r20
    1dbe:	3f 91       	pop	r19
    1dc0:	2f 91       	pop	r18
    1dc2:	0f 90       	pop	r0
    1dc4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1dc8:	0f 90       	pop	r0
    1dca:	1f 90       	pop	r1
    1dcc:	18 95       	reti

00001dce <__vector_20>:
    1dce:	1f 92       	push	r1
    1dd0:	0f 92       	push	r0
    1dd2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1dd6:	0f 92       	push	r0
    1dd8:	11 24       	eor	r1, r1
    1dda:	2f 93       	push	r18
    1ddc:	3f 93       	push	r19
    1dde:	4f 93       	push	r20
    1de0:	5f 93       	push	r21
    1de2:	6f 93       	push	r22
    1de4:	7f 93       	push	r23
    1de6:	8f 93       	push	r24
    1de8:	9f 93       	push	r25
    1dea:	af 93       	push	r26
    1dec:	bf 93       	push	r27
    1dee:	ef 93       	push	r30
    1df0:	ff 93       	push	r31
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    1dfe:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1e02:	09 2e       	mov	r0, r25
    1e04:	00 0c       	add	r0, r0
    1e06:	aa 0b       	sbc	r26, r26
    1e08:	bb 0b       	sbc	r27, r27
    1e0a:	ac 01       	movw	r20, r24
    1e0c:	33 27       	eor	r19, r19
    1e0e:	22 27       	eor	r18, r18
    1e10:	84 e8       	ldi	r24, 0x84	; 132
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	fc 01       	movw	r30, r24
    1e16:	80 81       	ld	r24, Z
    1e18:	91 81       	ldd	r25, Z+1	; 0x01
    1e1a:	cc 01       	movw	r24, r24
    1e1c:	a0 e0       	ldi	r26, 0x00	; 0
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	82 2b       	or	r24, r18
    1e22:	93 2b       	or	r25, r19
    1e24:	a4 2b       	or	r26, r20
    1e26:	b5 2b       	or	r27, r21
    1e28:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1e2c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1e30:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1e34:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1e38:	86 e3       	ldi	r24, 0x36	; 54
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	80 81       	ld	r24, Z
    1e40:	88 2f       	mov	r24, r24
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	81 70       	andi	r24, 0x01	; 1
    1e46:	99 27       	eor	r25, r25
    1e48:	89 2b       	or	r24, r25
    1e4a:	01 f1       	breq	.+64     	; 0x1e8c <__vector_20+0xbe>
    1e4c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    1e50:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1e54:	01 96       	adiw	r24, 0x01	; 1
    1e56:	09 2e       	mov	r0, r25
    1e58:	00 0c       	add	r0, r0
    1e5a:	aa 0b       	sbc	r26, r26
    1e5c:	bb 0b       	sbc	r27, r27
    1e5e:	ac 01       	movw	r20, r24
    1e60:	33 27       	eor	r19, r19
    1e62:	22 27       	eor	r18, r18
    1e64:	84 e8       	ldi	r24, 0x84	; 132
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	fc 01       	movw	r30, r24
    1e6a:	80 81       	ld	r24, Z
    1e6c:	91 81       	ldd	r25, Z+1	; 0x01
    1e6e:	cc 01       	movw	r24, r24
    1e70:	a0 e0       	ldi	r26, 0x00	; 0
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	82 2b       	or	r24, r18
    1e76:	93 2b       	or	r25, r19
    1e78:	a4 2b       	or	r26, r20
    1e7a:	b5 2b       	or	r27, r21
    1e7c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1e80:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1e84:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1e88:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1e8c:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <mtable+0x1e>
    1e90:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <mtable+0x1f>
    1e94:	89 2b       	or	r24, r25
    1e96:	61 f0       	breq	.+24     	; 0x1eb0 <__vector_20+0xe2>
    1e98:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <mtable+0x1e>
    1e9c:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <mtable+0x1f>
    1ea0:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x1e>
    1ea4:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x1f>
    1ea8:	6f e0       	ldi	r22, 0x0F	; 15
    1eaa:	70 e0       	ldi	r23, 0x00	; 0
    1eac:	f9 01       	movw	r30, r18
    1eae:	09 95       	icall
    1eb0:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
    1eb4:	00 00       	nop
    1eb6:	df 91       	pop	r29
    1eb8:	cf 91       	pop	r28
    1eba:	ff 91       	pop	r31
    1ebc:	ef 91       	pop	r30
    1ebe:	bf 91       	pop	r27
    1ec0:	af 91       	pop	r26
    1ec2:	9f 91       	pop	r25
    1ec4:	8f 91       	pop	r24
    1ec6:	7f 91       	pop	r23
    1ec8:	6f 91       	pop	r22
    1eca:	5f 91       	pop	r21
    1ecc:	4f 91       	pop	r20
    1ece:	3f 91       	pop	r19
    1ed0:	2f 91       	pop	r18
    1ed2:	0f 90       	pop	r0
    1ed4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1ed8:	0f 90       	pop	r0
    1eda:	1f 90       	pop	r1
    1edc:	18 95       	reti

00001ede <__vector_21>:
    1ede:	1f 92       	push	r1
    1ee0:	0f 92       	push	r0
    1ee2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1ee6:	0f 92       	push	r0
    1ee8:	11 24       	eor	r1, r1
    1eea:	2f 93       	push	r18
    1eec:	3f 93       	push	r19
    1eee:	4f 93       	push	r20
    1ef0:	5f 93       	push	r21
    1ef2:	6f 93       	push	r22
    1ef4:	7f 93       	push	r23
    1ef6:	8f 93       	push	r24
    1ef8:	9f 93       	push	r25
    1efa:	af 93       	push	r26
    1efc:	bf 93       	push	r27
    1efe:	ef 93       	push	r30
    1f00:	ff 93       	push	r31
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
    1f0a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    1f0e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1f12:	09 2e       	mov	r0, r25
    1f14:	00 0c       	add	r0, r0
    1f16:	aa 0b       	sbc	r26, r26
    1f18:	bb 0b       	sbc	r27, r27
    1f1a:	ac 01       	movw	r20, r24
    1f1c:	33 27       	eor	r19, r19
    1f1e:	22 27       	eor	r18, r18
    1f20:	84 e8       	ldi	r24, 0x84	; 132
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	fc 01       	movw	r30, r24
    1f26:	80 81       	ld	r24, Z
    1f28:	91 81       	ldd	r25, Z+1	; 0x01
    1f2a:	cc 01       	movw	r24, r24
    1f2c:	a0 e0       	ldi	r26, 0x00	; 0
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	82 2b       	or	r24, r18
    1f32:	93 2b       	or	r25, r19
    1f34:	a4 2b       	or	r26, r20
    1f36:	b5 2b       	or	r27, r21
    1f38:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1f3c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1f40:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1f44:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1f48:	86 e3       	ldi	r24, 0x36	; 54
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	80 81       	ld	r24, Z
    1f50:	88 2f       	mov	r24, r24
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	81 70       	andi	r24, 0x01	; 1
    1f56:	99 27       	eor	r25, r25
    1f58:	89 2b       	or	r24, r25
    1f5a:	01 f1       	breq	.+64     	; 0x1f9c <__vector_21+0xbe>
    1f5c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    1f60:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    1f64:	01 96       	adiw	r24, 0x01	; 1
    1f66:	09 2e       	mov	r0, r25
    1f68:	00 0c       	add	r0, r0
    1f6a:	aa 0b       	sbc	r26, r26
    1f6c:	bb 0b       	sbc	r27, r27
    1f6e:	ac 01       	movw	r20, r24
    1f70:	33 27       	eor	r19, r19
    1f72:	22 27       	eor	r18, r18
    1f74:	84 e8       	ldi	r24, 0x84	; 132
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	fc 01       	movw	r30, r24
    1f7a:	80 81       	ld	r24, Z
    1f7c:	91 81       	ldd	r25, Z+1	; 0x01
    1f7e:	cc 01       	movw	r24, r24
    1f80:	a0 e0       	ldi	r26, 0x00	; 0
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	82 2b       	or	r24, r18
    1f86:	93 2b       	or	r25, r19
    1f88:	a4 2b       	or	r26, r20
    1f8a:	b5 2b       	or	r27, r21
    1f8c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    1f90:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    1f94:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    1f98:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    1f9c:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <mtable+0x20>
    1fa0:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <mtable+0x21>
    1fa4:	89 2b       	or	r24, r25
    1fa6:	61 f0       	breq	.+24     	; 0x1fc0 <__vector_21+0xe2>
    1fa8:	20 91 de 01 	lds	r18, 0x01DE	; 0x8001de <mtable+0x20>
    1fac:	30 91 df 01 	lds	r19, 0x01DF	; 0x8001df <mtable+0x21>
    1fb0:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x20>
    1fb4:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x21>
    1fb8:	60 e1       	ldi	r22, 0x10	; 16
    1fba:	70 e0       	ldi	r23, 0x00	; 0
    1fbc:	f9 01       	movw	r30, r18
    1fbe:	09 95       	icall
    1fc0:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
    1fc4:	00 00       	nop
    1fc6:	df 91       	pop	r29
    1fc8:	cf 91       	pop	r28
    1fca:	ff 91       	pop	r31
    1fcc:	ef 91       	pop	r30
    1fce:	bf 91       	pop	r27
    1fd0:	af 91       	pop	r26
    1fd2:	9f 91       	pop	r25
    1fd4:	8f 91       	pop	r24
    1fd6:	7f 91       	pop	r23
    1fd8:	6f 91       	pop	r22
    1fda:	5f 91       	pop	r21
    1fdc:	4f 91       	pop	r20
    1fde:	3f 91       	pop	r19
    1fe0:	2f 91       	pop	r18
    1fe2:	0f 90       	pop	r0
    1fe4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1fe8:	0f 90       	pop	r0
    1fea:	1f 90       	pop	r1
    1fec:	18 95       	reti

00001fee <__vector_22>:
    1fee:	1f 92       	push	r1
    1ff0:	0f 92       	push	r0
    1ff2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1ff6:	0f 92       	push	r0
    1ff8:	11 24       	eor	r1, r1
    1ffa:	2f 93       	push	r18
    1ffc:	3f 93       	push	r19
    1ffe:	4f 93       	push	r20
    2000:	5f 93       	push	r21
    2002:	6f 93       	push	r22
    2004:	7f 93       	push	r23
    2006:	8f 93       	push	r24
    2008:	9f 93       	push	r25
    200a:	af 93       	push	r26
    200c:	bf 93       	push	r27
    200e:	ef 93       	push	r30
    2010:	ff 93       	push	r31
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    201e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    2022:	09 2e       	mov	r0, r25
    2024:	00 0c       	add	r0, r0
    2026:	aa 0b       	sbc	r26, r26
    2028:	bb 0b       	sbc	r27, r27
    202a:	ac 01       	movw	r20, r24
    202c:	33 27       	eor	r19, r19
    202e:	22 27       	eor	r18, r18
    2030:	84 e8       	ldi	r24, 0x84	; 132
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	fc 01       	movw	r30, r24
    2036:	80 81       	ld	r24, Z
    2038:	91 81       	ldd	r25, Z+1	; 0x01
    203a:	cc 01       	movw	r24, r24
    203c:	a0 e0       	ldi	r26, 0x00	; 0
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	82 2b       	or	r24, r18
    2042:	93 2b       	or	r25, r19
    2044:	a4 2b       	or	r26, r20
    2046:	b5 2b       	or	r27, r21
    2048:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    204c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    2050:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    2054:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    2058:	86 e3       	ldi	r24, 0x36	; 54
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	fc 01       	movw	r30, r24
    205e:	80 81       	ld	r24, Z
    2060:	88 2f       	mov	r24, r24
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	81 70       	andi	r24, 0x01	; 1
    2066:	99 27       	eor	r25, r25
    2068:	89 2b       	or	r24, r25
    206a:	01 f1       	breq	.+64     	; 0x20ac <__vector_22+0xbe>
    206c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    2070:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    2074:	01 96       	adiw	r24, 0x01	; 1
    2076:	09 2e       	mov	r0, r25
    2078:	00 0c       	add	r0, r0
    207a:	aa 0b       	sbc	r26, r26
    207c:	bb 0b       	sbc	r27, r27
    207e:	ac 01       	movw	r20, r24
    2080:	33 27       	eor	r19, r19
    2082:	22 27       	eor	r18, r18
    2084:	84 e8       	ldi	r24, 0x84	; 132
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	fc 01       	movw	r30, r24
    208a:	80 81       	ld	r24, Z
    208c:	91 81       	ldd	r25, Z+1	; 0x01
    208e:	cc 01       	movw	r24, r24
    2090:	a0 e0       	ldi	r26, 0x00	; 0
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	82 2b       	or	r24, r18
    2096:	93 2b       	or	r25, r19
    2098:	a4 2b       	or	r26, r20
    209a:	b5 2b       	or	r27, r21
    209c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timestamp>
    20a0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timestamp+0x1>
    20a4:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <timestamp+0x2>
    20a8:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <timestamp+0x3>
    20ac:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <mtable+0x22>
    20b0:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <mtable+0x23>
    20b4:	89 2b       	or	r24, r25
    20b6:	61 f0       	breq	.+24     	; 0x20d0 <__vector_22+0xe2>
    20b8:	20 91 e0 01 	lds	r18, 0x01E0	; 0x8001e0 <mtable+0x22>
    20bc:	30 91 e1 01 	lds	r19, 0x01E1	; 0x8001e1 <mtable+0x23>
    20c0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x22>
    20c4:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x23>
    20c8:	61 e1       	ldi	r22, 0x11	; 17
    20ca:	70 e0       	ldi	r23, 0x00	; 0
    20cc:	f9 01       	movw	r30, r18
    20ce:	09 95       	icall
    20d0:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
    20d4:	00 00       	nop
    20d6:	df 91       	pop	r29
    20d8:	cf 91       	pop	r28
    20da:	ff 91       	pop	r31
    20dc:	ef 91       	pop	r30
    20de:	bf 91       	pop	r27
    20e0:	af 91       	pop	r26
    20e2:	9f 91       	pop	r25
    20e4:	8f 91       	pop	r24
    20e6:	7f 91       	pop	r23
    20e8:	6f 91       	pop	r22
    20ea:	5f 91       	pop	r21
    20ec:	4f 91       	pop	r20
    20ee:	3f 91       	pop	r19
    20f0:	2f 91       	pop	r18
    20f2:	0f 90       	pop	r0
    20f4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    20f8:	0f 90       	pop	r0
    20fa:	1f 90       	pop	r1
    20fc:	18 95       	reti

000020fe <enqueueByDeadline>:
    20fe:	cf 93       	push	r28
    2100:	df 93       	push	r29
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	28 97       	sbiw	r28, 0x08	; 8
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	9e 83       	std	Y+6, r25	; 0x06
    2114:	8d 83       	std	Y+5, r24	; 0x05
    2116:	78 87       	std	Y+8, r23	; 0x08
    2118:	6f 83       	std	Y+7, r22	; 0x07
    211a:	1a 82       	std	Y+2, r1	; 0x02
    211c:	19 82       	std	Y+1, r1	; 0x01
    211e:	8f 81       	ldd	r24, Y+7	; 0x07
    2120:	98 85       	ldd	r25, Y+8	; 0x08
    2122:	fc 01       	movw	r30, r24
    2124:	80 81       	ld	r24, Z
    2126:	91 81       	ldd	r25, Z+1	; 0x01
    2128:	9c 83       	std	Y+4, r25	; 0x04
    212a:	8b 83       	std	Y+3, r24	; 0x03
    212c:	0b c0       	rjmp	.+22     	; 0x2144 <enqueueByDeadline+0x46>
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	9c 81       	ldd	r25, Y+4	; 0x04
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	fc 01       	movw	r30, r24
    213c:	80 81       	ld	r24, Z
    213e:	91 81       	ldd	r25, Z+1	; 0x01
    2140:	9c 83       	std	Y+4, r25	; 0x04
    2142:	8b 83       	std	Y+3, r24	; 0x03
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	89 2b       	or	r24, r25
    214a:	99 f0       	breq	.+38     	; 0x2172 <enqueueByDeadline+0x74>
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	fc 01       	movw	r30, r24
    2152:	26 81       	ldd	r18, Z+6	; 0x06
    2154:	37 81       	ldd	r19, Z+7	; 0x07
    2156:	40 85       	ldd	r20, Z+8	; 0x08
    2158:	51 85       	ldd	r21, Z+9	; 0x09
    215a:	8d 81       	ldd	r24, Y+5	; 0x05
    215c:	9e 81       	ldd	r25, Y+6	; 0x06
    215e:	fc 01       	movw	r30, r24
    2160:	86 81       	ldd	r24, Z+6	; 0x06
    2162:	97 81       	ldd	r25, Z+7	; 0x07
    2164:	a0 85       	ldd	r26, Z+8	; 0x08
    2166:	b1 85       	ldd	r27, Z+9	; 0x09
    2168:	82 17       	cp	r24, r18
    216a:	93 07       	cpc	r25, r19
    216c:	a4 07       	cpc	r26, r20
    216e:	b5 07       	cpc	r27, r21
    2170:	f4 f6       	brge	.-68     	; 0x212e <enqueueByDeadline+0x30>
    2172:	8d 81       	ldd	r24, Y+5	; 0x05
    2174:	9e 81       	ldd	r25, Y+6	; 0x06
    2176:	2b 81       	ldd	r18, Y+3	; 0x03
    2178:	3c 81       	ldd	r19, Y+4	; 0x04
    217a:	fc 01       	movw	r30, r24
    217c:	31 83       	std	Z+1, r19	; 0x01
    217e:	20 83       	st	Z, r18
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	9a 81       	ldd	r25, Y+2	; 0x02
    2184:	89 2b       	or	r24, r25
    2186:	41 f4       	brne	.+16     	; 0x2198 <enqueueByDeadline+0x9a>
    2188:	8f 81       	ldd	r24, Y+7	; 0x07
    218a:	98 85       	ldd	r25, Y+8	; 0x08
    218c:	2d 81       	ldd	r18, Y+5	; 0x05
    218e:	3e 81       	ldd	r19, Y+6	; 0x06
    2190:	fc 01       	movw	r30, r24
    2192:	31 83       	std	Z+1, r19	; 0x01
    2194:	20 83       	st	Z, r18
    2196:	07 c0       	rjmp	.+14     	; 0x21a6 <enqueueByDeadline+0xa8>
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	9a 81       	ldd	r25, Y+2	; 0x02
    219c:	2d 81       	ldd	r18, Y+5	; 0x05
    219e:	3e 81       	ldd	r19, Y+6	; 0x06
    21a0:	fc 01       	movw	r30, r24
    21a2:	31 83       	std	Z+1, r19	; 0x01
    21a4:	20 83       	st	Z, r18
    21a6:	00 00       	nop
    21a8:	28 96       	adiw	r28, 0x08	; 8
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	08 95       	ret

000021ba <enqueueByBaseline>:
    21ba:	cf 93       	push	r28
    21bc:	df 93       	push	r29
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	28 97       	sbiw	r28, 0x08	; 8
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	9e 83       	std	Y+6, r25	; 0x06
    21d0:	8d 83       	std	Y+5, r24	; 0x05
    21d2:	78 87       	std	Y+8, r23	; 0x08
    21d4:	6f 83       	std	Y+7, r22	; 0x07
    21d6:	1a 82       	std	Y+2, r1	; 0x02
    21d8:	19 82       	std	Y+1, r1	; 0x01
    21da:	8f 81       	ldd	r24, Y+7	; 0x07
    21dc:	98 85       	ldd	r25, Y+8	; 0x08
    21de:	fc 01       	movw	r30, r24
    21e0:	80 81       	ld	r24, Z
    21e2:	91 81       	ldd	r25, Z+1	; 0x01
    21e4:	9c 83       	std	Y+4, r25	; 0x04
    21e6:	8b 83       	std	Y+3, r24	; 0x03
    21e8:	0b c0       	rjmp	.+22     	; 0x2200 <enqueueByBaseline+0x46>
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	9c 81       	ldd	r25, Y+4	; 0x04
    21ee:	9a 83       	std	Y+2, r25	; 0x02
    21f0:	89 83       	std	Y+1, r24	; 0x01
    21f2:	8b 81       	ldd	r24, Y+3	; 0x03
    21f4:	9c 81       	ldd	r25, Y+4	; 0x04
    21f6:	fc 01       	movw	r30, r24
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	9c 83       	std	Y+4, r25	; 0x04
    21fe:	8b 83       	std	Y+3, r24	; 0x03
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	9c 81       	ldd	r25, Y+4	; 0x04
    2204:	89 2b       	or	r24, r25
    2206:	99 f0       	breq	.+38     	; 0x222e <enqueueByBaseline+0x74>
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	fc 01       	movw	r30, r24
    220e:	22 81       	ldd	r18, Z+2	; 0x02
    2210:	33 81       	ldd	r19, Z+3	; 0x03
    2212:	44 81       	ldd	r20, Z+4	; 0x04
    2214:	55 81       	ldd	r21, Z+5	; 0x05
    2216:	8d 81       	ldd	r24, Y+5	; 0x05
    2218:	9e 81       	ldd	r25, Y+6	; 0x06
    221a:	fc 01       	movw	r30, r24
    221c:	82 81       	ldd	r24, Z+2	; 0x02
    221e:	93 81       	ldd	r25, Z+3	; 0x03
    2220:	a4 81       	ldd	r26, Z+4	; 0x04
    2222:	b5 81       	ldd	r27, Z+5	; 0x05
    2224:	82 17       	cp	r24, r18
    2226:	93 07       	cpc	r25, r19
    2228:	a4 07       	cpc	r26, r20
    222a:	b5 07       	cpc	r27, r21
    222c:	f4 f6       	brge	.-68     	; 0x21ea <enqueueByBaseline+0x30>
    222e:	8d 81       	ldd	r24, Y+5	; 0x05
    2230:	9e 81       	ldd	r25, Y+6	; 0x06
    2232:	2b 81       	ldd	r18, Y+3	; 0x03
    2234:	3c 81       	ldd	r19, Y+4	; 0x04
    2236:	fc 01       	movw	r30, r24
    2238:	31 83       	std	Z+1, r19	; 0x01
    223a:	20 83       	st	Z, r18
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	9a 81       	ldd	r25, Y+2	; 0x02
    2240:	89 2b       	or	r24, r25
    2242:	41 f4       	brne	.+16     	; 0x2254 <enqueueByBaseline+0x9a>
    2244:	8f 81       	ldd	r24, Y+7	; 0x07
    2246:	98 85       	ldd	r25, Y+8	; 0x08
    2248:	2d 81       	ldd	r18, Y+5	; 0x05
    224a:	3e 81       	ldd	r19, Y+6	; 0x06
    224c:	fc 01       	movw	r30, r24
    224e:	31 83       	std	Z+1, r19	; 0x01
    2250:	20 83       	st	Z, r18
    2252:	07 c0       	rjmp	.+14     	; 0x2262 <enqueueByBaseline+0xa8>
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	9a 81       	ldd	r25, Y+2	; 0x02
    2258:	2d 81       	ldd	r18, Y+5	; 0x05
    225a:	3e 81       	ldd	r19, Y+6	; 0x06
    225c:	fc 01       	movw	r30, r24
    225e:	31 83       	std	Z+1, r19	; 0x01
    2260:	20 83       	st	Z, r18
    2262:	00 00       	nop
    2264:	28 96       	adiw	r28, 0x08	; 8
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	df 91       	pop	r29
    2272:	cf 91       	pop	r28
    2274:	08 95       	ret

00002276 <dequeue>:
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
    227a:	00 d0       	rcall	.+0      	; 0x227c <dequeue+0x6>
    227c:	00 d0       	rcall	.+0      	; 0x227e <dequeue+0x8>
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	9c 83       	std	Y+4, r25	; 0x04
    2284:	8b 83       	std	Y+3, r24	; 0x03
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	9c 81       	ldd	r25, Y+4	; 0x04
    228a:	fc 01       	movw	r30, r24
    228c:	80 81       	ld	r24, Z
    228e:	91 81       	ldd	r25, Z+1	; 0x01
    2290:	9a 83       	std	Y+2, r25	; 0x02
    2292:	89 83       	std	Y+1, r24	; 0x01
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	9a 81       	ldd	r25, Y+2	; 0x02
    2298:	89 2b       	or	r24, r25
    229a:	59 f0       	breq	.+22     	; 0x22b2 <dequeue+0x3c>
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	9a 81       	ldd	r25, Y+2	; 0x02
    22a0:	fc 01       	movw	r30, r24
    22a2:	20 81       	ld	r18, Z
    22a4:	31 81       	ldd	r19, Z+1	; 0x01
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	9c 81       	ldd	r25, Y+4	; 0x04
    22aa:	fc 01       	movw	r30, r24
    22ac:	31 83       	std	Z+1, r19	; 0x01
    22ae:	20 83       	st	Z, r18
    22b0:	16 c0       	rjmp	.+44     	; 0x22de <dequeue+0x68>
    22b2:	8c ee       	ldi	r24, 0xEC	; 236
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	2f ef       	ldi	r18, 0xFF	; 255
    22b8:	fc 01       	movw	r30, r24
    22ba:	20 83       	st	Z, r18
    22bc:	8d ee       	ldi	r24, 0xED	; 237
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	2f ef       	ldi	r18, 0xFF	; 255
    22c2:	fc 01       	movw	r30, r24
    22c4:	20 83       	st	Z, r18
    22c6:	8e ee       	ldi	r24, 0xEE	; 238
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	2f ef       	ldi	r18, 0xFF	; 255
    22cc:	fc 01       	movw	r30, r24
    22ce:	20 83       	st	Z, r18
    22d0:	83 e5       	ldi	r24, 0x53	; 83
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	21 e0       	ldi	r18, 0x01	; 1
    22d6:	fc 01       	movw	r30, r24
    22d8:	20 83       	st	Z, r18
    22da:	88 95       	sleep
    22dc:	f9 cf       	rjmp	.-14     	; 0x22d0 <dequeue+0x5a>
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	9a 81       	ldd	r25, Y+2	; 0x02
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	08 95       	ret

000022f0 <insert>:
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <insert+0x6>
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <insert+0x8>
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	9a 83       	std	Y+2, r25	; 0x02
    22fe:	89 83       	std	Y+1, r24	; 0x01
    2300:	7c 83       	std	Y+4, r23	; 0x04
    2302:	6b 83       	std	Y+3, r22	; 0x03
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	9c 81       	ldd	r25, Y+4	; 0x04
    2308:	fc 01       	movw	r30, r24
    230a:	20 81       	ld	r18, Z
    230c:	31 81       	ldd	r19, Z+1	; 0x01
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	9a 81       	ldd	r25, Y+2	; 0x02
    2312:	fc 01       	movw	r30, r24
    2314:	31 83       	std	Z+1, r19	; 0x01
    2316:	20 83       	st	Z, r18
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	9c 81       	ldd	r25, Y+4	; 0x04
    231c:	29 81       	ldd	r18, Y+1	; 0x01
    231e:	3a 81       	ldd	r19, Y+2	; 0x02
    2320:	fc 01       	movw	r30, r24
    2322:	31 83       	std	Z+1, r19	; 0x01
    2324:	20 83       	st	Z, r18
    2326:	00 00       	nop
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	08 95       	ret

00002336 <push>:
    2336:	cf 93       	push	r28
    2338:	df 93       	push	r29
    233a:	00 d0       	rcall	.+0      	; 0x233c <push+0x6>
    233c:	00 d0       	rcall	.+0      	; 0x233e <push+0x8>
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	9a 83       	std	Y+2, r25	; 0x02
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	7c 83       	std	Y+4, r23	; 0x04
    2348:	6b 83       	std	Y+3, r22	; 0x03
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	fc 01       	movw	r30, r24
    2350:	20 81       	ld	r18, Z
    2352:	31 81       	ldd	r19, Z+1	; 0x01
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	9a 81       	ldd	r25, Y+2	; 0x02
    2358:	fc 01       	movw	r30, r24
    235a:	31 83       	std	Z+1, r19	; 0x01
    235c:	20 83       	st	Z, r18
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	9c 81       	ldd	r25, Y+4	; 0x04
    2362:	29 81       	ldd	r18, Y+1	; 0x01
    2364:	3a 81       	ldd	r19, Y+2	; 0x02
    2366:	fc 01       	movw	r30, r24
    2368:	31 83       	std	Z+1, r19	; 0x01
    236a:	20 83       	st	Z, r18
    236c:	00 00       	nop
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	df 91       	pop	r29
    2378:	cf 91       	pop	r28
    237a:	08 95       	ret

0000237c <pop>:
    237c:	cf 93       	push	r28
    237e:	df 93       	push	r29
    2380:	00 d0       	rcall	.+0      	; 0x2382 <pop+0x6>
    2382:	00 d0       	rcall	.+0      	; 0x2384 <pop+0x8>
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	9c 83       	std	Y+4, r25	; 0x04
    238a:	8b 83       	std	Y+3, r24	; 0x03
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	9c 81       	ldd	r25, Y+4	; 0x04
    2390:	fc 01       	movw	r30, r24
    2392:	80 81       	ld	r24, Z
    2394:	91 81       	ldd	r25, Z+1	; 0x01
    2396:	9a 83       	std	Y+2, r25	; 0x02
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	9a 81       	ldd	r25, Y+2	; 0x02
    239e:	fc 01       	movw	r30, r24
    23a0:	20 81       	ld	r18, Z
    23a2:	31 81       	ldd	r19, Z+1	; 0x01
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	9c 81       	ldd	r25, Y+4	; 0x04
    23a8:	fc 01       	movw	r30, r24
    23aa:	31 83       	std	Z+1, r19	; 0x01
    23ac:	20 83       	st	Z, r18
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	9a 81       	ldd	r25, Y+2	; 0x02
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	08 95       	ret

000023c0 <__vector_9>:
    23c0:	1f 92       	push	r1
    23c2:	0f 92       	push	r0
    23c4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    23c8:	0f 92       	push	r0
    23ca:	11 24       	eor	r1, r1
    23cc:	2f 93       	push	r18
    23ce:	3f 93       	push	r19
    23d0:	4f 93       	push	r20
    23d2:	5f 93       	push	r21
    23d4:	6f 93       	push	r22
    23d6:	7f 93       	push	r23
    23d8:	8f 93       	push	r24
    23da:	9f 93       	push	r25
    23dc:	af 93       	push	r26
    23de:	bf 93       	push	r27
    23e0:	ef 93       	push	r30
    23e2:	ff 93       	push	r31
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    23f0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    23f4:	01 96       	adiw	r24, 0x01	; 1
    23f6:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <overflows+0x1>
    23fa:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <overflows>
    23fe:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timerQ>
    2402:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timerQ+0x1>
    2406:	89 2b       	or	r24, r25
    2408:	09 f4       	brne	.+2      	; 0x240c <__vector_9+0x4c>
    240a:	4a c0       	rjmp	.+148    	; 0x24a0 <__vector_9+0xe0>
    240c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timerQ>
    2410:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timerQ+0x1>
    2414:	fc 01       	movw	r30, r24
    2416:	82 81       	ldd	r24, Z+2	; 0x02
    2418:	93 81       	ldd	r25, Z+3	; 0x03
    241a:	a4 81       	ldd	r26, Z+4	; 0x04
    241c:	b5 81       	ldd	r27, Z+5	; 0x05
    241e:	cd 01       	movw	r24, r26
    2420:	bb 27       	eor	r27, r27
    2422:	97 fd       	sbrc	r25, 7
    2424:	b0 95       	com	r27
    2426:	ab 2f       	mov	r26, r27
    2428:	9c 01       	movw	r18, r24
    242a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    242e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    2432:	28 17       	cp	r18, r24
    2434:	39 07       	cpc	r19, r25
    2436:	a1 f5       	brne	.+104    	; 0x24a0 <__vector_9+0xe0>
    2438:	28 e8       	ldi	r18, 0x88	; 136
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timerQ>
    2440:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timerQ+0x1>
    2444:	fc 01       	movw	r30, r24
    2446:	82 81       	ldd	r24, Z+2	; 0x02
    2448:	93 81       	ldd	r25, Z+3	; 0x03
    244a:	a4 81       	ldd	r26, Z+4	; 0x04
    244c:	b5 81       	ldd	r27, Z+5	; 0x05
    244e:	ac 01       	movw	r20, r24
    2450:	84 e8       	ldi	r24, 0x84	; 132
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	fc 01       	movw	r30, r24
    2456:	80 81       	ld	r24, Z
    2458:	91 81       	ldd	r25, Z+1	; 0x01
    245a:	ba 01       	movw	r22, r20
    245c:	68 1b       	sub	r22, r24
    245e:	79 0b       	sbc	r23, r25
    2460:	cb 01       	movw	r24, r22
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	39 f4       	brne	.+14     	; 0x2474 <__vector_9+0xb4>
    2466:	84 e8       	ldi	r24, 0x84	; 132
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	fc 01       	movw	r30, r24
    246c:	80 81       	ld	r24, Z
    246e:	91 81       	ldd	r25, Z+1	; 0x01
    2470:	01 96       	adiw	r24, 0x01	; 1
    2472:	09 c0       	rjmp	.+18     	; 0x2486 <__vector_9+0xc6>
    2474:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timerQ>
    2478:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timerQ+0x1>
    247c:	fc 01       	movw	r30, r24
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	a4 81       	ldd	r26, Z+4	; 0x04
    2484:	b5 81       	ldd	r27, Z+5	; 0x05
    2486:	f9 01       	movw	r30, r18
    2488:	91 83       	std	Z+1, r25	; 0x01
    248a:	80 83       	st	Z, r24
    248c:	8f e6       	ldi	r24, 0x6F	; 111
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	2f e6       	ldi	r18, 0x6F	; 111
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	f9 01       	movw	r30, r18
    2496:	20 81       	ld	r18, Z
    2498:	22 60       	ori	r18, 0x02	; 2
    249a:	fc 01       	movw	r30, r24
    249c:	20 83       	st	Z, r18
    249e:	09 c0       	rjmp	.+18     	; 0x24b2 <__vector_9+0xf2>
    24a0:	8f e6       	ldi	r24, 0x6F	; 111
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	2f e6       	ldi	r18, 0x6F	; 111
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	f9 01       	movw	r30, r18
    24aa:	20 81       	ld	r18, Z
    24ac:	2d 7f       	andi	r18, 0xFD	; 253
    24ae:	fc 01       	movw	r30, r24
    24b0:	20 83       	st	Z, r18
    24b2:	00 00       	nop
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	ff 91       	pop	r31
    24ba:	ef 91       	pop	r30
    24bc:	bf 91       	pop	r27
    24be:	af 91       	pop	r26
    24c0:	9f 91       	pop	r25
    24c2:	8f 91       	pop	r24
    24c4:	7f 91       	pop	r23
    24c6:	6f 91       	pop	r22
    24c8:	5f 91       	pop	r21
    24ca:	4f 91       	pop	r20
    24cc:	3f 91       	pop	r19
    24ce:	2f 91       	pop	r18
    24d0:	0f 90       	pop	r0
    24d2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    24d6:	0f 90       	pop	r0
    24d8:	1f 90       	pop	r1
    24da:	18 95       	reti

000024dc <__vector_7>:
    24dc:	1f 92       	push	r1
    24de:	0f 92       	push	r0
    24e0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    24e4:	0f 92       	push	r0
    24e6:	11 24       	eor	r1, r1
    24e8:	ef 92       	push	r14
    24ea:	ff 92       	push	r15
    24ec:	0f 93       	push	r16
    24ee:	1f 93       	push	r17
    24f0:	2f 93       	push	r18
    24f2:	3f 93       	push	r19
    24f4:	4f 93       	push	r20
    24f6:	5f 93       	push	r21
    24f8:	6f 93       	push	r22
    24fa:	7f 93       	push	r23
    24fc:	8f 93       	push	r24
    24fe:	9f 93       	push	r25
    2500:	af 93       	push	r26
    2502:	bf 93       	push	r27
    2504:	ef 93       	push	r30
    2506:	ff 93       	push	r31
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29
    250c:	00 d0       	rcall	.+0      	; 0x250e <__vector_7+0x32>
    250e:	00 d0       	rcall	.+0      	; 0x2510 <__vector_7+0x34>
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    2514:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    2518:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    251c:	09 2e       	mov	r0, r25
    251e:	00 0c       	add	r0, r0
    2520:	aa 0b       	sbc	r26, r26
    2522:	bb 0b       	sbc	r27, r27
    2524:	ac 01       	movw	r20, r24
    2526:	33 27       	eor	r19, r19
    2528:	22 27       	eor	r18, r18
    252a:	84 e8       	ldi	r24, 0x84	; 132
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	fc 01       	movw	r30, r24
    2530:	80 81       	ld	r24, Z
    2532:	91 81       	ldd	r25, Z+1	; 0x01
    2534:	cc 01       	movw	r24, r24
    2536:	a0 e0       	ldi	r26, 0x00	; 0
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	82 2b       	or	r24, r18
    253c:	93 2b       	or	r25, r19
    253e:	a4 2b       	or	r26, r20
    2540:	b5 2b       	or	r27, r21
    2542:	89 83       	std	Y+1, r24	; 0x01
    2544:	9a 83       	std	Y+2, r25	; 0x02
    2546:	ab 83       	std	Y+3, r26	; 0x03
    2548:	bc 83       	std	Y+4, r27	; 0x04
    254a:	86 e3       	ldi	r24, 0x36	; 54
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	fc 01       	movw	r30, r24
    2550:	80 81       	ld	r24, Z
    2552:	88 2f       	mov	r24, r24
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	81 70       	andi	r24, 0x01	; 1
    2558:	99 27       	eor	r25, r25
    255a:	89 2b       	or	r24, r25
    255c:	29 f1       	breq	.+74     	; 0x25a8 <__vector_7+0xcc>
    255e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    2562:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    2566:	01 96       	adiw	r24, 0x01	; 1
    2568:	09 2e       	mov	r0, r25
    256a:	00 0c       	add	r0, r0
    256c:	aa 0b       	sbc	r26, r26
    256e:	bb 0b       	sbc	r27, r27
    2570:	ac 01       	movw	r20, r24
    2572:	33 27       	eor	r19, r19
    2574:	22 27       	eor	r18, r18
    2576:	84 e8       	ldi	r24, 0x84	; 132
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	fc 01       	movw	r30, r24
    257c:	80 81       	ld	r24, Z
    257e:	91 81       	ldd	r25, Z+1	; 0x01
    2580:	cc 01       	movw	r24, r24
    2582:	a0 e0       	ldi	r26, 0x00	; 0
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	82 2b       	or	r24, r18
    2588:	93 2b       	or	r25, r19
    258a:	a4 2b       	or	r26, r20
    258c:	b5 2b       	or	r27, r21
    258e:	89 83       	std	Y+1, r24	; 0x01
    2590:	9a 83       	std	Y+2, r25	; 0x02
    2592:	ab 83       	std	Y+3, r26	; 0x03
    2594:	bc 83       	std	Y+4, r27	; 0x04
    2596:	08 c0       	rjmp	.+16     	; 0x25a8 <__vector_7+0xcc>
    2598:	8e e1       	ldi	r24, 0x1E	; 30
    259a:	91 e0       	ldi	r25, 0x01	; 1
    259c:	0e 94 3b 11 	call	0x2276	; 0x2276 <dequeue>
    25a0:	6c e1       	ldi	r22, 0x1C	; 28
    25a2:	71 e0       	ldi	r23, 0x01	; 1
    25a4:	0e 94 7f 10 	call	0x20fe	; 0x20fe <enqueueByDeadline>
    25a8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timerQ>
    25ac:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timerQ+0x1>
    25b0:	89 2b       	or	r24, r25
    25b2:	d1 f0       	breq	.+52     	; 0x25e8 <__vector_7+0x10c>
    25b4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timerQ>
    25b8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timerQ+0x1>
    25bc:	fc 01       	movw	r30, r24
    25be:	22 81       	ldd	r18, Z+2	; 0x02
    25c0:	33 81       	ldd	r19, Z+3	; 0x03
    25c2:	44 81       	ldd	r20, Z+4	; 0x04
    25c4:	55 81       	ldd	r21, Z+5	; 0x05
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ca:	ab 81       	ldd	r26, Y+3	; 0x03
    25cc:	bc 81       	ldd	r27, Y+4	; 0x04
    25ce:	79 01       	movw	r14, r18
    25d0:	8a 01       	movw	r16, r20
    25d2:	e8 1a       	sub	r14, r24
    25d4:	f9 0a       	sbc	r15, r25
    25d6:	0a 0b       	sbc	r16, r26
    25d8:	1b 0b       	sbc	r17, r27
    25da:	d8 01       	movw	r26, r16
    25dc:	c7 01       	movw	r24, r14
    25de:	18 16       	cp	r1, r24
    25e0:	19 06       	cpc	r1, r25
    25e2:	1a 06       	cpc	r1, r26
    25e4:	1b 06       	cpc	r1, r27
    25e6:	c4 f6       	brge	.-80     	; 0x2598 <__vector_7+0xbc>
    25e8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timerQ>
    25ec:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timerQ+0x1>
    25f0:	89 2b       	or	r24, r25
    25f2:	09 f4       	brne	.+2      	; 0x25f6 <__vector_7+0x11a>
    25f4:	4a c0       	rjmp	.+148    	; 0x268a <__vector_7+0x1ae>
    25f6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timerQ>
    25fa:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timerQ+0x1>
    25fe:	fc 01       	movw	r30, r24
    2600:	82 81       	ldd	r24, Z+2	; 0x02
    2602:	93 81       	ldd	r25, Z+3	; 0x03
    2604:	a4 81       	ldd	r26, Z+4	; 0x04
    2606:	b5 81       	ldd	r27, Z+5	; 0x05
    2608:	cd 01       	movw	r24, r26
    260a:	bb 27       	eor	r27, r27
    260c:	97 fd       	sbrc	r25, 7
    260e:	b0 95       	com	r27
    2610:	ab 2f       	mov	r26, r27
    2612:	9c 01       	movw	r18, r24
    2614:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    2618:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    261c:	28 17       	cp	r18, r24
    261e:	39 07       	cpc	r19, r25
    2620:	a1 f5       	brne	.+104    	; 0x268a <__vector_7+0x1ae>
    2622:	28 e8       	ldi	r18, 0x88	; 136
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timerQ>
    262a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timerQ+0x1>
    262e:	fc 01       	movw	r30, r24
    2630:	82 81       	ldd	r24, Z+2	; 0x02
    2632:	93 81       	ldd	r25, Z+3	; 0x03
    2634:	a4 81       	ldd	r26, Z+4	; 0x04
    2636:	b5 81       	ldd	r27, Z+5	; 0x05
    2638:	ac 01       	movw	r20, r24
    263a:	84 e8       	ldi	r24, 0x84	; 132
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	fc 01       	movw	r30, r24
    2640:	80 81       	ld	r24, Z
    2642:	91 81       	ldd	r25, Z+1	; 0x01
    2644:	7a 01       	movw	r14, r20
    2646:	e8 1a       	sub	r14, r24
    2648:	f9 0a       	sbc	r15, r25
    264a:	c7 01       	movw	r24, r14
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	39 f4       	brne	.+14     	; 0x265e <__vector_7+0x182>
    2650:	84 e8       	ldi	r24, 0x84	; 132
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	fc 01       	movw	r30, r24
    2656:	80 81       	ld	r24, Z
    2658:	91 81       	ldd	r25, Z+1	; 0x01
    265a:	01 96       	adiw	r24, 0x01	; 1
    265c:	09 c0       	rjmp	.+18     	; 0x2670 <__vector_7+0x194>
    265e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timerQ>
    2662:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timerQ+0x1>
    2666:	fc 01       	movw	r30, r24
    2668:	82 81       	ldd	r24, Z+2	; 0x02
    266a:	93 81       	ldd	r25, Z+3	; 0x03
    266c:	a4 81       	ldd	r26, Z+4	; 0x04
    266e:	b5 81       	ldd	r27, Z+5	; 0x05
    2670:	f9 01       	movw	r30, r18
    2672:	91 83       	std	Z+1, r25	; 0x01
    2674:	80 83       	st	Z, r24
    2676:	8f e6       	ldi	r24, 0x6F	; 111
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	2f e6       	ldi	r18, 0x6F	; 111
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	f9 01       	movw	r30, r18
    2680:	20 81       	ld	r18, Z
    2682:	22 60       	ori	r18, 0x02	; 2
    2684:	fc 01       	movw	r30, r24
    2686:	20 83       	st	Z, r18
    2688:	09 c0       	rjmp	.+18     	; 0x269c <__vector_7+0x1c0>
    268a:	8f e6       	ldi	r24, 0x6F	; 111
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	2f e6       	ldi	r18, 0x6F	; 111
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	f9 01       	movw	r30, r18
    2694:	20 81       	ld	r18, Z
    2696:	2d 7f       	andi	r18, 0xFD	; 253
    2698:	fc 01       	movw	r30, r24
    269a:	20 83       	st	Z, r18
    269c:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
    26a0:	00 00       	nop
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	ff 91       	pop	r31
    26b0:	ef 91       	pop	r30
    26b2:	bf 91       	pop	r27
    26b4:	af 91       	pop	r26
    26b6:	9f 91       	pop	r25
    26b8:	8f 91       	pop	r24
    26ba:	7f 91       	pop	r23
    26bc:	6f 91       	pop	r22
    26be:	5f 91       	pop	r21
    26c0:	4f 91       	pop	r20
    26c2:	3f 91       	pop	r19
    26c4:	2f 91       	pop	r18
    26c6:	1f 91       	pop	r17
    26c8:	0f 91       	pop	r16
    26ca:	ff 90       	pop	r15
    26cc:	ef 90       	pop	r14
    26ce:	0f 90       	pop	r0
    26d0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    26d4:	0f 90       	pop	r0
    26d6:	1f 90       	pop	r1
    26d8:	18 95       	reti

000026da <dispatch>:
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <dispatch+0x6>
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	9a 83       	std	Y+2, r25	; 0x02
    26e6:	89 83       	std	Y+1, r24	; 0x01
    26e8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <current>
    26ec:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <current+0x1>
    26f0:	06 96       	adiw	r24, 0x06	; 6
    26f2:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <setjmp>
    26f6:	89 2b       	or	r24, r25
    26f8:	69 f4       	brne	.+26     	; 0x2714 <dispatch+0x3a>
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	9a 81       	ldd	r25, Y+2	; 0x02
    26fe:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <current+0x1>
    2702:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <current>
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	06 96       	adiw	r24, 0x06	; 6
    270c:	61 e0       	ldi	r22, 0x01	; 1
    270e:	70 e0       	ldi	r23, 0x00	; 0
    2710:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <longjmp>
    2714:	00 00       	nop
    2716:	0f 90       	pop	r0
    2718:	0f 90       	pop	r0
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	08 95       	ret

00002720 <run>:
    2720:	ef 92       	push	r14
    2722:	ff 92       	push	r15
    2724:	0f 93       	push	r16
    2726:	1f 93       	push	r17
    2728:	cf 93       	push	r28
    272a:	df 93       	push	r29
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62
    2730:	27 97       	sbiw	r28, 0x07	; 7
    2732:	0f b6       	in	r0, 0x3f	; 63
    2734:	f8 94       	cli
    2736:	de bf       	out	0x3e, r29	; 62
    2738:	0f be       	out	0x3f, r0	; 63
    273a:	cd bf       	out	0x3d, r28	; 61
    273c:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <current>
    2740:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <current+0x1>
    2744:	8c e1       	ldi	r24, 0x1C	; 28
    2746:	91 e0       	ldi	r25, 0x01	; 1
    2748:	0e 94 3b 11 	call	0x2276	; 0x2276 <dequeue>
    274c:	f8 01       	movw	r30, r16
    274e:	93 83       	std	Z+3, r25	; 0x03
    2750:	82 83       	std	Z+2, r24	; 0x02
    2752:	f8 01       	movw	r30, r16
    2754:	82 81       	ldd	r24, Z+2	; 0x02
    2756:	93 81       	ldd	r25, Z+3	; 0x03
    2758:	9c 83       	std	Y+4, r25	; 0x04
    275a:	8b 83       	std	Y+3, r24	; 0x03
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	8d 83       	std	Y+5, r24	; 0x05
    2760:	8d 81       	ldd	r24, Y+5	; 0x05
    2762:	88 23       	and	r24, r24
    2764:	09 f0       	breq	.+2      	; 0x2768 <run+0x48>
    2766:	78 94       	sei
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	9c 81       	ldd	r25, Y+4	; 0x04
    276c:	fc 01       	movw	r30, r24
    276e:	46 85       	ldd	r20, Z+14	; 0x0e
    2770:	57 85       	ldd	r21, Z+15	; 0x0f
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	9c 81       	ldd	r25, Y+4	; 0x04
    2776:	fc 01       	movw	r30, r24
    2778:	24 85       	ldd	r18, Z+12	; 0x0c
    277a:	35 85       	ldd	r19, Z+13	; 0x0d
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	9c 81       	ldd	r25, Y+4	; 0x04
    2780:	fc 01       	movw	r30, r24
    2782:	82 85       	ldd	r24, Z+10	; 0x0a
    2784:	93 85       	ldd	r25, Z+11	; 0x0b
    2786:	b9 01       	movw	r22, r18
    2788:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <sync>
    278c:	8f e5       	ldi	r24, 0x5F	; 95
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	fc 01       	movw	r30, r24
    2792:	80 81       	ld	r24, Z
    2794:	80 78       	andi	r24, 0x80	; 128
    2796:	8d 83       	std	Y+5, r24	; 0x05
    2798:	f8 94       	cli
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	9c 81       	ldd	r25, Y+4	; 0x04
    279e:	60 e0       	ldi	r22, 0x00	; 0
    27a0:	71 e0       	ldi	r23, 0x01	; 1
    27a2:	0e 94 78 11 	call	0x22f0	; 0x22f0 <insert>
    27a6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <activeStack>
    27aa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <activeStack+0x1>
    27ae:	fc 01       	movw	r30, r24
    27b0:	80 81       	ld	r24, Z
    27b2:	91 81       	ldd	r25, Z+1	; 0x01
    27b4:	fc 01       	movw	r30, r24
    27b6:	82 81       	ldd	r24, Z+2	; 0x02
    27b8:	93 81       	ldd	r25, Z+3	; 0x03
    27ba:	9f 83       	std	Y+7, r25	; 0x07
    27bc:	8e 83       	std	Y+6, r24	; 0x06
    27be:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    27c2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    27c6:	89 2b       	or	r24, r25
    27c8:	19 f1       	breq	.+70     	; 0x2810 <run+0xf0>
    27ca:	8e 81       	ldd	r24, Y+6	; 0x06
    27cc:	9f 81       	ldd	r25, Y+7	; 0x07
    27ce:	89 2b       	or	r24, r25
    27d0:	09 f4       	brne	.+2      	; 0x27d4 <run+0xb4>
    27d2:	b4 cf       	rjmp	.-152    	; 0x273c <run+0x1c>
    27d4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    27d8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    27dc:	fc 01       	movw	r30, r24
    27de:	26 81       	ldd	r18, Z+6	; 0x06
    27e0:	37 81       	ldd	r19, Z+7	; 0x07
    27e2:	40 85       	ldd	r20, Z+8	; 0x08
    27e4:	51 85       	ldd	r21, Z+9	; 0x09
    27e6:	8e 81       	ldd	r24, Y+6	; 0x06
    27e8:	9f 81       	ldd	r25, Y+7	; 0x07
    27ea:	fc 01       	movw	r30, r24
    27ec:	86 81       	ldd	r24, Z+6	; 0x06
    27ee:	97 81       	ldd	r25, Z+7	; 0x07
    27f0:	a0 85       	ldd	r26, Z+8	; 0x08
    27f2:	b1 85       	ldd	r27, Z+9	; 0x09
    27f4:	79 01       	movw	r14, r18
    27f6:	8a 01       	movw	r16, r20
    27f8:	e8 1a       	sub	r14, r24
    27fa:	f9 0a       	sbc	r15, r25
    27fc:	0a 0b       	sbc	r16, r26
    27fe:	1b 0b       	sbc	r17, r27
    2800:	d8 01       	movw	r26, r16
    2802:	c7 01       	movw	r24, r14
    2804:	18 16       	cp	r1, r24
    2806:	19 06       	cpc	r1, r25
    2808:	1a 06       	cpc	r1, r26
    280a:	1b 06       	cpc	r1, r27
    280c:	0c f0       	brlt	.+2      	; 0x2810 <run+0xf0>
    280e:	96 cf       	rjmp	.-212    	; 0x273c <run+0x1c>
    2810:	84 e0       	ldi	r24, 0x04	; 4
    2812:	91 e0       	ldi	r25, 0x01	; 1
    2814:	0e 94 be 11 	call	0x237c	; 0x237c <pop>
    2818:	62 e0       	ldi	r22, 0x02	; 2
    281a:	71 e0       	ldi	r23, 0x01	; 1
    281c:	0e 94 9b 11 	call	0x2336	; 0x2336 <push>
    2820:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <activeStack>
    2824:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <activeStack+0x1>
    2828:	9a 83       	std	Y+2, r25	; 0x02
    282a:	89 83       	std	Y+1, r24	; 0x01
    282c:	0a c0       	rjmp	.+20     	; 0x2842 <run+0x122>
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	9a 81       	ldd	r25, Y+2	; 0x02
    2832:	fc 01       	movw	r30, r24
    2834:	84 81       	ldd	r24, Z+4	; 0x04
    2836:	95 81       	ldd	r25, Z+5	; 0x05
    2838:	fc 01       	movw	r30, r24
    283a:	80 81       	ld	r24, Z
    283c:	91 81       	ldd	r25, Z+1	; 0x01
    283e:	9a 83       	std	Y+2, r25	; 0x02
    2840:	89 83       	std	Y+1, r24	; 0x01
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	9a 81       	ldd	r25, Y+2	; 0x02
    2846:	fc 01       	movw	r30, r24
    2848:	84 81       	ldd	r24, Z+4	; 0x04
    284a:	95 81       	ldd	r25, Z+5	; 0x05
    284c:	89 2b       	or	r24, r25
    284e:	79 f7       	brne	.-34     	; 0x282e <run+0x10e>
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	9a 81       	ldd	r25, Y+2	; 0x02
    2854:	0e 94 6d 13 	call	0x26da	; 0x26da <dispatch>
    2858:	71 cf       	rjmp	.-286    	; 0x273c <run+0x1c>

0000285a <idle>:
    285a:	cf 93       	push	r28
    285c:	df 93       	push	r29
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
    2862:	0e 94 3b 14 	call	0x2876	; 0x2876 <schedule>
    2866:	78 94       	sei
    2868:	83 e5       	ldi	r24, 0x53	; 83
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	21 e0       	ldi	r18, 0x01	; 1
    286e:	fc 01       	movw	r30, r24
    2870:	20 83       	st	Z, r18
    2872:	88 95       	sleep
    2874:	f9 cf       	rjmp	.-14     	; 0x2868 <idle+0xe>

00002876 <schedule>:
    2876:	ef 92       	push	r14
    2878:	ff 92       	push	r15
    287a:	0f 93       	push	r16
    287c:	1f 93       	push	r17
    287e:	cf 93       	push	r28
    2880:	df 93       	push	r29
    2882:	00 d0       	rcall	.+0      	; 0x2884 <schedule+0xe>
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <activeStack>
    288c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <activeStack+0x1>
    2890:	fc 01       	movw	r30, r24
    2892:	82 81       	ldd	r24, Z+2	; 0x02
    2894:	93 81       	ldd	r25, Z+3	; 0x03
    2896:	9a 83       	std	Y+2, r25	; 0x02
    2898:	89 83       	std	Y+1, r24	; 0x01
    289a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    289e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    28a2:	89 2b       	or	r24, r25
    28a4:	91 f1       	breq	.+100    	; 0x290a <schedule+0x94>
    28a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <threadPool>
    28aa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <threadPool+0x1>
    28ae:	89 2b       	or	r24, r25
    28b0:	61 f1       	breq	.+88     	; 0x290a <schedule+0x94>
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	89 2b       	or	r24, r25
    28b8:	d1 f0       	breq	.+52     	; 0x28ee <schedule+0x78>
    28ba:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    28be:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    28c2:	fc 01       	movw	r30, r24
    28c4:	26 81       	ldd	r18, Z+6	; 0x06
    28c6:	37 81       	ldd	r19, Z+7	; 0x07
    28c8:	40 85       	ldd	r20, Z+8	; 0x08
    28ca:	51 85       	ldd	r21, Z+9	; 0x09
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	9a 81       	ldd	r25, Y+2	; 0x02
    28d0:	fc 01       	movw	r30, r24
    28d2:	86 81       	ldd	r24, Z+6	; 0x06
    28d4:	97 81       	ldd	r25, Z+7	; 0x07
    28d6:	a0 85       	ldd	r26, Z+8	; 0x08
    28d8:	b1 85       	ldd	r27, Z+9	; 0x09
    28da:	79 01       	movw	r14, r18
    28dc:	8a 01       	movw	r16, r20
    28de:	e8 1a       	sub	r14, r24
    28e0:	f9 0a       	sbc	r15, r25
    28e2:	0a 0b       	sbc	r16, r26
    28e4:	1b 0b       	sbc	r17, r27
    28e6:	d8 01       	movw	r26, r16
    28e8:	c7 01       	movw	r24, r14
    28ea:	bb 23       	and	r27, r27
    28ec:	74 f4       	brge	.+28     	; 0x290a <schedule+0x94>
    28ee:	82 e0       	ldi	r24, 0x02	; 2
    28f0:	91 e0       	ldi	r25, 0x01	; 1
    28f2:	0e 94 be 11 	call	0x237c	; 0x237c <pop>
    28f6:	64 e0       	ldi	r22, 0x04	; 4
    28f8:	71 e0       	ldi	r23, 0x01	; 1
    28fa:	0e 94 9b 11 	call	0x2336	; 0x2336 <push>
    28fe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <activeStack>
    2902:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <activeStack+0x1>
    2906:	0e 94 6d 13 	call	0x26da	; 0x26da <dispatch>
    290a:	00 00       	nop
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	1f 91       	pop	r17
    2916:	0f 91       	pop	r16
    2918:	ff 90       	pop	r15
    291a:	ef 90       	pop	r14
    291c:	08 95       	ret

0000291e <async>:
    291e:	cf 92       	push	r12
    2920:	df 92       	push	r13
    2922:	ef 92       	push	r14
    2924:	ff 92       	push	r15
    2926:	0f 93       	push	r16
    2928:	1f 93       	push	r17
    292a:	cf 93       	push	r28
    292c:	df 93       	push	r29
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
    2932:	65 97       	sbiw	r28, 0x15	; 21
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	68 87       	std	Y+8, r22	; 0x08
    2940:	79 87       	std	Y+9, r23	; 0x09
    2942:	8a 87       	std	Y+10, r24	; 0x0a
    2944:	9b 87       	std	Y+11, r25	; 0x0b
    2946:	2c 87       	std	Y+12, r18	; 0x0c
    2948:	3d 87       	std	Y+13, r19	; 0x0d
    294a:	4e 87       	std	Y+14, r20	; 0x0e
    294c:	5f 87       	std	Y+15, r21	; 0x0f
    294e:	19 8b       	std	Y+17, r17	; 0x11
    2950:	08 8b       	std	Y+16, r16	; 0x10
    2952:	fb 8a       	std	Y+19, r15	; 0x13
    2954:	ea 8a       	std	Y+18, r14	; 0x12
    2956:	dd 8a       	std	Y+21, r13	; 0x15
    2958:	cc 8a       	std	Y+20, r12	; 0x14
    295a:	8f e5       	ldi	r24, 0x5F	; 95
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	fc 01       	movw	r30, r24
    2960:	80 81       	ld	r24, Z
    2962:	80 78       	andi	r24, 0x80	; 128
    2964:	8d 83       	std	Y+5, r24	; 0x05
    2966:	f8 94       	cli
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	91 e0       	ldi	r25, 0x01	; 1
    296c:	0e 94 3b 11 	call	0x2276	; 0x2276 <dequeue>
    2970:	9f 83       	std	Y+7, r25	; 0x07
    2972:	8e 83       	std	Y+6, r24	; 0x06
    2974:	8e 81       	ldd	r24, Y+6	; 0x06
    2976:	9f 81       	ldd	r25, Y+7	; 0x07
    2978:	28 89       	ldd	r18, Y+16	; 0x10
    297a:	39 89       	ldd	r19, Y+17	; 0x11
    297c:	fc 01       	movw	r30, r24
    297e:	33 87       	std	Z+11, r19	; 0x0b
    2980:	22 87       	std	Z+10, r18	; 0x0a
    2982:	8e 81       	ldd	r24, Y+6	; 0x06
    2984:	9f 81       	ldd	r25, Y+7	; 0x07
    2986:	2a 89       	ldd	r18, Y+18	; 0x12
    2988:	3b 89       	ldd	r19, Y+19	; 0x13
    298a:	fc 01       	movw	r30, r24
    298c:	35 87       	std	Z+13, r19	; 0x0d
    298e:	24 87       	std	Z+12, r18	; 0x0c
    2990:	8e 81       	ldd	r24, Y+6	; 0x06
    2992:	9f 81       	ldd	r25, Y+7	; 0x07
    2994:	2c 89       	ldd	r18, Y+20	; 0x14
    2996:	3d 89       	ldd	r19, Y+21	; 0x15
    2998:	fc 01       	movw	r30, r24
    299a:	37 87       	std	Z+15, r19	; 0x0f
    299c:	26 87       	std	Z+14, r18	; 0x0e
    299e:	8d 81       	ldd	r24, Y+5	; 0x05
    29a0:	88 23       	and	r24, r24
    29a2:	69 f0       	breq	.+26     	; 0x29be <async+0xa0>
    29a4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <current>
    29a8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <current+0x1>
    29ac:	fc 01       	movw	r30, r24
    29ae:	82 81       	ldd	r24, Z+2	; 0x02
    29b0:	93 81       	ldd	r25, Z+3	; 0x03
    29b2:	fc 01       	movw	r30, r24
    29b4:	82 81       	ldd	r24, Z+2	; 0x02
    29b6:	93 81       	ldd	r25, Z+3	; 0x03
    29b8:	a4 81       	ldd	r26, Z+4	; 0x04
    29ba:	b5 81       	ldd	r27, Z+5	; 0x05
    29bc:	08 c0       	rjmp	.+16     	; 0x29ce <async+0xb0>
    29be:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <timestamp>
    29c2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <timestamp+0x1>
    29c6:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <timestamp+0x2>
    29ca:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <timestamp+0x3>
    29ce:	28 85       	ldd	r18, Y+8	; 0x08
    29d0:	39 85       	ldd	r19, Y+9	; 0x09
    29d2:	4a 85       	ldd	r20, Y+10	; 0x0a
    29d4:	5b 85       	ldd	r21, Y+11	; 0x0b
    29d6:	82 0f       	add	r24, r18
    29d8:	93 1f       	adc	r25, r19
    29da:	a4 1f       	adc	r26, r20
    29dc:	b5 1f       	adc	r27, r21
    29de:	2e 81       	ldd	r18, Y+6	; 0x06
    29e0:	3f 81       	ldd	r19, Y+7	; 0x07
    29e2:	f9 01       	movw	r30, r18
    29e4:	82 83       	std	Z+2, r24	; 0x02
    29e6:	93 83       	std	Z+3, r25	; 0x03
    29e8:	a4 83       	std	Z+4, r26	; 0x04
    29ea:	b5 83       	std	Z+5, r27	; 0x05
    29ec:	8e 81       	ldd	r24, Y+6	; 0x06
    29ee:	9f 81       	ldd	r25, Y+7	; 0x07
    29f0:	fc 01       	movw	r30, r24
    29f2:	22 81       	ldd	r18, Z+2	; 0x02
    29f4:	33 81       	ldd	r19, Z+3	; 0x03
    29f6:	44 81       	ldd	r20, Z+4	; 0x04
    29f8:	55 81       	ldd	r21, Z+5	; 0x05
    29fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    29fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    29fe:	ae 85       	ldd	r26, Y+14	; 0x0e
    2a00:	bf 85       	ldd	r27, Y+15	; 0x0f
    2a02:	18 16       	cp	r1, r24
    2a04:	19 06       	cpc	r1, r25
    2a06:	1a 06       	cpc	r1, r26
    2a08:	1b 06       	cpc	r1, r27
    2a0a:	2c f4       	brge	.+10     	; 0x2a16 <async+0xf8>
    2a0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a0e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a10:	ae 85       	ldd	r26, Y+14	; 0x0e
    2a12:	bf 85       	ldd	r27, Y+15	; 0x0f
    2a14:	04 c0       	rjmp	.+8      	; 0x2a1e <async+0x100>
    2a16:	8f ef       	ldi	r24, 0xFF	; 255
    2a18:	9f ef       	ldi	r25, 0xFF	; 255
    2a1a:	af ef       	ldi	r26, 0xFF	; 255
    2a1c:	bf e7       	ldi	r27, 0x7F	; 127
    2a1e:	82 0f       	add	r24, r18
    2a20:	93 1f       	adc	r25, r19
    2a22:	a4 1f       	adc	r26, r20
    2a24:	b5 1f       	adc	r27, r21
    2a26:	2e 81       	ldd	r18, Y+6	; 0x06
    2a28:	3f 81       	ldd	r19, Y+7	; 0x07
    2a2a:	f9 01       	movw	r30, r18
    2a2c:	86 83       	std	Z+6, r24	; 0x06
    2a2e:	97 83       	std	Z+7, r25	; 0x07
    2a30:	a0 87       	std	Z+8, r26	; 0x08
    2a32:	b1 87       	std	Z+9, r27	; 0x09
    2a34:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    2a38:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    2a3c:	09 2e       	mov	r0, r25
    2a3e:	00 0c       	add	r0, r0
    2a40:	aa 0b       	sbc	r26, r26
    2a42:	bb 0b       	sbc	r27, r27
    2a44:	ac 01       	movw	r20, r24
    2a46:	33 27       	eor	r19, r19
    2a48:	22 27       	eor	r18, r18
    2a4a:	84 e8       	ldi	r24, 0x84	; 132
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	fc 01       	movw	r30, r24
    2a50:	80 81       	ld	r24, Z
    2a52:	91 81       	ldd	r25, Z+1	; 0x01
    2a54:	cc 01       	movw	r24, r24
    2a56:	a0 e0       	ldi	r26, 0x00	; 0
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	82 2b       	or	r24, r18
    2a5c:	93 2b       	or	r25, r19
    2a5e:	a4 2b       	or	r26, r20
    2a60:	b5 2b       	or	r27, r21
    2a62:	89 83       	std	Y+1, r24	; 0x01
    2a64:	9a 83       	std	Y+2, r25	; 0x02
    2a66:	ab 83       	std	Y+3, r26	; 0x03
    2a68:	bc 83       	std	Y+4, r27	; 0x04
    2a6a:	86 e3       	ldi	r24, 0x36	; 54
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	fc 01       	movw	r30, r24
    2a70:	80 81       	ld	r24, Z
    2a72:	88 2f       	mov	r24, r24
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	81 70       	andi	r24, 0x01	; 1
    2a78:	99 27       	eor	r25, r25
    2a7a:	89 2b       	or	r24, r25
    2a7c:	e1 f0       	breq	.+56     	; 0x2ab6 <async+0x198>
    2a7e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    2a82:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    2a86:	01 96       	adiw	r24, 0x01	; 1
    2a88:	09 2e       	mov	r0, r25
    2a8a:	00 0c       	add	r0, r0
    2a8c:	aa 0b       	sbc	r26, r26
    2a8e:	bb 0b       	sbc	r27, r27
    2a90:	ac 01       	movw	r20, r24
    2a92:	33 27       	eor	r19, r19
    2a94:	22 27       	eor	r18, r18
    2a96:	84 e8       	ldi	r24, 0x84	; 132
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	80 81       	ld	r24, Z
    2a9e:	91 81       	ldd	r25, Z+1	; 0x01
    2aa0:	cc 01       	movw	r24, r24
    2aa2:	a0 e0       	ldi	r26, 0x00	; 0
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	82 2b       	or	r24, r18
    2aa8:	93 2b       	or	r25, r19
    2aaa:	a4 2b       	or	r26, r20
    2aac:	b5 2b       	or	r27, r21
    2aae:	89 83       	std	Y+1, r24	; 0x01
    2ab0:	9a 83       	std	Y+2, r25	; 0x02
    2ab2:	ab 83       	std	Y+3, r26	; 0x03
    2ab4:	bc 83       	std	Y+4, r27	; 0x04
    2ab6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab8:	9f 81       	ldd	r25, Y+7	; 0x07
    2aba:	fc 01       	movw	r30, r24
    2abc:	22 81       	ldd	r18, Z+2	; 0x02
    2abe:	33 81       	ldd	r19, Z+3	; 0x03
    2ac0:	44 81       	ldd	r20, Z+4	; 0x04
    2ac2:	55 81       	ldd	r21, Z+5	; 0x05
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac8:	ab 81       	ldd	r26, Y+3	; 0x03
    2aca:	bc 81       	ldd	r27, Y+4	; 0x04
    2acc:	79 01       	movw	r14, r18
    2ace:	8a 01       	movw	r16, r20
    2ad0:	e8 1a       	sub	r14, r24
    2ad2:	f9 0a       	sbc	r15, r25
    2ad4:	0a 0b       	sbc	r16, r26
    2ad6:	1b 0b       	sbc	r17, r27
    2ad8:	d8 01       	movw	r26, r16
    2ada:	c7 01       	movw	r24, r14
    2adc:	18 16       	cp	r1, r24
    2ade:	19 06       	cpc	r1, r25
    2ae0:	1a 06       	cpc	r1, r26
    2ae2:	1b 06       	cpc	r1, r27
    2ae4:	0c f0       	brlt	.+2      	; 0x2ae8 <async+0x1ca>
    2ae6:	61 c0       	rjmp	.+194    	; 0x2baa <async+0x28c>
    2ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    2aea:	9f 81       	ldd	r25, Y+7	; 0x07
    2aec:	6e e1       	ldi	r22, 0x1E	; 30
    2aee:	71 e0       	ldi	r23, 0x01	; 1
    2af0:	0e 94 dd 10 	call	0x21ba	; 0x21ba <enqueueByBaseline>
    2af4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timerQ>
    2af8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timerQ+0x1>
    2afc:	89 2b       	or	r24, r25
    2afe:	09 f4       	brne	.+2      	; 0x2b02 <async+0x1e4>
    2b00:	4a c0       	rjmp	.+148    	; 0x2b96 <async+0x278>
    2b02:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timerQ>
    2b06:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timerQ+0x1>
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	82 81       	ldd	r24, Z+2	; 0x02
    2b0e:	93 81       	ldd	r25, Z+3	; 0x03
    2b10:	a4 81       	ldd	r26, Z+4	; 0x04
    2b12:	b5 81       	ldd	r27, Z+5	; 0x05
    2b14:	cd 01       	movw	r24, r26
    2b16:	bb 27       	eor	r27, r27
    2b18:	97 fd       	sbrc	r25, 7
    2b1a:	b0 95       	com	r27
    2b1c:	ab 2f       	mov	r26, r27
    2b1e:	9c 01       	movw	r18, r24
    2b20:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <overflows>
    2b24:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <overflows+0x1>
    2b28:	28 17       	cp	r18, r24
    2b2a:	39 07       	cpc	r19, r25
    2b2c:	a1 f5       	brne	.+104    	; 0x2b96 <async+0x278>
    2b2e:	28 e8       	ldi	r18, 0x88	; 136
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timerQ>
    2b36:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timerQ+0x1>
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	82 81       	ldd	r24, Z+2	; 0x02
    2b3e:	93 81       	ldd	r25, Z+3	; 0x03
    2b40:	a4 81       	ldd	r26, Z+4	; 0x04
    2b42:	b5 81       	ldd	r27, Z+5	; 0x05
    2b44:	ac 01       	movw	r20, r24
    2b46:	84 e8       	ldi	r24, 0x84	; 132
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	80 81       	ld	r24, Z
    2b4e:	91 81       	ldd	r25, Z+1	; 0x01
    2b50:	7a 01       	movw	r14, r20
    2b52:	e8 1a       	sub	r14, r24
    2b54:	f9 0a       	sbc	r15, r25
    2b56:	c7 01       	movw	r24, r14
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	39 f4       	brne	.+14     	; 0x2b6a <async+0x24c>
    2b5c:	84 e8       	ldi	r24, 0x84	; 132
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	fc 01       	movw	r30, r24
    2b62:	80 81       	ld	r24, Z
    2b64:	91 81       	ldd	r25, Z+1	; 0x01
    2b66:	01 96       	adiw	r24, 0x01	; 1
    2b68:	09 c0       	rjmp	.+18     	; 0x2b7c <async+0x25e>
    2b6a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timerQ>
    2b6e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timerQ+0x1>
    2b72:	fc 01       	movw	r30, r24
    2b74:	82 81       	ldd	r24, Z+2	; 0x02
    2b76:	93 81       	ldd	r25, Z+3	; 0x03
    2b78:	a4 81       	ldd	r26, Z+4	; 0x04
    2b7a:	b5 81       	ldd	r27, Z+5	; 0x05
    2b7c:	f9 01       	movw	r30, r18
    2b7e:	91 83       	std	Z+1, r25	; 0x01
    2b80:	80 83       	st	Z, r24
    2b82:	8f e6       	ldi	r24, 0x6F	; 111
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	2f e6       	ldi	r18, 0x6F	; 111
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	f9 01       	movw	r30, r18
    2b8c:	20 81       	ld	r18, Z
    2b8e:	22 60       	ori	r18, 0x02	; 2
    2b90:	fc 01       	movw	r30, r24
    2b92:	20 83       	st	Z, r18
    2b94:	46 c0       	rjmp	.+140    	; 0x2c22 <async+0x304>
    2b96:	8f e6       	ldi	r24, 0x6F	; 111
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	2f e6       	ldi	r18, 0x6F	; 111
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	f9 01       	movw	r30, r18
    2ba0:	20 81       	ld	r18, Z
    2ba2:	2d 7f       	andi	r18, 0xFD	; 253
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	20 83       	st	Z, r18
    2ba8:	3c c0       	rjmp	.+120    	; 0x2c22 <async+0x304>
    2baa:	8e 81       	ldd	r24, Y+6	; 0x06
    2bac:	9f 81       	ldd	r25, Y+7	; 0x07
    2bae:	6c e1       	ldi	r22, 0x1C	; 28
    2bb0:	71 e0       	ldi	r23, 0x01	; 1
    2bb2:	0e 94 7f 10 	call	0x20fe	; 0x20fe <enqueueByDeadline>
    2bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb8:	88 23       	and	r24, r24
    2bba:	99 f1       	breq	.+102    	; 0x2c22 <async+0x304>
    2bbc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <threadPool>
    2bc0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <threadPool+0x1>
    2bc4:	89 2b       	or	r24, r25
    2bc6:	69 f1       	breq	.+90     	; 0x2c22 <async+0x304>
    2bc8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    2bcc:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	26 81       	ldd	r18, Z+6	; 0x06
    2bd4:	37 81       	ldd	r19, Z+7	; 0x07
    2bd6:	40 85       	ldd	r20, Z+8	; 0x08
    2bd8:	51 85       	ldd	r21, Z+9	; 0x09
    2bda:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <activeStack>
    2bde:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <activeStack+0x1>
    2be2:	fc 01       	movw	r30, r24
    2be4:	82 81       	ldd	r24, Z+2	; 0x02
    2be6:	93 81       	ldd	r25, Z+3	; 0x03
    2be8:	fc 01       	movw	r30, r24
    2bea:	86 81       	ldd	r24, Z+6	; 0x06
    2bec:	97 81       	ldd	r25, Z+7	; 0x07
    2bee:	a0 85       	ldd	r26, Z+8	; 0x08
    2bf0:	b1 85       	ldd	r27, Z+9	; 0x09
    2bf2:	79 01       	movw	r14, r18
    2bf4:	8a 01       	movw	r16, r20
    2bf6:	e8 1a       	sub	r14, r24
    2bf8:	f9 0a       	sbc	r15, r25
    2bfa:	0a 0b       	sbc	r16, r26
    2bfc:	1b 0b       	sbc	r17, r27
    2bfe:	d8 01       	movw	r26, r16
    2c00:	c7 01       	movw	r24, r14
    2c02:	bb 23       	and	r27, r27
    2c04:	74 f4       	brge	.+28     	; 0x2c22 <async+0x304>
    2c06:	82 e0       	ldi	r24, 0x02	; 2
    2c08:	91 e0       	ldi	r25, 0x01	; 1
    2c0a:	0e 94 be 11 	call	0x237c	; 0x237c <pop>
    2c0e:	64 e0       	ldi	r22, 0x04	; 4
    2c10:	71 e0       	ldi	r23, 0x01	; 1
    2c12:	0e 94 9b 11 	call	0x2336	; 0x2336 <push>
    2c16:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <activeStack>
    2c1a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <activeStack+0x1>
    2c1e:	0e 94 6d 13 	call	0x26da	; 0x26da <dispatch>
    2c22:	8d 81       	ldd	r24, Y+5	; 0x05
    2c24:	88 23       	and	r24, r24
    2c26:	09 f0       	breq	.+2      	; 0x2c2a <async+0x30c>
    2c28:	78 94       	sei
    2c2a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c2c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c2e:	65 96       	adiw	r28, 0x15	; 21
    2c30:	0f b6       	in	r0, 0x3f	; 63
    2c32:	f8 94       	cli
    2c34:	de bf       	out	0x3e, r29	; 62
    2c36:	0f be       	out	0x3f, r0	; 63
    2c38:	cd bf       	out	0x3d, r28	; 61
    2c3a:	df 91       	pop	r29
    2c3c:	cf 91       	pop	r28
    2c3e:	1f 91       	pop	r17
    2c40:	0f 91       	pop	r16
    2c42:	ff 90       	pop	r15
    2c44:	ef 90       	pop	r14
    2c46:	df 90       	pop	r13
    2c48:	cf 90       	pop	r12
    2c4a:	08 95       	ret

00002c4c <sync>:
    2c4c:	cf 93       	push	r28
    2c4e:	df 93       	push	r29
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
    2c54:	2c 97       	sbiw	r28, 0x0c	; 12
    2c56:	0f b6       	in	r0, 0x3f	; 63
    2c58:	f8 94       	cli
    2c5a:	de bf       	out	0x3e, r29	; 62
    2c5c:	0f be       	out	0x3f, r0	; 63
    2c5e:	cd bf       	out	0x3d, r28	; 61
    2c60:	98 87       	std	Y+8, r25	; 0x08
    2c62:	8f 83       	std	Y+7, r24	; 0x07
    2c64:	7a 87       	std	Y+10, r23	; 0x0a
    2c66:	69 87       	std	Y+9, r22	; 0x09
    2c68:	5c 87       	std	Y+12, r21	; 0x0c
    2c6a:	4b 87       	std	Y+11, r20	; 0x0b
    2c6c:	8f e5       	ldi	r24, 0x5F	; 95
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	fc 01       	movw	r30, r24
    2c72:	80 81       	ld	r24, Z
    2c74:	80 78       	andi	r24, 0x80	; 128
    2c76:	8b 83       	std	Y+3, r24	; 0x03
    2c78:	f8 94       	cli
    2c7a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c7c:	98 85       	ldd	r25, Y+8	; 0x08
    2c7e:	fc 01       	movw	r30, r24
    2c80:	80 81       	ld	r24, Z
    2c82:	91 81       	ldd	r25, Z+1	; 0x01
    2c84:	9a 83       	std	Y+2, r25	; 0x02
    2c86:	89 83       	std	Y+1, r24	; 0x01
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
    2c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8c:	89 2b       	or	r24, r25
    2c8e:	09 f4       	brne	.+2      	; 0x2c92 <sync+0x46>
    2c90:	5a c0       	rjmp	.+180    	; 0x2d46 <sync+0xfa>
    2c92:	0a c0       	rjmp	.+20     	; 0x2ca8 <sync+0x5c>
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	9a 81       	ldd	r25, Y+2	; 0x02
    2c98:	fc 01       	movw	r30, r24
    2c9a:	84 81       	ldd	r24, Z+4	; 0x04
    2c9c:	95 81       	ldd	r25, Z+5	; 0x05
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	80 81       	ld	r24, Z
    2ca2:	91 81       	ldd	r25, Z+1	; 0x01
    2ca4:	9a 83       	std	Y+2, r25	; 0x02
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	9a 81       	ldd	r25, Y+2	; 0x02
    2cac:	fc 01       	movw	r30, r24
    2cae:	84 81       	ldd	r24, Z+4	; 0x04
    2cb0:	95 81       	ldd	r25, Z+5	; 0x05
    2cb2:	89 2b       	or	r24, r25
    2cb4:	79 f7       	brne	.-34     	; 0x2c94 <sync+0x48>
    2cb6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <current>
    2cba:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <current+0x1>
    2cbe:	29 81       	ldd	r18, Y+1	; 0x01
    2cc0:	3a 81       	ldd	r19, Y+2	; 0x02
    2cc2:	28 17       	cp	r18, r24
    2cc4:	39 07       	cpc	r19, r25
    2cc6:	19 f0       	breq	.+6      	; 0x2cce <sync+0x82>
    2cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cca:	88 23       	and	r24, r24
    2ccc:	39 f4       	brne	.+14     	; 0x2cdc <sync+0x90>
    2cce:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd0:	88 23       	and	r24, r24
    2cd2:	09 f0       	breq	.+2      	; 0x2cd6 <sync+0x8a>
    2cd4:	78 94       	sei
    2cd6:	8f ef       	ldi	r24, 0xFF	; 255
    2cd8:	9f ef       	ldi	r25, 0xFF	; 255
    2cda:	83 c0       	rjmp	.+262    	; 0x2de2 <sync+0x196>
    2cdc:	8f 81       	ldd	r24, Y+7	; 0x07
    2cde:	98 85       	ldd	r25, Y+8	; 0x08
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	82 81       	ldd	r24, Z+2	; 0x02
    2ce4:	93 81       	ldd	r25, Z+3	; 0x03
    2ce6:	89 2b       	or	r24, r25
    2ce8:	41 f0       	breq	.+16     	; 0x2cfa <sync+0xae>
    2cea:	8f 81       	ldd	r24, Y+7	; 0x07
    2cec:	98 85       	ldd	r25, Y+8	; 0x08
    2cee:	fc 01       	movw	r30, r24
    2cf0:	82 81       	ldd	r24, Z+2	; 0x02
    2cf2:	93 81       	ldd	r25, Z+3	; 0x03
    2cf4:	fc 01       	movw	r30, r24
    2cf6:	15 82       	std	Z+5, r1	; 0x05
    2cf8:	14 82       	std	Z+4, r1	; 0x04
    2cfa:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <current>
    2cfe:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <current+0x1>
    2d02:	8f 81       	ldd	r24, Y+7	; 0x07
    2d04:	98 85       	ldd	r25, Y+8	; 0x08
    2d06:	fc 01       	movw	r30, r24
    2d08:	33 83       	std	Z+3, r19	; 0x03
    2d0a:	22 83       	std	Z+2, r18	; 0x02
    2d0c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <current>
    2d10:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <current+0x1>
    2d14:	2f 81       	ldd	r18, Y+7	; 0x07
    2d16:	38 85       	ldd	r19, Y+8	; 0x08
    2d18:	fc 01       	movw	r30, r24
    2d1a:	35 83       	std	Z+5, r19	; 0x05
    2d1c:	24 83       	std	Z+4, r18	; 0x04
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	9a 81       	ldd	r25, Y+2	; 0x02
    2d22:	0e 94 6d 13 	call	0x26da	; 0x26da <dispatch>
    2d26:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <current>
    2d2a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <current+0x1>
    2d2e:	fc 01       	movw	r30, r24
    2d30:	82 81       	ldd	r24, Z+2	; 0x02
    2d32:	93 81       	ldd	r25, Z+3	; 0x03
    2d34:	89 2b       	or	r24, r25
    2d36:	39 f4       	brne	.+14     	; 0x2d46 <sync+0xfa>
    2d38:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3a:	88 23       	and	r24, r24
    2d3c:	09 f0       	breq	.+2      	; 0x2d40 <sync+0xf4>
    2d3e:	78 94       	sei
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	4e c0       	rjmp	.+156    	; 0x2de2 <sync+0x196>
    2d46:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <current>
    2d4a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <current+0x1>
    2d4e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d50:	98 85       	ldd	r25, Y+8	; 0x08
    2d52:	fc 01       	movw	r30, r24
    2d54:	31 83       	std	Z+1, r19	; 0x01
    2d56:	20 83       	st	Z, r18
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	88 23       	and	r24, r24
    2d5c:	41 f0       	breq	.+16     	; 0x2d6e <sync+0x122>
    2d5e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d60:	98 85       	ldd	r25, Y+8	; 0x08
    2d62:	fc 01       	movw	r30, r24
    2d64:	82 81       	ldd	r24, Z+2	; 0x02
    2d66:	93 81       	ldd	r25, Z+3	; 0x03
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	09 f0       	breq	.+2      	; 0x2d6e <sync+0x122>
    2d6c:	78 94       	sei
    2d6e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2d70:	5c 85       	ldd	r21, Y+12	; 0x0c
    2d72:	8f 81       	ldd	r24, Y+7	; 0x07
    2d74:	98 85       	ldd	r25, Y+8	; 0x08
    2d76:	29 85       	ldd	r18, Y+9	; 0x09
    2d78:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d7a:	ba 01       	movw	r22, r20
    2d7c:	f9 01       	movw	r30, r18
    2d7e:	09 95       	icall
    2d80:	9d 83       	std	Y+5, r25	; 0x05
    2d82:	8c 83       	std	Y+4, r24	; 0x04
    2d84:	8f e5       	ldi	r24, 0x5F	; 95
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	fc 01       	movw	r30, r24
    2d8a:	80 81       	ld	r24, Z
    2d8c:	80 78       	andi	r24, 0x80	; 128
    2d8e:	8e 83       	std	Y+6, r24	; 0x06
    2d90:	f8 94       	cli
    2d92:	8f 81       	ldd	r24, Y+7	; 0x07
    2d94:	98 85       	ldd	r25, Y+8	; 0x08
    2d96:	fc 01       	movw	r30, r24
    2d98:	11 82       	std	Z+1, r1	; 0x01
    2d9a:	10 82       	st	Z, r1
    2d9c:	8f 81       	ldd	r24, Y+7	; 0x07
    2d9e:	98 85       	ldd	r25, Y+8	; 0x08
    2da0:	fc 01       	movw	r30, r24
    2da2:	82 81       	ldd	r24, Z+2	; 0x02
    2da4:	93 81       	ldd	r25, Z+3	; 0x03
    2da6:	9a 83       	std	Y+2, r25	; 0x02
    2da8:	89 83       	std	Y+1, r24	; 0x01
    2daa:	89 81       	ldd	r24, Y+1	; 0x01
    2dac:	9a 81       	ldd	r25, Y+2	; 0x02
    2dae:	89 2b       	or	r24, r25
    2db0:	91 f0       	breq	.+36     	; 0x2dd6 <sync+0x18a>
    2db2:	89 81       	ldd	r24, Y+1	; 0x01
    2db4:	9a 81       	ldd	r25, Y+2	; 0x02
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	71 f0       	breq	.+28     	; 0x2dd6 <sync+0x18a>
    2dba:	8f 81       	ldd	r24, Y+7	; 0x07
    2dbc:	98 85       	ldd	r25, Y+8	; 0x08
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	13 82       	std	Z+3, r1	; 0x03
    2dc2:	12 82       	std	Z+2, r1	; 0x02
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc8:	fc 01       	movw	r30, r24
    2dca:	15 82       	std	Z+5, r1	; 0x05
    2dcc:	14 82       	std	Z+4, r1	; 0x04
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd2:	0e 94 6d 13 	call	0x26da	; 0x26da <dispatch>
    2dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd8:	88 23       	and	r24, r24
    2dda:	09 f0       	breq	.+2      	; 0x2dde <sync+0x192>
    2ddc:	78 94       	sei
    2dde:	8c 81       	ldd	r24, Y+4	; 0x04
    2de0:	9d 81       	ldd	r25, Y+5	; 0x05
    2de2:	2c 96       	adiw	r28, 0x0c	; 12
    2de4:	0f b6       	in	r0, 0x3f	; 63
    2de6:	f8 94       	cli
    2de8:	de bf       	out	0x3e, r29	; 62
    2dea:	0f be       	out	0x3f, r0	; 63
    2dec:	cd bf       	out	0x3d, r28	; 61
    2dee:	df 91       	pop	r29
    2df0:	cf 91       	pop	r28
    2df2:	08 95       	ret

00002df4 <initialize>:

    
/* initialization */
static void initialize(void) {
    2df4:	cf 93       	push	r28
    2df6:	df 93       	push	r29
    2df8:	00 d0       	rcall	.+0      	; 0x2dfa <initialize+0x6>
    2dfa:	cd b7       	in	r28, 0x3d	; 61
    2dfc:	de b7       	in	r29, 0x3e	; 62
    int i;

    for (i=0; i<NMSGS-1; i++)
    2dfe:	1a 82       	std	Y+2, r1	; 0x02
    2e00:	19 82       	std	Y+1, r1	; 0x01
    2e02:	1e c0       	rjmp	.+60     	; 0x2e40 <initialize+0x4c>
        messages[i].next = &messages[i+1];
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
    2e06:	9a 81       	ldd	r25, Y+2	; 0x02
    2e08:	01 96       	adiw	r24, 0x01	; 1
    2e0a:	82 95       	swap	r24
    2e0c:	92 95       	swap	r25
    2e0e:	90 7f       	andi	r25, 0xF0	; 240
    2e10:	98 27       	eor	r25, r24
    2e12:	80 7f       	andi	r24, 0xF0	; 240
    2e14:	98 27       	eor	r25, r24
    2e16:	9c 01       	movw	r18, r24
    2e18:	21 50       	subi	r18, 0x01	; 1
    2e1a:	3e 4f       	sbci	r19, 0xFE	; 254
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e20:	82 95       	swap	r24
    2e22:	92 95       	swap	r25
    2e24:	90 7f       	andi	r25, 0xF0	; 240
    2e26:	98 27       	eor	r25, r24
    2e28:	80 7f       	andi	r24, 0xF0	; 240
    2e2a:	98 27       	eor	r25, r24
    2e2c:	81 50       	subi	r24, 0x01	; 1
    2e2e:	9e 4f       	sbci	r25, 0xFE	; 254
    2e30:	fc 01       	movw	r30, r24
    2e32:	31 83       	std	Z+1, r19	; 0x01
    2e34:	20 83       	st	Z, r18
    
/* initialization */
static void initialize(void) {
    int i;

    for (i=0; i<NMSGS-1; i++)
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3a:	01 96       	adiw	r24, 0x01	; 1
    2e3c:	9a 83       	std	Y+2, r25	; 0x02
    2e3e:	89 83       	std	Y+1, r24	; 0x01
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	9a 81       	ldd	r25, Y+2	; 0x02
    2e44:	0e 97       	sbiw	r24, 0x0e	; 14
    2e46:	f4 f2       	brlt	.-68     	; 0x2e04 <initialize+0x10>
        messages[i].next = &messages[i+1];
    messages[NMSGS-1].next = NULL;
    2e48:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <messages+0xe1>
    2e4c:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <messages+0xe0>
    
    for (i=0; i<NTHREADS-1; i++)
    2e50:	1a 82       	std	Y+2, r1	; 0x02
    2e52:	19 82       	std	Y+1, r1	; 0x01
    2e54:	20 c0       	rjmp	.+64     	; 0x2e96 <initialize+0xa2>
        threads[i].next = &threads[i+1];
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5a:	9c 01       	movw	r18, r24
    2e5c:	2f 5f       	subi	r18, 0xFF	; 255
    2e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e60:	4d e1       	ldi	r20, 0x1D	; 29
    2e62:	42 9f       	mul	r20, r18
    2e64:	c0 01       	movw	r24, r0
    2e66:	43 9f       	mul	r20, r19
    2e68:	90 0d       	add	r25, r0
    2e6a:	11 24       	eor	r1, r1
    2e6c:	9c 01       	movw	r18, r24
    2e6e:	26 5b       	subi	r18, 0xB6	; 182
    2e70:	3e 4f       	sbci	r19, 0xFE	; 254
    2e72:	49 81       	ldd	r20, Y+1	; 0x01
    2e74:	5a 81       	ldd	r21, Y+2	; 0x02
    2e76:	6d e1       	ldi	r22, 0x1D	; 29
    2e78:	64 9f       	mul	r22, r20
    2e7a:	c0 01       	movw	r24, r0
    2e7c:	65 9f       	mul	r22, r21
    2e7e:	90 0d       	add	r25, r0
    2e80:	11 24       	eor	r1, r1
    2e82:	86 5b       	subi	r24, 0xB6	; 182
    2e84:	9e 4f       	sbci	r25, 0xFE	; 254
    2e86:	fc 01       	movw	r30, r24
    2e88:	31 83       	std	Z+1, r19	; 0x01
    2e8a:	20 83       	st	Z, r18

    for (i=0; i<NMSGS-1; i++)
        messages[i].next = &messages[i+1];
    messages[NMSGS-1].next = NULL;
    
    for (i=0; i<NTHREADS-1; i++)
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e90:	01 96       	adiw	r24, 0x01	; 1
    2e92:	9a 83       	std	Y+2, r25	; 0x02
    2e94:	89 83       	std	Y+1, r24	; 0x01
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9a:	03 97       	sbiw	r24, 0x03	; 3
    2e9c:	e4 f2       	brlt	.-72     	; 0x2e56 <initialize+0x62>
        threads[i].next = &threads[i+1];
    threads[NTHREADS-1].next = NULL;
    2e9e:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <threads+0x58>
    2ea2:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <threads+0x57>
    
    for (i=0; i<NTHREADS; i++) {
    2ea6:	1a 82       	std	Y+2, r1	; 0x02
    2ea8:	19 82       	std	Y+1, r1	; 0x01
    2eaa:	66 c0       	rjmp	.+204    	; 0x2f78 <initialize+0x184>
        setjmp( threads[i].context );
    2eac:	29 81       	ldd	r18, Y+1	; 0x01
    2eae:	3a 81       	ldd	r19, Y+2	; 0x02
    2eb0:	4d e1       	ldi	r20, 0x1D	; 29
    2eb2:	42 9f       	mul	r20, r18
    2eb4:	c0 01       	movw	r24, r0
    2eb6:	43 9f       	mul	r20, r19
    2eb8:	90 0d       	add	r25, r0
    2eba:	11 24       	eor	r1, r1
    2ebc:	06 96       	adiw	r24, 0x06	; 6
    2ebe:	86 5b       	subi	r24, 0xB6	; 182
    2ec0:	9e 4f       	sbci	r25, 0xFE	; 254
    2ec2:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <setjmp>
        SETSTACK( &threads[i].context, &stacks[i] );
    2ec6:	29 81       	ldd	r18, Y+1	; 0x01
    2ec8:	3a 81       	ldd	r19, Y+2	; 0x02
    2eca:	4d e1       	ldi	r20, 0x1D	; 29
    2ecc:	42 9f       	mul	r20, r18
    2ece:	c0 01       	movw	r24, r0
    2ed0:	43 9f       	mul	r20, r19
    2ed2:	90 0d       	add	r25, r0
    2ed4:	11 24       	eor	r1, r1
    2ed6:	06 96       	adiw	r24, 0x06	; 6
    2ed8:	86 5b       	subi	r24, 0xB6	; 182
    2eda:	9e 4f       	sbci	r25, 0xFE	; 254
    2edc:	40 96       	adiw	r24, 0x10	; 16
    2ede:	49 81       	ldd	r20, Y+1	; 0x01
    2ee0:	5a 81       	ldd	r21, Y+2	; 0x02
    2ee2:	60 e6       	ldi	r22, 0x60	; 96
    2ee4:	64 9f       	mul	r22, r20
    2ee6:	90 01       	movw	r18, r0
    2ee8:	65 9f       	mul	r22, r21
    2eea:	30 0d       	add	r19, r0
    2eec:	11 24       	eor	r1, r1
    2eee:	21 51       	subi	r18, 0x11	; 17
    2ef0:	3d 4f       	sbci	r19, 0xFD	; 253
    2ef2:	24 5a       	subi	r18, 0xA4	; 164
    2ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	31 83       	std	Z+1, r19	; 0x01
    2efa:	20 83       	st	Z, r18
    2efc:	29 81       	ldd	r18, Y+1	; 0x01
    2efe:	3a 81       	ldd	r19, Y+2	; 0x02
    2f00:	4d e1       	ldi	r20, 0x1D	; 29
    2f02:	42 9f       	mul	r20, r18
    2f04:	c0 01       	movw	r24, r0
    2f06:	43 9f       	mul	r20, r19
    2f08:	90 0d       	add	r25, r0
    2f0a:	11 24       	eor	r1, r1
    2f0c:	06 96       	adiw	r24, 0x06	; 6
    2f0e:	86 5b       	subi	r24, 0xB6	; 182
    2f10:	9e 4f       	sbci	r25, 0xFE	; 254
    2f12:	42 96       	adiw	r24, 0x12	; 18
    2f14:	49 81       	ldd	r20, Y+1	; 0x01
    2f16:	5a 81       	ldd	r21, Y+2	; 0x02
    2f18:	60 e6       	ldi	r22, 0x60	; 96
    2f1a:	64 9f       	mul	r22, r20
    2f1c:	90 01       	movw	r18, r0
    2f1e:	65 9f       	mul	r22, r21
    2f20:	30 0d       	add	r19, r0
    2f22:	11 24       	eor	r1, r1
    2f24:	21 51       	subi	r18, 0x11	; 17
    2f26:	3d 4f       	sbci	r19, 0xFD	; 253
    2f28:	24 5a       	subi	r18, 0xA4	; 164
    2f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	31 83       	std	Z+1, r19	; 0x01
    2f30:	20 83       	st	Z, r18
        SETPC( &threads[i].context, run );
    2f32:	29 81       	ldd	r18, Y+1	; 0x01
    2f34:	3a 81       	ldd	r19, Y+2	; 0x02
    2f36:	4d e1       	ldi	r20, 0x1D	; 29
    2f38:	42 9f       	mul	r20, r18
    2f3a:	c0 01       	movw	r24, r0
    2f3c:	43 9f       	mul	r20, r19
    2f3e:	90 0d       	add	r25, r0
    2f40:	11 24       	eor	r1, r1
    2f42:	06 96       	adiw	r24, 0x06	; 6
    2f44:	86 5b       	subi	r24, 0xB6	; 182
    2f46:	9e 4f       	sbci	r25, 0xFE	; 254
    2f48:	45 96       	adiw	r24, 0x15	; 21
    2f4a:	20 e9       	ldi	r18, 0x90	; 144
    2f4c:	33 e1       	ldi	r19, 0x13	; 19
    2f4e:	fc 01       	movw	r30, r24
    2f50:	31 83       	std	Z+1, r19	; 0x01
    2f52:	20 83       	st	Z, r18
        threads[i].waitsFor = NULL;
    2f54:	29 81       	ldd	r18, Y+1	; 0x01
    2f56:	3a 81       	ldd	r19, Y+2	; 0x02
    2f58:	4d e1       	ldi	r20, 0x1D	; 29
    2f5a:	42 9f       	mul	r20, r18
    2f5c:	c0 01       	movw	r24, r0
    2f5e:	43 9f       	mul	r20, r19
    2f60:	90 0d       	add	r25, r0
    2f62:	11 24       	eor	r1, r1
    2f64:	82 5b       	subi	r24, 0xB2	; 178
    2f66:	9e 4f       	sbci	r25, 0xFE	; 254
    2f68:	fc 01       	movw	r30, r24
    2f6a:	11 82       	std	Z+1, r1	; 0x01
    2f6c:	10 82       	st	Z, r1
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
    threads[NTHREADS-1].next = NULL;
    
    for (i=0; i<NTHREADS; i++) {
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	9a 81       	ldd	r25, Y+2	; 0x02
    2f72:	01 96       	adiw	r24, 0x01	; 1
    2f74:	9a 83       	std	Y+2, r25	; 0x02
    2f76:	89 83       	std	Y+1, r24	; 0x01
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7c:	04 97       	sbiw	r24, 0x04	; 4
    2f7e:	0c f4       	brge	.+2      	; 0x2f82 <initialize+0x18e>
    2f80:	95 cf       	rjmp	.-214    	; 0x2eac <initialize+0xb8>
        SETSTACK( &threads[i].context, &stacks[i] );
        SETPC( &threads[i].context, run );
        threads[i].waitsFor = NULL;
    }

    thread0.next = NULL;
    2f82:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <thread0+0x1>
    2f86:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <thread0>
    thread0.waitsFor = NULL;
    2f8a:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <thread0+0x5>
    2f8e:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <thread0+0x4>
    thread0.msg = NULL;
    2f92:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <thread0+0x3>
    2f96:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <thread0+0x2>
    
    TIMER_INIT();
    2f9a:	81 e6       	ldi	r24, 0x61	; 97
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	20 e8       	ldi	r18, 0x80	; 128
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	20 83       	st	Z, r18
    2fa4:	81 e6       	ldi	r24, 0x61	; 97
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	fc 01       	movw	r30, r24
    2faa:	10 82       	st	Z, r1
    2fac:	84 e8       	ldi	r24, 0x84	; 132
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	fc 01       	movw	r30, r24
    2fb2:	11 82       	std	Z+1, r1	; 0x01
    2fb4:	10 82       	st	Z, r1
    2fb6:	81 e8       	ldi	r24, 0x81	; 129
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	24 e0       	ldi	r18, 0x04	; 4
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	20 83       	st	Z, r18
    2fc0:	8f e6       	ldi	r24, 0x6F	; 111
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	21 e0       	ldi	r18, 0x01	; 1
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	20 83       	st	Z, r18
}
    2fca:	00 00       	nop
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	df 91       	pop	r29
    2fd2:	cf 91       	pop	r28
    2fd4:	08 95       	ret

00002fd6 <install>:

void install(Object *obj, Method m, enum Vector i) {
    2fd6:	cf 93       	push	r28
    2fd8:	df 93       	push	r29
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <install+0x6>
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <install+0x8>
    2fde:	00 d0       	rcall	.+0      	; 0x2fe0 <install+0xa>
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	9b 83       	std	Y+3, r25	; 0x03
    2fe6:	8a 83       	std	Y+2, r24	; 0x02
    2fe8:	7d 83       	std	Y+5, r23	; 0x05
    2fea:	6c 83       	std	Y+4, r22	; 0x04
    2fec:	4e 83       	std	Y+6, r20	; 0x06
    if (i >= 0 && i < N_VECTORS) {
    2fee:	8e 81       	ldd	r24, Y+6	; 0x06
    2ff0:	82 31       	cpi	r24, 0x12	; 18
    2ff2:	50 f5       	brcc	.+84     	; 0x3048 <install+0x72>
        char status;
        DISABLE(status);
    2ff4:	8f e5       	ldi	r24, 0x5F	; 95
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	80 81       	ld	r24, Z
    2ffc:	80 78       	andi	r24, 0x80	; 128
    2ffe:	89 83       	std	Y+1, r24	; 0x01
    3000:	f8 94       	cli
        otable[i] = obj;
    3002:	8e 81       	ldd	r24, Y+6	; 0x06
    3004:	88 2f       	mov	r24, r24
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	88 0f       	add	r24, r24
    300a:	99 1f       	adc	r25, r25
    300c:	8a 5d       	subi	r24, 0xDA	; 218
    300e:	9e 4f       	sbci	r25, 0xFE	; 254
    3010:	2a 81       	ldd	r18, Y+2	; 0x02
    3012:	3b 81       	ldd	r19, Y+3	; 0x03
    3014:	fc 01       	movw	r30, r24
    3016:	31 83       	std	Z+1, r19	; 0x01
    3018:	20 83       	st	Z, r18
        mtable[i] = m;
    301a:	8e 81       	ldd	r24, Y+6	; 0x06
    301c:	88 2f       	mov	r24, r24
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	88 0f       	add	r24, r24
    3022:	99 1f       	adc	r25, r25
    3024:	82 54       	subi	r24, 0x42	; 66
    3026:	9e 4f       	sbci	r25, 0xFE	; 254
    3028:	2c 81       	ldd	r18, Y+4	; 0x04
    302a:	3d 81       	ldd	r19, Y+5	; 0x05
    302c:	fc 01       	movw	r30, r24
    302e:	31 83       	std	Z+1, r19	; 0x01
    3030:	20 83       	st	Z, r18
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    3032:	8a 81       	ldd	r24, Y+2	; 0x02
    3034:	9b 81       	ldd	r25, Y+3	; 0x03
    3036:	21 e0       	ldi	r18, 0x01	; 1
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	fc 01       	movw	r30, r24
    303c:	33 83       	std	Z+3, r19	; 0x03
    303e:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	88 23       	and	r24, r24
    3044:	09 f0       	breq	.+2      	; 0x3048 <install+0x72>
    3046:	78 94       	sei
    }
}
    3048:	00 00       	nop
    304a:	26 96       	adiw	r28, 0x06	; 6
    304c:	0f b6       	in	r0, 0x3f	; 63
    304e:	f8 94       	cli
    3050:	de bf       	out	0x3e, r29	; 62
    3052:	0f be       	out	0x3f, r0	; 63
    3054:	cd bf       	out	0x3d, r28	; 61
    3056:	df 91       	pop	r29
    3058:	cf 91       	pop	r28
    305a:	08 95       	ret

0000305c <tinytimber>:

int tinytimber(Object *obj, Method m, int arg) {
    305c:	cf 92       	push	r12
    305e:	df 92       	push	r13
    3060:	ef 92       	push	r14
    3062:	ff 92       	push	r15
    3064:	0f 93       	push	r16
    3066:	1f 93       	push	r17
    3068:	cf 93       	push	r28
    306a:	df 93       	push	r29
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	27 97       	sbiw	r28, 0x07	; 7
    3072:	0f b6       	in	r0, 0x3f	; 63
    3074:	f8 94       	cli
    3076:	de bf       	out	0x3e, r29	; 62
    3078:	0f be       	out	0x3f, r0	; 63
    307a:	cd bf       	out	0x3d, r28	; 61
    307c:	9b 83       	std	Y+3, r25	; 0x03
    307e:	8a 83       	std	Y+2, r24	; 0x02
    3080:	7d 83       	std	Y+5, r23	; 0x05
    3082:	6c 83       	std	Y+4, r22	; 0x04
    3084:	5f 83       	std	Y+7, r21	; 0x07
    3086:	4e 83       	std	Y+6, r20	; 0x06
    char status;
    DISABLE(status);
    3088:	8f e5       	ldi	r24, 0x5F	; 95
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	fc 01       	movw	r30, r24
    308e:	80 81       	ld	r24, Z
    3090:	80 78       	andi	r24, 0x80	; 128
    3092:	89 83       	std	Y+1, r24	; 0x01
    3094:	f8 94       	cli
    initialize();
    3096:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <initialize>
    ENABLE(1);
    309a:	78 94       	sei
    if (m != NULL)
    309c:	8c 81       	ldd	r24, Y+4	; 0x04
    309e:	9d 81       	ldd	r25, Y+5	; 0x05
    30a0:	89 2b       	or	r24, r25
    30a2:	89 f0       	breq	.+34     	; 0x30c6 <tinytimber+0x6a>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    30a4:	4e 81       	ldd	r20, Y+6	; 0x06
    30a6:	5f 81       	ldd	r21, Y+7	; 0x07
    30a8:	2c 81       	ldd	r18, Y+4	; 0x04
    30aa:	3d 81       	ldd	r19, Y+5	; 0x05
    30ac:	8a 81       	ldd	r24, Y+2	; 0x02
    30ae:	9b 81       	ldd	r25, Y+3	; 0x03
    30b0:	6a 01       	movw	r12, r20
    30b2:	79 01       	movw	r14, r18
    30b4:	8c 01       	movw	r16, r24
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	a9 01       	movw	r20, r18
    30bc:	60 e0       	ldi	r22, 0x00	; 0
    30be:	70 e0       	ldi	r23, 0x00	; 0
    30c0:	cb 01       	movw	r24, r22
    30c2:	0e 94 8f 14 	call	0x291e	; 0x291e <async>
    DISABLE(status);
    30c6:	8f e5       	ldi	r24, 0x5F	; 95
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	fc 01       	movw	r30, r24
    30cc:	80 81       	ld	r24, Z
    30ce:	80 78       	andi	r24, 0x80	; 128
    30d0:	89 83       	std	Y+1, r24	; 0x01
    30d2:	f8 94       	cli
    idle();
    30d4:	0e 94 2d 14 	call	0x285a	; 0x285a <idle>
    return 0;
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
}
    30dc:	27 96       	adiw	r28, 0x07	; 7
    30de:	0f b6       	in	r0, 0x3f	; 63
    30e0:	f8 94       	cli
    30e2:	de bf       	out	0x3e, r29	; 62
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	cd bf       	out	0x3d, r28	; 61
    30e8:	df 91       	pop	r29
    30ea:	cf 91       	pop	r28
    30ec:	1f 91       	pop	r17
    30ee:	0f 91       	pop	r16
    30f0:	ff 90       	pop	r15
    30f2:	ef 90       	pop	r14
    30f4:	df 90       	pop	r13
    30f6:	cf 90       	pop	r12
    30f8:	08 95       	ret

000030fa <__divmodsi4>:
    30fa:	05 2e       	mov	r0, r21
    30fc:	97 fb       	bst	r25, 7
    30fe:	1e f4       	brtc	.+6      	; 0x3106 <__divmodsi4+0xc>
    3100:	00 94       	com	r0
    3102:	0e 94 94 18 	call	0x3128	; 0x3128 <__negsi2>
    3106:	57 fd       	sbrc	r21, 7
    3108:	07 d0       	rcall	.+14     	; 0x3118 <__divmodsi4_neg2>
    310a:	0e 94 a7 18 	call	0x314e	; 0x314e <__udivmodsi4>
    310e:	07 fc       	sbrc	r0, 7
    3110:	03 d0       	rcall	.+6      	; 0x3118 <__divmodsi4_neg2>
    3112:	4e f4       	brtc	.+18     	; 0x3126 <__divmodsi4_exit>
    3114:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__negsi2>

00003118 <__divmodsi4_neg2>:
    3118:	50 95       	com	r21
    311a:	40 95       	com	r20
    311c:	30 95       	com	r19
    311e:	21 95       	neg	r18
    3120:	3f 4f       	sbci	r19, 0xFF	; 255
    3122:	4f 4f       	sbci	r20, 0xFF	; 255
    3124:	5f 4f       	sbci	r21, 0xFF	; 255

00003126 <__divmodsi4_exit>:
    3126:	08 95       	ret

00003128 <__negsi2>:
    3128:	90 95       	com	r25
    312a:	80 95       	com	r24
    312c:	70 95       	com	r23
    312e:	61 95       	neg	r22
    3130:	7f 4f       	sbci	r23, 0xFF	; 255
    3132:	8f 4f       	sbci	r24, 0xFF	; 255
    3134:	9f 4f       	sbci	r25, 0xFF	; 255
    3136:	08 95       	ret

00003138 <__muluhisi3>:
    3138:	0e 94 c9 18 	call	0x3192	; 0x3192 <__umulhisi3>
    313c:	a5 9f       	mul	r26, r21
    313e:	90 0d       	add	r25, r0
    3140:	b4 9f       	mul	r27, r20
    3142:	90 0d       	add	r25, r0
    3144:	a4 9f       	mul	r26, r20
    3146:	80 0d       	add	r24, r0
    3148:	91 1d       	adc	r25, r1
    314a:	11 24       	eor	r1, r1
    314c:	08 95       	ret

0000314e <__udivmodsi4>:
    314e:	a1 e2       	ldi	r26, 0x21	; 33
    3150:	1a 2e       	mov	r1, r26
    3152:	aa 1b       	sub	r26, r26
    3154:	bb 1b       	sub	r27, r27
    3156:	fd 01       	movw	r30, r26
    3158:	0d c0       	rjmp	.+26     	; 0x3174 <__udivmodsi4_ep>

0000315a <__udivmodsi4_loop>:
    315a:	aa 1f       	adc	r26, r26
    315c:	bb 1f       	adc	r27, r27
    315e:	ee 1f       	adc	r30, r30
    3160:	ff 1f       	adc	r31, r31
    3162:	a2 17       	cp	r26, r18
    3164:	b3 07       	cpc	r27, r19
    3166:	e4 07       	cpc	r30, r20
    3168:	f5 07       	cpc	r31, r21
    316a:	20 f0       	brcs	.+8      	; 0x3174 <__udivmodsi4_ep>
    316c:	a2 1b       	sub	r26, r18
    316e:	b3 0b       	sbc	r27, r19
    3170:	e4 0b       	sbc	r30, r20
    3172:	f5 0b       	sbc	r31, r21

00003174 <__udivmodsi4_ep>:
    3174:	66 1f       	adc	r22, r22
    3176:	77 1f       	adc	r23, r23
    3178:	88 1f       	adc	r24, r24
    317a:	99 1f       	adc	r25, r25
    317c:	1a 94       	dec	r1
    317e:	69 f7       	brne	.-38     	; 0x315a <__udivmodsi4_loop>
    3180:	60 95       	com	r22
    3182:	70 95       	com	r23
    3184:	80 95       	com	r24
    3186:	90 95       	com	r25
    3188:	9b 01       	movw	r18, r22
    318a:	ac 01       	movw	r20, r24
    318c:	bd 01       	movw	r22, r26
    318e:	cf 01       	movw	r24, r30
    3190:	08 95       	ret

00003192 <__umulhisi3>:
    3192:	a2 9f       	mul	r26, r18
    3194:	b0 01       	movw	r22, r0
    3196:	b3 9f       	mul	r27, r19
    3198:	c0 01       	movw	r24, r0
    319a:	a3 9f       	mul	r26, r19
    319c:	70 0d       	add	r23, r0
    319e:	81 1d       	adc	r24, r1
    31a0:	11 24       	eor	r1, r1
    31a2:	91 1d       	adc	r25, r1
    31a4:	b2 9f       	mul	r27, r18
    31a6:	70 0d       	add	r23, r0
    31a8:	81 1d       	adc	r24, r1
    31aa:	11 24       	eor	r1, r1
    31ac:	91 1d       	adc	r25, r1
    31ae:	08 95       	ret

000031b0 <setjmp>:
    31b0:	dc 01       	movw	r26, r24
    31b2:	2d 92       	st	X+, r2
    31b4:	3d 92       	st	X+, r3
    31b6:	4d 92       	st	X+, r4
    31b8:	5d 92       	st	X+, r5
    31ba:	6d 92       	st	X+, r6
    31bc:	7d 92       	st	X+, r7
    31be:	8d 92       	st	X+, r8
    31c0:	9d 92       	st	X+, r9
    31c2:	ad 92       	st	X+, r10
    31c4:	bd 92       	st	X+, r11
    31c6:	cd 92       	st	X+, r12
    31c8:	dd 92       	st	X+, r13
    31ca:	ed 92       	st	X+, r14
    31cc:	fd 92       	st	X+, r15
    31ce:	0d 93       	st	X+, r16
    31d0:	1d 93       	st	X+, r17
    31d2:	cd 93       	st	X+, r28
    31d4:	dd 93       	st	X+, r29
    31d6:	ff 91       	pop	r31
    31d8:	ef 91       	pop	r30
    31da:	8d b7       	in	r24, 0x3d	; 61
    31dc:	8d 93       	st	X+, r24
    31de:	8e b7       	in	r24, 0x3e	; 62
    31e0:	8d 93       	st	X+, r24
    31e2:	8f b7       	in	r24, 0x3f	; 63
    31e4:	8d 93       	st	X+, r24
    31e6:	ed 93       	st	X+, r30
    31e8:	fd 93       	st	X+, r31
    31ea:	88 27       	eor	r24, r24
    31ec:	99 27       	eor	r25, r25
    31ee:	09 94       	ijmp

000031f0 <longjmp>:
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	81 30       	cpi	r24, 0x01	; 1
    31f6:	91 05       	cpc	r25, r1
    31f8:	81 1d       	adc	r24, r1
    31fa:	2d 90       	ld	r2, X+
    31fc:	3d 90       	ld	r3, X+
    31fe:	4d 90       	ld	r4, X+
    3200:	5d 90       	ld	r5, X+
    3202:	6d 90       	ld	r6, X+
    3204:	7d 90       	ld	r7, X+
    3206:	8d 90       	ld	r8, X+
    3208:	9d 90       	ld	r9, X+
    320a:	ad 90       	ld	r10, X+
    320c:	bd 90       	ld	r11, X+
    320e:	cd 90       	ld	r12, X+
    3210:	dd 90       	ld	r13, X+
    3212:	ed 90       	ld	r14, X+
    3214:	fd 90       	ld	r15, X+
    3216:	0d 91       	ld	r16, X+
    3218:	1d 91       	ld	r17, X+
    321a:	cd 91       	ld	r28, X+
    321c:	dd 91       	ld	r29, X+
    321e:	ed 91       	ld	r30, X+
    3220:	fd 91       	ld	r31, X+
    3222:	0d 90       	ld	r0, X+
    3224:	f8 94       	cli
    3226:	fe bf       	out	0x3e, r31	; 62
    3228:	0f be       	out	0x3f, r0	; 63
    322a:	ed bf       	out	0x3d, r30	; 61
    322c:	ed 91       	ld	r30, X+
    322e:	fd 91       	ld	r31, X+
    3230:	09 94       	ijmp

00003232 <_exit>:
    3232:	f8 94       	cli

00003234 <__stop_program>:
    3234:	ff cf       	rjmp	.-2      	; 0x3234 <__stop_program>
